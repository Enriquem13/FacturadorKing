using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.Mail;
using System.Timers;
using MySql.Data.MySqlClient;
using System.Net;
/*using Ini.Net;*/
using MailBee.SmtpMail;
using MailBee.Mime;
//using System.Runtime.InteropServices;
using Excel = Microsoft.Office.Interop.Excel;
using System.Threading.Tasks;
using System.Threading;
using System.Globalization;
using Facturador;


//using Outlook = Microsoft.Office.Interop.Outlook;
//using Microsoft.Office.Interop.Outlook;

namespace emailking
{
    public partial class home : Form
    {
        private ListViewColumnSorter lvwColumnSorter;

        Form1 fLogin;
        public string[] lineas;
        String sDbserver;
        String sDbname;
        String sDbuser;
        String sDbpass;
        String sSmtpserver;
        String sSmtpuser;
        String sSmtppwd;
        String sSmtpfrom;
        String sSmtpport;
        String sSmtpdisplay;
        public String sGlobalSmtpCC = "";
        public Boolean bPruebadecorreo = false;
        public string FileUpName = "";
        public string FileUpNNET = "";
        public List<ListViewItem> myItemsG;// = new List<ListViewItem>();
        public int contadorG;
        public String sGsCasoId;
        public int iGsTiposolicitudid;
        public String sGsIdiomaClave;
        public String sGsContactoEmail;
        public String sGsSubject;
        public int sGREC;
        public int sGiContadorcorreossend;
        public bool sGbCorreodepeuba;
        public String sGsDocumentoid;
        public String sGsEstatusPlazoId;
        public String sGsPlazoId;
        public int sGiContadorcorreosupdates;
        public String sGsCasoNumero;
        public String sGqueryinsertconsulta;
        //variables para el proceso de enviar correos general
        public String sGsUID_JobConfig;
        public String sGFunctionName;
        public String sGsViewName;
        public String sGCorreodepruebasendmail;
        public String strRutaArchivo = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        int imarcatotal = 0;
        int ipattotal = 0;
        int imarcatotal_accion = 0;
        int ipattotal_accion = 0;
        public List<objMP_seleccionada> marcassinnovedades = null;
        public List<objMP_seleccionada> patentesinnovedades = null;
        public List<objMP_seleccionada> declaracionuso3 = null;
        public List<objMP_seleccionada> declaracionuso6 = null;
        public List<objMP_seleccionada> renovacionmarcaatiempoviejaley = null;
        public List<objMP_seleccionada> renovacionmarcatardiaviejaley = null;
        public List<objMP_seleccionada> renovacionmarcaporanoviejaley = null;
        public List<objMP_seleccionada> renovacionmarcaatiemponuevaley = null;
        public List<objMP_seleccionada> renovacionmarcatardianuevaley = null;
        public List<objMP_seleccionada> renovacionmarcaporanonuevaley = null;
        public List<objMP_seleccionada> accionoficialpatentes = null;
        public List<objMP_seleccionada> accionoficialmarcas = null;
        public List<objMP_seleccionada> patentesanualidades1 = null;
        public List<objMP_seleccionada> citapago = null;

        //List<ListViewItem> masterlist;
        public home(Form1 login)
        {
            fLogin = login;
            InitializeComponent();
            marcassinnovedades = new List<objMP_seleccionada>();
            patentesinnovedades = new List<objMP_seleccionada>();
            declaracionuso3 = new List<objMP_seleccionada>();
            declaracionuso6 = new List<objMP_seleccionada>();
            renovacionmarcaatiempoviejaley = new List<objMP_seleccionada>();
            renovacionmarcatardiaviejaley = new List<objMP_seleccionada>();
            renovacionmarcaporanoviejaley = new List<objMP_seleccionada>();
            renovacionmarcaatiemponuevaley = new List<objMP_seleccionada>();
            renovacionmarcatardianuevaley = new List<objMP_seleccionada>();
            renovacionmarcaporanonuevaley = new List<objMP_seleccionada>();
            accionoficialpatentes = new List<objMP_seleccionada>();
            accionoficialmarcas = new List<objMP_seleccionada>();
            patentesanualidades1 = new List<objMP_seleccionada>();
            citapago = new List<objMP_seleccionada>();
            //masterlist = new List<ListViewItem>();
            // Create an instance of a ListView column sorter and assign it
            // to the ListView control.
            lvwColumnSorter = new ListViewColumnSorter();
            this.listView1.ListViewItemSorter = lvwColumnSorter;

            conect_robot conactualizafile = new conect_robot();
            MySqlDataReader respuesta_config = conactualizafile.getdatareader("SELECT * FROM jobconfig.configuracionrobot;");
            respuesta_config.Read();

            String sipserver = validareader("ipserver", "configuracionrobot_ id", respuesta_config);
            String sdb_name = validareader("db_name", "configuracionrobot_ id", respuesta_config);
            String suser_db = validareader("user_db", "configuracionrobot_ id", respuesta_config);
            String spass_db = validareader("pass_db", "configuracionrobot_ id", respuesta_config);
            String ssmtp_server = validareader("smtp_server", "configuracionrobot_ id", respuesta_config);
            String ssmtp_mail = validareader("smtp_mail", "configuracionrobot_ id", respuesta_config);
            String ssmtp_pass = validareader("smtp_pass", "configuracionrobot_ id", respuesta_config);
            String ssmtp_from = validareader("smtp_from", "configuracionrobot_ id", respuesta_config);
            String ssmtp_port = validareader("smtp_port", "configuracionrobot_ id", respuesta_config);
            String ssmtp_display = validareader("smtp_display", "configuracionrobot_ id", respuesta_config);
            String ssmtp_CC_patentes = validareader("smtp_CC_patentes", "configuracionrobot_ id", respuesta_config);
            String ssmtp_CC_marcas = validareader("smtp_CC_marcas", "configuracionrobot_ id", respuesta_config);
            String ssmtp_to_default_local = validareader("smtp_to_default_local", "configuracionrobot_ id", respuesta_config);//copia oculta

            StreamWriter escrito = File.CreateText(strRutaArchivo + "\\mailking\\conemailking.properties"); // en el 
            String sArchivoconf = sipserver + "\n" +
                                    sdb_name + "\n" +
                                    suser_db + "\n" +
                                    spass_db + "\n" +
                                    ssmtp_server + "\n" +
                                    ssmtp_mail + "\n" +
                                    ssmtp_pass + "\n" +
                                    ssmtp_from + "\n" +
                                    ssmtp_port + "\n" +
                                    ssmtp_display + "\n" +
                                    ssmtp_CC_patentes + "\n" +
                                    ssmtp_CC_marcas + "\n" +
                                    ssmtp_to_default_local + "\n";
            String contenidofile = sArchivoconf;
            escrito.Write(contenidofile.ToString());
            escrito.Flush();
            escrito.Close();
            //restaurar

            respuesta_config.Close();
            conactualizafile.Cerrarconexion();

            //poner en la columna el mes
            string fichero = strRutaArchivo + "\\mailking\\conemailking.properties";
            string contenido = String.Empty;
            if (File.Exists(fichero))
            {
                contenido = File.ReadAllText(fichero);
                lineas = contenido.Split('\n');
                sDbserver = lineas[0];
                sDbname = lineas[1];
                sDbuser = lineas[2];
                sDbpass = lineas[3];
                sSmtpserver = lineas[4];
                sSmtpuser = lineas[5];
                sSmtppwd = lineas[6];
                sSmtpfrom = lineas[7];
                sSmtpport = lineas[8];
                sSmtpdisplay = lineas[9];
                sGlobalSmtpCC = lineas[10];

                tb_dbserver.Text = lineas[0];
                tb_dbname.Text = lineas[1];
                tb_dbuser.Text = lineas[2];
                tb_dbpdw.Text = lineas[3];

                tb_smtpserver.Text = lineas[4];
                tb_smtpuser.Text = lineas[5];
                tb_smtppwd.Text = lineas[6];
                tb_smtpfrom.Text = lineas[7];
                tb_smtpport.Text = lineas[8];
                tb_smtpdisplay.Text = lineas[9];
                rtBodymessage_patentes.Text = lineas[10];
                rtBodymessage.Text = lineas[11];
                tbCCo_all.Text = lineas[12];
                /*
                 " `smtp_CC_patentes` = '" + rtBodymessage_patentes.Text + "',  " +
                " `smtp_CC_marcas` = '" + rtBodymessage.Text + "',  " +
                " `smtp_to_default_local` = '" + tbCCo_all.Text + "' " +
                 */
            }
            if (fLogin.sId != "1")
            {
                tb_dbserver.Enabled = false;
                tb_dbname.Enabled = false;
                tb_dbuser.Enabled = false;
                tb_dbpdw.Enabled = false;
                tb_smtpserver.Enabled = false;
                tb_smtpuser.Enabled = false;
                tb_smtppwd.Enabled = false;
                tb_smtpfrom.Enabled = false;
                tb_smtpport.Enabled = false;
                tb_smtpdisplay.Enabled = false;
                rtBodymessage.Enabled = false;
                rtBodymessage_patentes.Enabled = false;
                tbCCo_all.Enabled = false;

                //Colocamos * si no es el administrador


                tb_dbuser.Text = "***";
                tb_dbpdw.Text = "***";
                tb_smtpuser.Text = "***";
                tb_smtppwd.Text = "***";

                button2.Enabled = false;
            }

            lwpatentetes.View = View.Details;
            // Allow the user to edit item text.
            //lwpatentetes.LabelEdit = true;
            // Allow the user to rearrange columns.
            lwpatentetes.AllowColumnReorder = true;
            // Display check boxes.
            lwpatentetes.CheckBoxes = true;
            // Select the item and subitems when selection is made.
            lwpatentetes.FullRowSelect = true;
            // Display grid lines.
            lwpatentetes.GridLines = true;
            // Sort the items in the list in ascending order.
            lwpatentetes.Sorting = SortOrder.Ascending;

            //renovacion de marca por ano
            lvmarcasporano.View = View.Details;
            // Allow the user to edit item text.
            //lvmarcasporano.LabelEdit = true;
            // Allow the user to rearrange columns.
            lvmarcasporano.AllowColumnReorder = true;
            // Display check boxes.
            lvmarcasporano.CheckBoxes = true;
            // Select the item and subitems when selection is made.
            lvmarcasporano.FullRowSelect = true;
            // Display grid lines.
            lvmarcasporano.GridLines = true;
            // Sort the items in the list in ascending order.
            lvmarcasporano.Sorting = SortOrder.Ascending;

            listView1.View = View.Details;
            // Allow the user to edit item text.
            //listView1.LabelEdit = true;
            // Allow the user to rearrange columns.
            listView1.AllowColumnReorder = true;
            // Display check boxes.
            listView1.CheckBoxes = true;
            // Select the item and subitems when selection is made.
            listView1.FullRowSelect = true;
            // Display grid lines.
            listView1.GridLines = true;
            // Sort the items in the list in ascending order.
            listView1.Sorting = SortOrder.Ascending;

            //Docuemntos de prioridad
            lvdocprioridad.View = View.Details;
            // Allow the user to edit item text.
            //lvdocprioridad.LabelEdit = true;
            // Allow the user to rearrange columns.
            lvdocprioridad.AllowColumnReorder = true;
            // Display check boxes.
            lvdocprioridad.CheckBoxes = true;
            // Select the item and subitems when selection is made.
            lvdocprioridad.FullRowSelect = true;
            // Display grid lines.
            lvdocprioridad.GridLines = true;
            // Sort the items in the list in ascending order.
            lvdocprioridad.Sorting = SortOrder.Ascending;


            //renovacion de marca tardio
            lvRenovaciontardia.View = View.Details;
            // Allow the user to edit item text.
            //lvRenovaciontardia.LabelEdit = true;
            // Allow the user to rearrange columns.
            lvRenovaciontardia.AllowColumnReorder = true;
            // Display check boxes.
            lvRenovaciontardia.CheckBoxes = true;
            // Select the item and subitems when selection is made.
            lvRenovaciontardia.FullRowSelect = true;
            // Display grid lines.
            lvRenovaciontardia.GridLines = true;
            // Sort the items in the list in ascending order.
            lvRenovaciontardia.Sorting = SortOrder.Ascending;


            //Cita a pago

            // //renovacion de marca tardio
            //lvPruebauso.View = View.Details;
            //// Allow the user to edit item text.
            //lvPruebauso.LabelEdit = true;
            //// Allow the user to rearrange columns.
            //lvPruebauso.AllowColumnReorder = true;
            //// Display check boxes.
            //lvPruebauso.CheckBoxes = true;
            //// Select the item and subitems when selection is made.
            //lvPruebauso.FullRowSelect = true;
            //// Display grid lines.
            //lvPruebauso.GridLines = true;
            //// Sort the items in the list in ascending order.
            //lvPruebauso.Sorting = SortOrder.Ascending;

            //Citaapago

            //renovacion de marca tardio
            lvCitaapago.View = View.Details;
            // Allow the user to edit item text.
            //lvCitaapago.LabelEdit = true;
            // Allow the user to rearrange columns.
            lvCitaapago.AllowColumnReorder = true;
            // Display check boxes.
            lvCitaapago.CheckBoxes = true;
            // Select the item and subitems when selection is made.
            lvCitaapago.FullRowSelect = true;
            // Display grid lines.
            lvCitaapago.GridLines = true;
            // Sort the items in the list in ascending order.
            lvCitaapago.Sorting = SortOrder.Ascending;

            //Lvdeclaraciondeuso

            Lvdeclaraciondeuso.View = View.Details;
            // Allow the user to edit item text.
            //Lvdeclaraciondeuso.LabelEdit = true;
            // Allow the user to rearrange columns.
            Lvdeclaraciondeuso.AllowColumnReorder = true;
            // Display check boxes.
            Lvdeclaraciondeuso.CheckBoxes = true;
            // Select the item and subitems when selection is made.
            Lvdeclaraciondeuso.FullRowSelect = true;
            // Display grid lines.
            Lvdeclaraciondeuso.GridLines = true;
            // Sort the items in the list in ascending order.
            Lvdeclaraciondeuso.Sorting = SortOrder.Ascending;



            //lvaccionoficial
            lvaccionoficial.View = View.Details;
            // Allow the user to edit item text.
            //lvaccionoficial.LabelEdit = true;
            // Allow the user to rearrange columns.
            lvaccionoficial.AllowColumnReorder = true;
            // Display check boxes.
            lvaccionoficial.CheckBoxes = true;
            // Select the item and subitems when selection is made.
            lvaccionoficial.FullRowSelect = true;
            // Display grid lines.
            lvaccionoficial.GridLines = true;
            // Sort the items in the list in ascending order.
            lvaccionoficial.Sorting = SortOrder.Ascending;
            //lvdeclaracionseisanos
            //lvaccionoficial
            lvdeclaracionseisanos.View = View.Details;
            // Allow the user to edit item text.
            //lvaccionoficial.LabelEdit = true;
            // Allow the user to rearrange columns.
            lvdeclaracionseisanos.AllowColumnReorder = true;
            // Display check boxes.
            lvdeclaracionseisanos.CheckBoxes = true;
            // Select the item and subitems when selection is made.
            lvdeclaracionseisanos.FullRowSelect = true;
            // Display grid lines.
            lvdeclaracionseisanos.GridLines = true;
            // Sort the items in the list in ascending order.
            lvdeclaracionseisanos.Sorting = SortOrder.Ascending;

            //lvDisneos
            lvDisneos.View = View.Details;
            // Allow the user to edit item text.
            //lvaccionoficial.LabelEdit = true;
            // Allow the user to rearrange columns.
            lvDisneos.AllowColumnReorder = true;
            // Display check boxes.
            lvDisneos.CheckBoxes = true;
            // Select the item and subitems when selection is made.
            lvDisneos.FullRowSelect = true;
            // Display grid lines.
            lvDisneos.GridLines = true;
            // Sort the items in the list in ascending order.
            lvDisneos.Sorting = SortOrder.Ascending;



            //lvDisenosabde
            lvDisenosabde.View = View.Details;
            // Allow the user to edit item text.
            //lvaccionoficial.LabelEdit = true;
            // Allow the user to rearrange columns.
            lvDisenosabde.AllowColumnReorder = true;
            // Display check boxes.
            lvDisenosabde.CheckBoxes = true;
            // Select the item and subitems when selection is made.
            lvDisenosabde.FullRowSelect = true;
            // Display grid lines.
            lvDisenosabde.GridLines = true;
            // Sort the items in the list in ascending order.
            lvDisenosabde.Sorting = SortOrder.Ascending;


            //lvMsinnovedades
            lvMsinnovedades.View = View.Details;
            // Allow the user to edit item text.
            //lvaccionoficial.LabelEdit = true;
            // Allow the user to rearrange columns.
            lvMsinnovedades.AllowColumnReorder = true;
            // Display check boxes.
            lvMsinnovedades.CheckBoxes = true;
            // Select the item and subitems when selection is made.
            lvMsinnovedades.FullRowSelect = true;
            // Display grid lines.
            lvMsinnovedades.GridLines = true;
            // Sort the items in the list in ascending order.
            lvMsinnovedades.Sorting = SortOrder.Ascending;

            /*Validamos mostrar la copia oculta*/
            if (login.sId != "1") {
                label84.Visible = false;
                tbCCo_all.Visible = false;
            }
        }
        private const int CP_NOCLOSE_BUTTON = 0x200;
        protected override CreateParams CreateParams
        {
            get
            {
                CreateParams myCp = base.CreateParams;
                myCp.ClassStyle = myCp.ClassStyle | CP_NOCLOSE_BUTTON;
                return myCp;
            }
        }

        private void home_Load(object sender, EventArgs e)
        {

        }


        private void button1_Click(object sender, EventArgs e)
        {
            fLogin.Close();
            this.Close();
        }
        void Cargaregistros_patentes()
        {
            conect_robot con1 = new conect_robot();
            if (true)//no validamos la fecha a seleccionar
            {
                //String queryinsert = "SELECT * FROM jobconfig.warning_pagoanualidad_6_33_2 limit 10;";// where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
                //String queryinsert = "use jobconfig; SELECT  " +
                //                      "     * " +
                //                      " FROM " +
                //                      "     jobconfig.warning_renovacionmarca_20_34_2 " +
                //                      " WHERE " +
                //                      "     CURDATE() BETWEEN (CasoFechaVigencia - INTERVAL 9 MONTH) AND CasoFechaVigencia " +
                //                      " ORDER BY CasoFechaVigencia desc;";//where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
                //sGqueryinsertconsulta
                MySqlDataReader respuestastringinsert = con1.getdatareader(sGqueryinsertconsulta);
                List<ListViewItem> myItems = new List<ListViewItem>();
                int contador = 0;
                while (respuestastringinsert.Read())
                {
                    //con el casoid obtendremos el valor del xUID_JobConfig para despues traer get body y enviar el mail en el momento con la funcion doble click
                    String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
                    ListViewItem listaagregar = new ListViewItem("", 0);
                    //para marcas
                    listaagregar.Checked = false;
                    listaagregar.SubItems.Add(validareader("FechaSended", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("numenviados", "CasoId", respuestastringinsert));

                    listaagregar.SubItems.Add(validareader("CasoNumero", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("AnualidadFechaLimitePago", "CasoId", respuestastringinsert).Substring(0, 10));
                    listaagregar.SubItems.Add(validareader("anualidades", "CasoId", respuestastringinsert));//quinquenio a pagar 11 a 15  anualidades
                    listaagregar.SubItems.Add(validareader("Subject", "CasoId", respuestastringinsert));


                    listaagregar.SubItems.Add(validareader("PlazoId", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));


                    listaagregar.SubItems.Add(validareader("CasoNumConcedida", "CasoId", respuestastringinsert));


                    listaagregar.SubItems.Add(validareader("TipoPlazoDescrip", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("ClienteNombre", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("InteresadoNombre", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("Invento", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));

                    listaagregar.SubItems.Add(validareader("ReferenciaNombre", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("CasoFechaVigencia", "CasoId", respuestastringinsert).Substring(0, 10));
                    listaagregar.SubItems.Add(validareader("PaisNombre", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert).Substring(0, 10));


                    listaagregar.SubItems.Add(validareader("EstatusCasoId", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("tipoplazoid", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("EstatusPlazoId", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("EstatusPlazoDescrip", "CasoId", respuestastringinsert));


                    listaagregar.SubItems.Add(validareader("ContactoNombre", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("ContactoEmail", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("IdiomaOriginalID", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("IdiomaId", "CasoId", respuestastringinsert));
                    listaagregar.SubItems.Add(validareader("IdiomaClave", "CasoId", respuestastringinsert));

                    myItems.Add(listaagregar);
                    contador++;
                }
                myItemsG = myItems;
                contadorG = contador;
                respuestastringinsert.Close();
                con1.Cerrarconexion();
            }
            else
            {
                tbLoading.Text = "";
                //debe verificarse que existan las fechas correctas            
            }
        }
        //void Cargaregistros() {
        //    conect_robot con1 = new conect_robot();
        //    if (true)//no validamos la fecha a seleccionar
        //    {
        //        //String queryinsert = "SELECT * FROM jobconfig.warning_pagoanualidad_6_33_2 limit 10;";// where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
        //        //String queryinsert = "use jobconfig; SELECT  " +
        //        //                      "     * " +
        //        //                      " FROM " +
        //        //                      "     jobconfig.warning_renovacionmarca_20_34_2 " +
        //        //                      " WHERE " +
        //        //                      "     CURDATE() BETWEEN (CasoFechaVigencia - INTERVAL 9 MONTH) AND CasoFechaVigencia " +
        //        //                      " ORDER BY CasoFechaVigencia desc;";//where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
        //        MySqlDataReader respuestastringinsert = con1.getdatareader(sGqueryinsertconsulta);
        //        List<ListViewItem> myItems = new List<ListViewItem>();
        //        int contador = 0;
        //        while (respuestastringinsert.Read())
        //        {
        //            //con el casoid obtendremos el valor del xUID_JobConfig para despues traer get body y enviar el mail en el momento con la funcion doble click
        //            String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
        //            ListViewItem listaagregar = new ListViewItem("", 0);
        //            //para marcas
        //            listaagregar.Checked = false;
        //            listaagregar.SubItems.Add(validareader("FechaSended", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("numenviados", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("PlazoId", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));

        //            listaagregar.SubItems.Add(validareader("CasoNumero", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoNumConcedida", "CasoId", respuestastringinsert));

        //            listaagregar.SubItems.Add(validareader("DocumentoId", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("TipoPlazoDescrip", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("ClienteNombre", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("InteresadoNombre", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("Marca", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));

        //            listaagregar.SubItems.Add(validareader("CasoProductosClase", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("ReferenciaNombre", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoFechaVigencia", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoFechaIni", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoFechaFin", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion2meses", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion4meses", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add("");
        //            listaagregar.SubItems.Add("");
        //            listaagregar.SubItems.Add(validareader("anualidades", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("PaisNombre", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoFechaFilingCliente", "CasoId", respuestastringinsert));

        //            listaagregar.SubItems.Add(validareader("DocumentoFecha", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("DocumentoFechaVencimiento", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("EstatusCasoId", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("tipoplazoid", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("EstatusPlazoId", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("EstatusPlazoDescrip", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("PlazoFechaAtencion", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("ContactoNombre", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("ContactoEmail", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("IdiomaOriginalID", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("IdiomaId", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("IdiomaClave", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("Subject", "CasoId", respuestastringinsert));
        //            myItems.Add(listaagregar);
        //            contador++;
        //        }
        //        myItemsG = myItems;
        //        contadorG = contador;
        //        respuestastringinsert.Close();
        //        con1.Cerrarconexion();
        //    }
        //    else
        //    {
        //        tbLoading.Text = "";
        //        //debe verificarse que existan las fechas correctas            
        //    }
        //}


        private void button3_Click(object sender, EventArgs e)
        {
            tbLoading.Text = "Cargando registros ...";
            System.Threading.Thread.Sleep(1000);
            listView1.Items.Clear();
            conect_robot con1 = new conect_robot();
            String sPlazoid = "";
            String sSend = "";
            String sSendnow = "";
            if (true)
            {
                tbCountRenovacion.Text = "";
                List<ListViewItem> myItems = new List<ListViewItem>();
                int contador = 0;
                String sFiltrocasonumero = "";
                if (tb_casonumero.Text != "")
                {
                    sFiltrocasonumero = " AND war.CasoNumero like '%" + tb_casonumero.Text + "%' ";
                }
                String queryinsert = "use jobconfig; SELECT  " +
                                        " war.PlazoId, " +
                                        " war.CasoId, " +
                                        " war.DocumentoId, " +
                                        " war.TipoPlazoDescrip, " +
                                        " war.ClienteNombre, " +
                                        " war.InteresadoNombre, " +
                                        " war.TipoSolicitudDescrip, " +
                                        " war.SubTipoSolicitudDescripcion, " +
                                        " war.Marca, " +
                                        " war.CasoNumeroExpedienteLargo, " +
                                        " war.CasoNumero, " +
                                        " war.CasoProductosClase, " +
                                        " war.ReferenciaNombre, " +
                                        " DATE_FORMAT(war.CasoFechaVigencia,'%d-%m-%Y') as CasoFechaVigencia, " +
                                        " DATE_FORMAT(war.CasoFechaIni,'%d-%m-%Y') as CasoFechaIni, " +
                                        " DATE_FORMAT(war.CasoFechaFin,'%d-%m-%Y') as CasoFechaFin, " +
                                        " war.DocumentoFechaRecepcion, " +
                                        " war.DocumentoFechaRecepcion2meses, " +
                                        " war.DocumentoFechaRecepcion4meses, " +
                                        " war.anualidades, " +
                                        " war.PaisNombre, " +
                                        " DATE_FORMAT(war.CasoFechaRecepcion,'%d-%m-%Y') as CasoFechaRecepcion, " +
                                        " war.CasoFechaFilingCliente, " +
                                        " war.CasoNumConcedida, " +
                                        " war.DocumentoFecha, " +
                                        " war.DocumentoFechaVencimiento, " +
                                        " war.EstatusCasoId, " +
                                        " war.EstatusCasoDescrip, " +
                                        " war.tipoplazoid, " +
                                        " war.EstatusPlazoId, " +
                                        " war.EstatusPlazoDescrip, " +
                                        " war.PlazoFechaAtencion, " +
                                        " war.ContactoNombre, " +
                                        " war.ContactoEmail, " +
                                        " war.IdiomaOriginalID, " +
                                        " war.IdiomaId, " +
                                        " war.IdiomaClave, " +
                                        " war.Subject, " +
                                        " war.SendNow, " +
                                        " DATE_FORMAT(Get_Fechaultimo(war.CasoId, 'warning_renovacionmarca_20_34_2'),'%d-%m-%Y') AS `FechaSended`, " +
                                        " Get_countenviados(war.CasoId, 'warning_renovacionmarca_20_34_2') AS `numenviados` " +
                                        " FROM " +
                                        "    jobconfig.warning_renovacionmarca_20_34_2 as war " +
                                        " WHERE " +
                                        " CURDATE() BETWEEN (CasoFechaVigencia - INTERVAL 9 MONTH) AND CasoFechaVigencia " +
                                        sFiltrocasonumero +
                                        " group by CasoId " +
                                        " ORDER BY CasoFechaVigencia DESC;";
                if (renovacionmarcaatiempoviejaley != null)
                {
                    renovacionmarcaatiempoviejaley.Clear();
                }

                datagrid_renovacion_marcaatiempo_viejaley.Rows.Clear();
                Action act = () =>
                {
                    MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);

                    while (respuestastringinsert.Read())
                    {
                        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);

                        try
                        {
                            String sPlazoId = validareader("PlazoId", "PlazoId", respuestastringinsert);
                            String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                            String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);
                            String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                            String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                            String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                            String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                            String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                            String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                            String sMarca = validareader("Marca", "Marca", respuestastringinsert);
                            String sInvento = "";
                            String sFechadiferencia = "";
                            String sFechaLimite = "";
                            String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                            String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                            String sCasoProductosClase = validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                            String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                            String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);

                            String sCasoFechaConcesion = validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);
                            
                            String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                            String sCasoFechaInidos = validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                            String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                            String sDocumentoFechaRecepcion = validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                            String sDocumentoFechaRecepcion2meses = validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                            String sDocumentoFechaRecepcion4meses = validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                            String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                            String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                            String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                            String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                            String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                            String sDocumentoFecha = validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                            String sDocumentoFechaVencimiento = validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                            String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                            String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                            String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                            String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                            String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                            String sPlazoFechaAtencion = validareader("PlazoFechaAtencion", "PlazoFechaAtencion", respuestastringinsert);
                            String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                            String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                            String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                            String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                            String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                            String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                            String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                            String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                            String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);

                            int REC = 0;
                            String sUID_JobConfig = "a8b24705-ceab-11e8-869b-000c291862e7";
                            String FunctionName = "Get_Email_RenovacionMarca_20_34_2";
                            String sViewName = "warning_renovacionmarca_20_34_2";

                            DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                            DateTime dFechaLimite = validafechavacia(sFechaLimite);
                            DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                            DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                            DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                            DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                            DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                            DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                            DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                            DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);
                            DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                            DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                            DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                            DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                            DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                            DateTime dFechaSended = validafechavacia(sFechaSended);

                            objMP_seleccionada renovacion_marcaatiempo_viejaley = new objMP_seleccionada(sPlazoId,
                                                                                                        sCasoId,
                                                                                                        sDocumentoId,
                                                                                                        sTipoPlazoDescrip,
                                                                                                        sClienteNombre,
                                                                                                        sInteresadoNombre,
                                                                                                        sTipoSolicitudDescrip,
                                                                                                        sSubTipoSolicitudDescripcion,
                                                                                                        sMarca,
                                                                                                        sInvento,
                                                                                                        sFechadiferencia,
                                                                                                        dFechaLimite,
                                                                                                        sCasoNumeroExpedienteLargo,
                                                                                                        sCasoNumero,
                                                                                                        sCasoProductosClase,
                                                                                                        sReferenciaNombre,
                                                                                                        dCasoFechaConcesion,
                                                                                                        dCasoFechaVigencia,
                                                                                                        dCasoFechaIni,
                                                                                                        dCasoFechaInidos,
                                                                                                        dCasoFechaFin,
                                                                                                        dDocumentoFechaRecepcion,
                                                                                                        dDocumentoFechaRecepcion2meses,
                                                                                                        dDocumentoFechaRecepcion4meses,
                                                                                                        sanualidades,
                                                                                                        sPaisNombre,
                                                                                                        dCasoFechaRecepcion,
                                                                                                        dCasoFechaFilingCliente,
                                                                                                        sCasoNumConcedida,
                                                                                                        dDocumentoFecha,
                                                                                                        dDocumentoFechaVencimiento,
                                                                                                        sEstatusCasoId,
                                                                                                        sEstatusCasoDescrip,
                                                                                                        stipoplazoid,
                                                                                                        sEstatusPlazoId,
                                                                                                        sEstatusPlazoDescrip,
                                                                                                        dPlazoFechaAtencion,
                                                                                                        sContactoNombre,
                                                                                                        sContactoEmail,
                                                                                                        sIdiomaOriginalID,
                                                                                                        sIdiomaId,
                                                                                                        sIdiomaClave,
                                                                                                        sSubject,
                                                                                                        sSendNow,
                                                                                                        dFechaSended,
                                                                                                        snumenviados,
                                                                                                        REC,
                                                                                                        tbCorreodepruebas.Text,
                                                                                                        sUID_JobConfig,
                                                                                                        FunctionName,
                                                                                                        sViewName,
                                                                                                        sTipoSolicitudId
                                                                                                        );
                            renovacionmarcaatiempoviejaley.Add(renovacion_marcaatiempo_viejaley);
                        }
                        catch (Exception Ex)
                        {
                            //MessageBox.Show("Mensaje "+Ex.Message);
                        }
                        contador++;
                    }
                    respuestastringinsert.Close();
                    con1.Cerrarconexion();
                };
                using (Waitforcases form = new Waitforcases(act))
                {
                    form.ShowDialog();
                }

                foreach (var Obj_renovacion_marcaatiempo_viejaley in renovacionmarcaatiempoviejaley)
                {

                    /*1*/
                    CheckBox checkboxcell = new CheckBox();

                    datagrid_renovacion_marcaatiempo_viejaley.Rows.Add(Obj_renovacion_marcaatiempo_viejaley.sCasoId, false,
                      /*2*/        Obj_renovacion_marcaatiempo_viejaley.sFechaSended,
                      /*3*/        Obj_renovacion_marcaatiempo_viejaley.snumenviados,
                      /*4*/        Obj_renovacion_marcaatiempo_viejaley.sPlazoId,
                      /*5*/        Obj_renovacion_marcaatiempo_viejaley.sCasoId,
                      /*6*/        Obj_renovacion_marcaatiempo_viejaley.sCasoNumero,
                      /*7*/        Obj_renovacion_marcaatiempo_viejaley.sCasoNumConcedida,//numero de registro
                      /*8*/        Obj_renovacion_marcaatiempo_viejaley.sMarca,
                      /*9*/        Obj_renovacion_marcaatiempo_viejaley.sTipoPlazoDescrip,
                      /*10*/       Obj_renovacion_marcaatiempo_viejaley.sClienteNombre,
                      /*11*/       Obj_renovacion_marcaatiempo_viejaley.sInteresadoNombre,
                      /*12*/       Obj_renovacion_marcaatiempo_viejaley.sContactoNombre,
                      /*13*/       Obj_renovacion_marcaatiempo_viejaley.sContactoEmail, //solicitante 
                      /*14*/       Obj_renovacion_marcaatiempo_viejaley.sSubject,
                      /*15*/       Obj_renovacion_marcaatiempo_viejaley.sTipoSolicitudDescrip,
                      /*16*/       Obj_renovacion_marcaatiempo_viejaley.sSubTipoSolicitudDescripcion,
                      /*17*/       Obj_renovacion_marcaatiempo_viejaley.sCasoNumeroExpedienteLargo,//No.expediente
                      /*18*/       Obj_renovacion_marcaatiempo_viejaley.sCasoProductosClase,//Clase
                      /*19*/       Obj_renovacion_marcaatiempo_viejaley.sReferenciaNombre,//referencia cliente 
                      /*20*/       Obj_renovacion_marcaatiempo_viejaley.sCasoFechaRecepcion, //fecha presentacion
                      /*21*/       Obj_renovacion_marcaatiempo_viejaley.sCasoFechaVigencia, //fecha vigencia
                      /*22*/       Obj_renovacion_marcaatiempo_viejaley.sCasoFechaIni, //caso fecha inicio
                      /*23*/       Obj_renovacion_marcaatiempo_viejaley.sCasoFechaFin, //caso fecha fin 
                      /*24*/       "",
                      /*25*/       "",
                      /*26*/       Obj_renovacion_marcaatiempo_viejaley.sDocumentoFechaRecepcion,
                      /*27*/       Obj_renovacion_marcaatiempo_viejaley.sDocumentoFechaRecepcion2meses,
                      /*28*/       Obj_renovacion_marcaatiempo_viejaley.sDocumentoFechaRecepcion4meses,
                      /*29*/       Obj_renovacion_marcaatiempo_viejaley.sanualidades,
                      /*30*/       Obj_renovacion_marcaatiempo_viejaley.sPaisNombre,
                      /*31*/       Obj_renovacion_marcaatiempo_viejaley.sCasoFechaFilingCliente,
                      /*32*/       Obj_renovacion_marcaatiempo_viejaley.sDocumentoFecha,
                      /*33*/       Obj_renovacion_marcaatiempo_viejaley.sDocumentoFechaVencimiento,
                      /*34*/       Obj_renovacion_marcaatiempo_viejaley.sEstatusCasoId,
                      /*35*/       Obj_renovacion_marcaatiempo_viejaley.stipoplazoid,
                      /*36*/       Obj_renovacion_marcaatiempo_viejaley.sEstatusPlazoId,
                      /*37*/       Obj_renovacion_marcaatiempo_viejaley.sPlazoFechaAtencion,
                      /*38*/       Obj_renovacion_marcaatiempo_viejaley.sIdiomaOriginalID,
                      /*39*/       Obj_renovacion_marcaatiempo_viejaley.sIdiomaId,
                      /*40*/       Obj_renovacion_marcaatiempo_viejaley.sIdiomaClave,
                      /*41*/       Obj_renovacion_marcaatiempo_viejaley.sEstatusCasoDescrip,
                      /*42*/       Obj_renovacion_marcaatiempo_viejaley.sEstatusPlazoDescrip);
                }
                AdjustColumnOrder_RMTiempoVL();
                tbCountRenovacion.Text = contador + "";
                tbLoading.Text = "";
            }
            else
            {
                tbLoading.Text = "";
            }
            ///*Inicializamos la variables locales que son dos, una es la lista de datos y el otro es un contador*/
            //contadorG = 0;
            //myItemsG = new List<ListViewItem>();
            ///*FIN  Inicializamos la variables locales que son dos, una es la lista de datos y el otro es un contador*/



            //tbCorreosactualizados.Text = "0";-----
            //tbCorreosenviados.Text = "0";------
            //String sFiltrocasonumero = "";
            //if (tb_casonumero.Text!="")
            //{
            //    sFiltrocasonumero = " AND war.CasoNumero like '%" + tb_casonumero.Text + "%' ";
            //}
            //sGqueryinsertconsulta = "use jobconfig; SELECT  " +
            //                        " war.PlazoId, " +
            //                        " war.CasoId, " +
            //                        " war.DocumentoId, " +
            //                        " war.TipoPlazoDescrip, " +
            //                        " war.ClienteNombre, " +
            //                        " war.InteresadoNombre, " +
            //                        " war.TipoSolicitudDescrip, " +
            //                        " war.SubTipoSolicitudDescripcion, " +
            //                        " war.Marca, " +
            //                        " war.CasoNumeroExpedienteLargo, " +
            //                        " war.CasoNumero, " +
            //                        " war.CasoProductosClase, " +
            //                        " war.ReferenciaNombre, " +
            //                        " DATE_FORMAT(war.CasoFechaVigencia,'%d-%m-%Y') as CasoFechaVigencia, " +
            //                        " DATE_FORMAT(war.CasoFechaIni,'%d-%m-%Y') as CasoFechaIni, " +
            //                        " DATE_FORMAT(war.CasoFechaFin,'%d-%m-%Y') as CasoFechaFin, " +
            //                        " war.DocumentoFechaRecepcion, " +
            //                        " war.DocumentoFechaRecepcion2meses, " +
            //                        " war.DocumentoFechaRecepcion4meses, " +
            //                        " war.anualidades, " +
            //                        " war.PaisNombre, " +
            //                        " war.CasoFechaRecepcion, " +
            //                        " war.CasoFechaFilingCliente, " +
            //                        " war.CasoNumConcedida, " +
            //                        " war.DocumentoFecha, " +
            //                        " war.DocumentoFechaVencimiento, " +
            //                        " war.EstatusCasoId, " +
            //                        " war.EstatusCasoDescrip, " +
            //                        " war.tipoplazoid, " +
            //                        " war.EstatusPlazoId, " +
            //                        " war.EstatusPlazoDescrip, " +
            //                        " war.PlazoFechaAtencion, " +
            //                        " war.ContactoNombre, " +
            //                        " war.ContactoEmail, " +
            //                        " war.IdiomaOriginalID, " +
            //                        " war.IdiomaId, " +
            //                        " war.IdiomaClave, " +
            //                        " war.Subject, " +
            //                        " war.SendNow, " +
            //                        " DATE_FORMAT(Get_Fechaultimo(war.CasoId, " +
            //                          "  'warning_declaraciondeuso_erf'),'%d-%m-%Y') AS `FechaSended`," +
            //                        " Get_countenviados(war.CasoId, 'warning_renovacionmarca_20_34_2') AS `numenviados` " +
            //                        " FROM " +
            //                        "    jobconfig.warning_renovacionmarca_20_34_2 as war " +
            //                        " WHERE " +
            //                        " CURDATE() BETWEEN (CasoFechaVigencia - INTERVAL 9 MONTH) AND CasoFechaVigencia " +
            //                        sFiltrocasonumero +
            //                        " group by CasoId " +
            //                        " ORDER BY CasoFechaVigencia DESC;";
            //using (Waitforcases form = new Waitforcases(Cargaregistros))
            //{
            //    form.ShowDialog();
            //}
            //masterlist.Clear();    
        }


        private void AdjustColumnOrder_RMTiempoVL()
        {
            conect_robot con1 = new conect_robot();
            String queryinsert = "SELECT Columna_nombre, orden_usuario FROM jobconfig.orden_vistas_robot_king where id_usuario = 1 and id_vista = 1 order by orden_usuario asc ;";

            MySqlDataReader resp_query = con1.getdatareader(queryinsert);
            while (resp_query.Read())
            {
                String sColumna_nombre = validareader("Columna_nombre", "Columna_nombre", resp_query);
                int sorden_usuario = int.Parse(validareader("orden_usuario", "orden_usuario", resp_query));
                datagrid_renovacion_marcaatiempo_viejaley.Columns[sColumna_nombre].DisplayIndex = sorden_usuario;// RMTVL_seleccionar
            }
            resp_query.Close();
            con1.Cerrarconexion();
            //conect con1 = new conect_robot();

            //String queryinsert = "SELECT Columna_nombre, orden_usuario FROM jobconfig.rmtiempovl_orden where id_usuario = 1 and id_vista = 1 order by orden_usuario asc ;";


            //MySqlDataReader resp_query = con1.getdatareader(queryinsert);
            //resp_query.Read();

            //String sColumna_nombre = validareader("Columna_nombre", "Columna_nombre", resp_query);

            //int sorden_usuario = int.Parse(validareader("orden_usuario", "orden_usuario", resp_query));


            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_casoid"].DisplayIndex = 0;// RMTVL_casoid
            //datagrid_renovacion_marcaatiempo_viejaley.Columns[sColumna_nombre].DisplayIndex = sorden_usuario;// RMTVL_seleccionar
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_Ultimi_correo"].DisplayIndex = 2;// RMTVL_Ultimi_correo
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_Correos_enviados"].DisplayIndex = 3;// RMTVL_Correos_enviados
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_plazoid"].DisplayIndex = 4;// RMTVL_plazoid
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_casoid_view"].DisplayIndex = 5;// RMTVL_casoid_view
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_casonumero"].DisplayIndex = 6;// RMTVL_casonumero
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_Numero_registro"].DisplayIndex = 7;// RMTVL_Numero_registro antes: caso numero concedida
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_marca"].DisplayIndex = 8;// RMTVL_marca
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_tipoplazodescrip"].DisplayIndex = 9;// RMTVL_tiposoldescrip
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_clientenombre"].DisplayIndex = 10;// RMTVL_clientenombre
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_solicitante"].DisplayIndex = 11;// RMTVL_solicitante
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_contactonombre"].DisplayIndex = 12;// RMTVL_contactonombre
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_contactomail"].DisplayIndex = 13;// RMTVL_contactomail
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_subject"].DisplayIndex = 14;// RMTVL_subject
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_tiposoldescrip"].DisplayIndex = 15;// RMTVL_tiposoldescrip
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_subtiposoldesc"].DisplayIndex = 16;// RMTVL_subtiposoldesc
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_nexp"].DisplayIndex = 17;// RMTVL_nexp
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_clase"].DisplayIndex = 18;// RMTVL_clase
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_Referencia_nombre"].DisplayIndex = 19;// RMTVL_Referencia_nombre
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_fechapresentacion"].DisplayIndex = 20;// RMTVL_fechapresentacion
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_fechavigencia"].DisplayIndex = 21;// RMTVL_fechavigencia
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_fecha_inicio"].DisplayIndex = 22;// RMTVL_fecha_inicio
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_fecha_fin"].DisplayIndex = 23;// RMTVL_fecha_fin
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_dias_proximo_mail"].DisplayIndex = 24;// RMTVL_dias_proximo_mail
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_fecha_proximo_mail"].DisplayIndex = 25;// RMTVL_fecha_proximo_mail
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_documento_fecha_recepcion"].DisplayIndex = 26;// RMTVL_documento_fecha_recepcion
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_documento_fecha_recepcion_2"].DisplayIndex = 27;// RMTVL_documento_fecha_recepcion_2
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_documento_fecha_recepcion_4"].DisplayIndex = 28;// RMTVL_documento_fecha_recepcion_4
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_anualidades"].DisplayIndex = 29;// RMTVL_anualidades
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_paisnombre"].DisplayIndex = 30;// RMTVL_paisnombre
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_fecha_filing_cliente"].DisplayIndex = 31;// RMTVL_fecha_filing_cliente
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_documento_fecha"].DisplayIndex = 32;// RMTVL_documento_fecha
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_documento_fecha_vencimiento"].DisplayIndex = 33;// RMTVL_documento_fecha_vencimiento
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_estatus_caso"].DisplayIndex = 34;// RMTVL_estatus_caso
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_tipo_plazo_id"].DisplayIndex = 35;// RMTVL_tipo_plazo_id
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_estatus_plazo_id"].DisplayIndex = 36;// RMTVL_estatus_plazo_id
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_plazo_fecha_atencion"].DisplayIndex = 37;// RMTVL_plazo_fecha_atencion
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_idioma_original_id"].DisplayIndex = 38;// RMTVL_idioma_original_id
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_idioma_id"].DisplayIndex = 39;// RMTVL_idioma_id
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_indiomaclave"].DisplayIndex = 40;// RMTVL_indiomaclave
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_estatuscasodescr"].DisplayIndex = 41;// RMTVL_estatuscasodescr
            //datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_estatusplazodescr"].DisplayIndex = 42;// RMTVL_estatusplazodescr
        }

        public String validareader(String campoText, String campoValue, MySqlDataReader mresultado)
        {
            try
            {
                String cItemresult = "";
                if (!mresultado.IsDBNull(mresultado.GetOrdinal(campoText)))
                {
                    cItemresult = mresultado.GetString(mresultado.GetOrdinal(campoText));
                }
                return cItemresult;
            }
            catch (Exception E)
            {
                return "";
            }
        }

        public String validareader2(String campoText, String campoValue, MySqlDataReader mresultado)
        {
            String cItemresult = "";
            if (!mresultado.IsDBNull(mresultado.GetOrdinal(campoText)))
            {
                cItemresult = mresultado.GetString(mresultado.GetOrdinal(campoText));
            }
            return cItemresult;
        }
        public class ComboboxItem
        {
            public string Text { get; set; }
            public object Value { get; set; }

            public override string ToString()
            {
                return Text;
            }
        }

        //private void textBox1_KeyPress(object sender, KeyPressEventArgs e)
        //{
        //    if (Char.IsDigit(e.KeyChar))
        //    {
        //        e.Handled = false;
        //    }
        //    else if (Char.IsControl(e.KeyChar))
        //    {
        //        e.Handled = false;
        //    }
        //    else if (Char.IsSeparator(e.KeyChar))
        //    {
        //        e.Handled = false;
        //    }
        //    else
        //    {
        //        e.Handled = true;
        //    }


        //    if (tbFechainicio.Text.Length == 2)
        //    {
        //        tbFechainicio.Text = tbFechainicio.Text + "-";
        //        tbFechainicio.SelectionStart = tbFechainicio.Text.Length;

        //    }
        //    if (tbFechainicio.Text.Length == 5)
        //    {
        //        tbFechainicio.Text = tbFechainicio.Text + "-";
        //        tbFechainicio.SelectionStart = tbFechainicio.Text.Length;
        //    }
        //}

        private void button4_Click(object sender, EventArgs e)
        {
            try
            {
                //MailMessage mail = new MailMessage();
                //SmtpClient SmtpServer = new SmtpClient(sSmtpserver);

                //mail.From = new MailAddress(sSmtpfrom);
                //mail.To.Add("eduardor@dicss.com.mx");
                //mail.Subject = "Test Mail";
                //mail.Body = rtBodymessage.Text;

                //SmtpServer.Port = 465;//sSmtpport
                //SmtpServer.Credentials = new System.Net.NetworkCredential(sSmtpuser, sSmtppwd);
                //SmtpServer.EnableSsl = true;
                //SmtpServer.Send(mail);
                //MessageBox.Show("mail Send");
                //String sMailsend = "eduardor@dicss.com.mx";
                //sSmtpserver = "mail.dicss.com.mx";
                //sSmtpport = "587";
                //sSmtpuser = "eduardor@dicss.com.mx";
                //sSmtppwd = "Upiicsa1990";

                String sMailsend = "mail@vadillo-king.mx";
                sSmtpserver = "smtp.gmail.com";
                sSmtpport = "587";//465
                sSmtpuser = "mail@vadillo-king.mx";
                sSmtppwd = "Ag1g3L5Dbi4wd9eVUptxuFI7Uedtli3xK7lu8X7XVvA=";

                System.Net.Mail.MailMessage email = new System.Net.Mail.MailMessage();
                email.To.Add(new MailAddress("eduardor@dicss.com.mx"));
                email.From = new MailAddress(sMailsend);
                email.Subject = "Asunto (Test: " + DateTime.Now.ToString("dd / MMM / yyy hh:mm:ss") + " ) ";
                email.Body = rtBodymessage.Text;//codigo html
                //email.IsBodyHtml = true;
                //email.Priority = MailPriority.Normal;
                //Smtp mailer = new Smtp();
                SmtpClient smtp = new SmtpClient(sSmtpserver, Convert.ToInt32(sSmtpport));
                //smtp.Host = "dicss.com.mx";
                //smtp.Port = 465;
                smtp.Timeout = 99999;
                smtp.UseDefaultCredentials = false;
                smtp.Credentials = new System.Net.NetworkCredential(sSmtpuser, sSmtppwd);
                smtp.EnableSsl = false;
                try
                {
                    smtp.Send(email);
                    email.Dispose();
                    MessageBox.Show("Correo enviado");
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error al enviar: " + ex);

                }

                //string to = "eduardor@dicss.com.mx";
                //string from = "eduardor@dicss.com.mx";
                //string subject = "Using the new SMTP client.";
                //string body = @"Using this new feature, you can send an email message from an application very easily.";
                //MailMessage message = new MailMessage(from, to, subject, body);
                //SmtpClient client = new SmtpClient("mail.dicss.com.mx");
                //Console.WriteLine("Changing time out from {0} to 100.", client.Timeout);
                //client.Timeout = 99999;
                //// Credentials are necessary if the server requires the client 
                //// to authenticate before it will send email on the client's behalf.
                //client.Credentials = System.Net.CredentialCache.DefaultNetworkCredentials;
                //client.Send(message);
                //MessageBox.Show("Mesanej enviado");

            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.ToString());
            }
        }
        public String cambiaformatofecha(String Fechauno)
        {
            try
            {
                if (Fechauno != "")
                {
                    //Fechauno se espera con el formato dd-mm-yyyy
                    String año = Fechauno.Substring(6, 4);//yyyy
                    String mes = Fechauno.Substring(3, 2);//mm
                    String dia = Fechauno.Substring(0, 2);//dd
                                                          //retorna yyyy-mm-dd
                    return año + "-" + mes + "-" + dia;
                }
                else
                {
                    return "";
                }
            }
            catch (Exception E)
            {
                MessageBox.Show("Fecha Incorretca, verifique por favor");
                return "";
            }
        }

        //private void tbFechafin_KeyPress(object sender, KeyPressEventArgs e)
        //{
        //    if (Char.IsDigit(e.KeyChar))
        //    {
        //        e.Handled = false;
        //    }
        //    else if (Char.IsControl(e.KeyChar))
        //    {
        //        e.Handled = false;
        //    }
        //    else if (Char.IsSeparator(e.KeyChar))
        //    {
        //        e.Handled = false;
        //    }
        //    else
        //    {
        //        e.Handled = true;
        //    }


        //    if (tbFechafin.Text.Length == 2)
        //    {
        //        tbFechafin.Text = tbFechafin.Text + "-";
        //        tbFechafin.SelectionStart = tbFechafin.Text.Length;

        //    }
        //    if (tbFechafin.Text.Length == 5)
        //    {
        //        tbFechafin.Text = tbFechafin.Text + "-";
        //        tbFechafin.SelectionStart = tbFechafin.Text.Length;
        //    }
        //}

        private void button5_Click(object sender, EventArgs e)
        {
            ejecutar();
        }
        private static System.Timers.Timer aTimer;

        public static void ejecutar()
        {
            SetTimer();
            Console.WriteLine("\nPress the Enter key to exit the application...\n");
            Console.WriteLine("The application started at {0:HH:mm:ss.fff}", DateTime.Now);
            Console.ReadLine();
            aTimer.Stop();
            aTimer.Dispose();
            Console.WriteLine("Terminating the application...");
        }

        private static void SetTimer()
        {
            // Create a timer with a two second interval.
            aTimer = new System.Timers.Timer(2000);
            // Hook up the Elapsed event for the timer. 
            aTimer.Elapsed += OnTimedEvent;
            aTimer.AutoReset = true;
            aTimer.Enabled = true;
        }

        private static void OnTimedEvent(Object source, ElapsedEventArgs e)
        {
            Console.WriteLine("The Elapsed event was raised at {0:HH:mm:ss.fff}",
                              e.SignalTime);
        }
        static public String valor = "";
        private void button6_Click(object sender, EventArgs e)
        {
            //listviewcheck ejemplo = new listviewcheck("");
            //ejemplo.Show();
            //tabledetalle ihyv = new tabledetalle();
            //ihyv.Show();
            //string to= "eramrief92@gmail.com";
            //string asunto = "Asunto";
            //string bodyhtml = "<!DOCTYPE html><html><head>	<title>titulo</title></head><body>	<p>Prueba de mensaje formato html</p></body></html>";
            //string sCC = "eduarximo@gmail.com,eduardor@dicss.com.mx";
            //Int32 val = 111;
            //Int32 val22 = 111;
            //int respuesta = SendEmail(to, asunto, bodyhtml, val, val22, sCC);
            for (int x = 0; x < 6; x++)
            {
                valor = "valorstring " + x;
                Thread mailuno = new Thread(creamailyenvia);
                mailuno.Start();
                mailuno.Join();
            }


        }

        static void creamailyenvia()
        {
            //MessageBox.Show("Thread numero" + valor);
            Console.Write("Thread numero" + valor);
        }

        private void button7_Click(object sender, EventArgs e)
        {
            conect_robot con1 = new conect_robot();
            String queryinsert = "USE JobConfig; SELECT w.UID_JobConfig, w.SPName, w.ViewName, w.FunctionName, w.Days FROM job_config w where w.Activo = 'T' order by w.Order;";
            MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);
            listView2.Items.Clear();
            while (respuestastringinsert.Read())
            {
                // Set the view to show details.
                listView2.View = View.Details;
                // Allow the user to edit item text.
                listView2.LabelEdit = true;
                // Allow the user to rearrange columns.
                listView2.AllowColumnReorder = true;
                // Display check boxes.
                listView2.CheckBoxes = false;
                // Select the item and subitems when selection is made.
                listView2.FullRowSelect = true;
                // Display grid lines.
                listView2.GridLines = true;
                // Sort the items in the list in ascending order.
                listView2.Sorting = SortOrder.Ascending;
                ListViewItem checks = new ListViewItem();
                //validareader("ClienteId", "ClienteId", respuestastringinsert);//primer parametro es el texto, el segundo parametro es el id o valor y el tercer parametro es el mysqldatareader
                ListViewItem listaagregar = new ListViewItem(validareader("UID_JobConfig", "UID_JobConfig", respuestastringinsert));
                //listaagregar.Checked = true;
                listaagregar.SubItems.Add(validareader("SPName", "UID_JobConfig", respuestastringinsert));
                listaagregar.SubItems.Add(validareader("ViewName", "UID_JobConfig", respuestastringinsert));
                listaagregar.SubItems.Add(validareader("FunctionName", "UID_JobConfig", respuestastringinsert));
                listaagregar.SubItems.Add(validareader("Days", "UID_JobConfig", respuestastringinsert));

                listView2.Items.Add(listaagregar);
                listView2.FullRowSelect = true;
            }
        }

        private void listView2_ItemCheck(object sender, ItemCheckEventArgs e)
        {
            //listView2;
            //String WRDV = listView2.SelectedItems.ToString();
            try
            {
                String valorchecado = listView2.Items[e.Index].SubItems[0].Text;
                //String checkedslist = listView2.CheckedItems[e.Index].SubItems[0].Text;
                //String sValor = listView2.SelectedItems[0].SubItems[e.Index].Text;
                //MessageBox.Show("checado: " + valorchecado);
            }
            catch (Exception es)
            {
                MessageBox.Show("Warning " + es);
            }

        }

        private void button9_Click(object sender, EventArgs e)
        {
            int iNumeroreg = listView2.Items.Count;
            for (int x = 0; x < iNumeroreg; x++)
            {
                listView2.Items[x].Checked = true;
            }
        }

        private void btdesmarcar_Click(object sender, EventArgs e)
        {
            int iNumeroreg = listView2.Items.Count;
            for (int x = 0; x < iNumeroreg; x++)
            {
                listView2.Items[x].Checked = false;
            }
        }

        private void listView2_DoubleClick(object sender, EventArgs e)
        {
            String sValor = listView2.SelectedItems[0].SubItems[0].Text;

            listviewcheck aClientenuevo = new listviewcheck(sValor);

            if (aClientenuevo.ShowDialog() == DialogResult.OK)
            {
                //comboBoxClientes.Items.Add(aClientenuevo.Cliente);
                //comboBoxContacto.Items.Add(aClientenuevo.Contacto);
                //comboBoxClientes.Text = aClientenuevo.Cliente.Text;
                //comboBoxContacto.Text = aClientenuevo.Contacto.Text;
                //richTextBox1.Text = aClientenuevo.Contactocorreo;
            }
        }

        private void button8_Click(object sender, EventArgs e)
        {

        }

        private void button13_Click(object sender, EventArgs e)
        {

            foreach (DataGridViewRow row in datagrid_renovacion_marcaatiempo_viejaley.Rows)
            {

                row.Cells["RMTiempoVL_seleccionar"].Value = true;

            }
        }

        private void button12_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_renovacion_marcaatiempo_viejaley.Rows)
            {

                row.Cells["RMTiempoVL_seleccionar"].Value = false;

            }
        }

        private int Get_Rec(int PlazoId)
        {
            int Rslt = 0;

            MySqlConnectionStringBuilder conRec = new MySqlConnectionStringBuilder();
            conRec.Server = "192.168.1.160";
            conRec.UserID = "root";
            conRec.Password = "Alejandra5m";
            conRec.Database = "jobconfig";
            //conRec.Server = "localhost";
            //conRec.UserID = "root";
            //conRec.Password = "123456";
            //conRec.Database = "jobconfig";
            conRec.SslMode = MySqlSslMode.None;
            MySqlSslMode sslmode = new MySqlSslMode();


            MySqlConnection ConnRec = new MySqlConnection(conRec.ToString());
            ConnRec.Open();
            string qryRec = "select count(*) as REC from job_sended where PlazoId = " + PlazoId.ToString();

            MySqlCommand myCommand = new MySqlCommand(qryRec, ConnRec);
            myCommand.CommandTimeout = 3600;
            MySqlDataReader myData = myCommand.ExecuteReader();
            if (myData.HasRows)
            {
                while (myData.Read())
                {
                    Rslt = myData.GetInt32("REC");
                }
            }

            myData.Dispose();
            myCommand.Dispose();
            ConnRec.Dispose();

            return (Rslt + 1);
        }

        private void listView1_DoubleClick(object sender, EventArgs e)
        {

        }
        private string get_body(string con, string GetEmailName, int CasoId, string UID_JobConfig, string IdiomaClave)
        {
            string rstl = "";
            try
            {
                MySqlConnection myConn = new MySqlConnection(con + ";SslMode=none");
                //conect con = new conect_robot();
                myConn.Open();
                rstl += "GetEmail: " + GetEmailName + " CasoId: " + CasoId + " UID_JobConfig:  " + UID_JobConfig + " IdiomaClave: " + IdiomaClave;
                MySqlCommand myCommand = new MySqlCommand(GetEmailName, myConn);
                myCommand.CommandTimeout = 3600;
                myCommand.CommandType = System.Data.CommandType.StoredProcedure;
                myCommand.CommandTimeout = 3600;
                myCommand.Parameters.AddWithValue("@xCasoId", CasoId);
                myCommand.Parameters.AddWithValue("@xUID_JobConfig", UID_JobConfig);
                myCommand.Parameters.AddWithValue("@xIdiomaClave", IdiomaClave);

                MySqlParameter myRetParam = new MySqlParameter();
                myRetParam.Direction = System.Data.ParameterDirection.ReturnValue;
                myCommand.Parameters.Add(myRetParam);


                //Execute the function. ReturnValue parameter receives result of the stored function
                myCommand.ExecuteNonQuery();
                rstl = myRetParam.Value.ToString();

                myConn.Dispose();
                myCommand.Dispose();
            }
            catch (Exception e)
            {
                rstl = " Error al obtener el cuerpo del email: " + e.Message;
                //EventLog.WriteEntry(e.Message, EventLogEntryType.Information);
                //throw;
            }
            return rstl;

        }
        void enviarrenovaciondemarcasatiempo()
        {
            try
            {
                conect_robot con = new conect_robot();
                String datosconectjobconfig = con.getdatavalues();
                String sUID_JobConfig = "";
                String FunctionName = "";
                String sViewName = "";
                String sCasoId = sGsCasoId;
                int iTiposolicitudid = iGsTiposolicitudid;
                String sIdiomaClave = sGsIdiomaClave;
                String sContactoEmail = sGsContactoEmail;
                String sSubject = sGsSubject;
                int REC = sGREC;
                Boolean bCorreodepeuba = sGbCorreodepeuba;
                String sDocumentoid = sGsDocumentoid;
                String sEstatusPlazoId = sGsEstatusPlazoId;
                String sPlazoId = sGsPlazoId;
                String sCasoNumero = sGsCasoNumero;


                sUID_JobConfig = sGsUID_JobConfig;// "a8b24705-ceab-11e8-869b-000c291862e7";
                FunctionName = sGFunctionName;// "Get_Email_RenovacionMarca_20_34_2";
                sViewName = sGsViewName;// "warning_renovacionmarca_20_34_2";
                String sBodymail = get_body(datosconectjobconfig, FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

                //resps_UIDJobconfig.Close();
                String sCorreodestino = "";

                if (bCorreodepeuba)//bPruebadecorreo
                {
                    sCorreodestino = sGCorreodepruebasendmail;//Prueba de correo
                }
                else
                {
                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                }
                String[] correos = sCorreodestino.Split(',');
                if (correos.Length > 1)
                {
                    sCorreodestino = correos[0];
                    for (int z = 1; z < correos.Length; z++)
                    {
                        sGlobalSmtpCC += "," + correos[z];
                    }
                }
                //String sAsunto = listView1.CheckedItems[x].SubItems[42].Text;
                //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                sGiContadorcorreossend += iresult;
                //bCorreodepeuba = false;//solo para probar IMPORTANTE QUITAR
                //&& iresult > 0 para validar que se envio y luego actualizar
                if (!bCorreodepeuba && iresult > 0)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                {
                    int iCasoid = Int32.Parse(sCasoId);
                    int isDocumentoid;
                    if (sDocumentoid == "")
                    {
                        isDocumentoid = 0;
                    }
                    else
                    {
                        isDocumentoid = Int32.Parse(sDocumentoid);
                    }
                    int iDays = Int32.Parse("-10000");
                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                    int iPlazoId = Int32.Parse(sPlazoId);
                    sGiContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                }
            }
            catch (Exception E)
            {
                String ruta_log = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\casosking\\";
                if (!Directory.Exists(ruta_log))
                {
                    System.IO.Directory.CreateDirectory(ruta_log);
                }
                String fechalog = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
                StringBuilder sb_log = new StringBuilder();
                sb_log.Append(fechalog + ":configuracionfilesinicio:" + " Error:" + E + "\n");
                System.IO.File.AppendAllText(ruta_log + "sistema_casosking.log", sb_log.ToString());
                sb_log.Clear();
            }
        }
        private void button10_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    //Aquí enviaremos los seleccionados 
            //    int iNumerodechecados = listView1.CheckedItems.Count;
            //    DialogResult oDlgRes;
            //    oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + iNumerodechecados + "correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
            //    if (oDlgRes == DialogResult.Yes)
            //    {
            //        int iContadorcorreossend = 0;
            //        int iContadorcorreosupdates = 0;
            //        Boolean bCorreodepeuba = false;
            //        tbCorreosactualizados.Text = "  0";
            //        tbCorreosenviados.Text = "  0";
            //        sGiContadorcorreossend = 0;
            //        sGiContadorcorreosupdates = 0;
            //        if (tbCorreoPrueba.Text != "")
            //        {
            //            bCorreodepeuba = true;
            //            bPruebadecorreo = true;//bandera para no mandar copias de correo
            //            MessageBox.Show("Se enviarán los correos seleccionados a:" + tbCorreoPrueba.Text);
            //        }
            //        else
            //        {
            //            bPruebadecorreo = false;
            //        }
            //        for (int x = 0; x < iNumerodechecados; x++)
            //        {
            //            //#CasoId 4
            //            //#ContactoEmail 38
            //            //#IdiomaClave 41
            //            //#Subject 42
            //            String sDays = "-10000";
            //            String sTipoPlazoId = listView1.CheckedItems[x].SubItems[33].Text;
            //            String sPlazoId = listView1.CheckedItems[x].SubItems[3].Text;
            //            String sEstatusPlazoId = listView1.CheckedItems[x].SubItems[34].Text;
            //            String sUID_Jobconfig = "";
            //            String sCasoId = listView1.CheckedItems[x].SubItems[4].Text;
            //            //String sDocumentoid = listView1.CheckedItems[x].SubItems[7].Text;
            //            String sCasoNumero = listView1.CheckedItems[x].SubItems[5].Text;
            //            String sContactoEmail = "eramiref92@gmail.com";//listView1.CheckedItems[x].SubItems[37].Text;
            //            String sIdiomaClave = listView1.CheckedItems[x].SubItems[41].Text;
            //            String sSubject = listView1.CheckedItems[x].SubItems[42].Text;

            //            /*
            //             String sTipoPlazoId = listView1.CheckedItems[x].SubItems[33].Text;
            //            String sPlazoId = listView1.CheckedItems[x].SubItems[3].Text;
            //            String sEstatusPlazoId = listView1.CheckedItems[x].SubItems[34].Text;
            //            String sUID_Jobconfig = "";
            //            String sCasoId = listView1.CheckedItems[x].SubItems[4].Text;
            //            //String sDocumentoid = listView1.CheckedItems[x].SubItems[7].Text;
            //            String sCasoNumero = listView1.CheckedItems[x].SubItems[5].Text;
            //            String sContactoEmail = listView1.CheckedItems[x].SubItems[38].Text;
            //            String sIdiomaClave = listView1.CheckedItems[x].SubItems[41].Text;
            //            String sSubject = listView1.CheckedItems[x].SubItems[42].Text;*/
            //            int REC = Get_Rec(Convert.ToInt32(sPlazoId));


            //            sGsCasoId = listView1.CheckedItems[x].SubItems[4].Text;
            //            sGsIdiomaClave = listView1.CheckedItems[x].SubItems[41].Text;
            //            sGsContactoEmail = listView1.CheckedItems[x].SubItems[38].Text;
            //            sGsSubject = listView1.CheckedItems[x].SubItems[42].Text;
            //            sGREC = REC;
            //            sGbCorreodepeuba = bCorreodepeuba;
            //            sGsCasoNumero = listView1.CheckedItems[x].SubItems[5].Text;
            //            sGsDocumentoid = "";// listView1.CheckedItems[x].SubItems[7].Text;
            //            sGsEstatusPlazoId = listView1.CheckedItems[x].SubItems[34].Text;
            //            sGsPlazoId = listView1.CheckedItems[x].SubItems[3].Text;
            //            sGsUID_JobConfig = "a8b24705-ceab-11e8-869b-000c291862e7";
            //            sGFunctionName = "Get_Email_RenovacionMarca_20_34_2";
            //            sGsViewName = "warning_renovacionmarca_20_34_2";
            //            sGCorreodepruebasendmail = tbCorreoPrueba.Text;

            //            /*sGsCasoId = listView1.CheckedItems[x].SubItems[4].Text;
            //            sGsIdiomaClave = listView1.CheckedItems[x].SubItems[41].Text;
            //            sGsContactoEmail = listView1.CheckedItems[x].SubItems[38].Text;
            //            sGsSubject = listView1.CheckedItems[x].SubItems[42].Text;
            //            sGREC = REC;
            //            sGbCorreodepeuba = bCorreodepeuba;
            //            sGsCasoNumero = listView1.CheckedItems[x].SubItems[5].Text;
            //            sGsDocumentoid = listView1.CheckedItems[x].SubItems[7].Text;
            //            sGsEstatusPlazoId = listView1.CheckedItems[x].SubItems[34].Text;
            //            sGsPlazoId = listView1.CheckedItems[x].SubItems[3].Text;
            //            sGsUID_JobConfig = "a8b24705-ceab-11e8-869b-000c291862e7";
            //            sGFunctionName = "Get_Email_RenovacionMarca_20_34_2";
            //            sGsViewName = "warning_renovacionmarca_20_34_2";
            //            sGCorreodepruebasendmail = tbCorreoPrueba.Text;*/
            //            using (Waitforsendmail obj = new Waitforsendmail(enviarrenovaciondemarcasatiempo))
            //            {
            //                obj.ShowDialog();
            //            }

            //            tbCorreosenviados.Text = sGiContadorcorreossend + "";
            //            tbCorreosactualizados.Text = sGiContadorcorreosupdates + "";

            //            /*Borramos las variables globales*/
            //            sGsCasoId = "";
            //            sGsIdiomaClave = "";
            //            sGsContactoEmail = "";
            //            sGsSubject = "";
            //            sGREC = 0;
            //            sGbCorreodepeuba = true;
            //            sGsCasoNumero = "";
            //            sGsDocumentoid = "";
            //            sGsEstatusPlazoId = "";
            //            sGsPlazoId = "";
            //            sGsUID_JobConfig = "";
            //            sGFunctionName = "";
            //            sGsViewName = "";
            //            sGCorreodepruebasendmail = "";
            //            /*fin borramos las variables globales*/
            //            /**LostFocus siguientes datos son LostFocus que recibimos**/
            //            /*sGiContadorcorreosupdates = sGiContadorcorreosupdates;
            //            sGiContadorcorreossend = sGiContadorcorreossend;
            //            sGbCorreodepeuba = sGbCorreodepeuba;*/
            //            /*fin recibir datos*/
            //            //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);
            //            //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
            //            //por lo que generamos el siguiente query
            //            /*Aqui pondremos los datos globales que necesita el proceso para enviar los correos*/
            //        }
            //        MessageBox.Show("Se enviaron " + sGiContadorcorreossend + " Correos Correctamente  y se actualizarón " + sGiContadorcorreosupdates + " Registros en la base de datos King");
            //    }
            //    else
            //    {
            //        //no hacemos nada por que cancelo
            //    }
            //}catch(Exception E){
            //    String ruta_log = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\casosking\\";
            //    if (!Directory.Exists(ruta_log))
            //    {
            //        System.IO.Directory.CreateDirectory(ruta_log);
            //    }
            //    String fechalog = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
            //    StringBuilder sb_log = new StringBuilder();
            //    sb_log.Append(fechalog + ":configuracionfilesinicio:" + " Error:" + E + "\n");
            //    System.IO.File.AppendAllText(ruta_log + "sistema_casosking.log", sb_log.ToString());
            //    sb_log.Clear();
            //}
            try
            {
                // contamos el numero de marcas seleccionadas
                int contador = 0;
                for (int z = 0; z < datagrid_renovacion_marcaatiempo_viejaley.Rows.Count; z++)
                {
                    bool valor = (bool)datagrid_renovacion_marcaatiempo_viejaley.Rows[z].Cells[1].Value;
                    if (valor)
                    {
                        contador++;
                    }
                }

                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + "correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;
                    //definimos la prueba como falso a menos de que tenga capturado el correo de prueba
                    Boolean bCorreodepeuba = false;
                    if (tbCorreoPrueba.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//bandera para no mandar copias de correo
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbCorreoPrueba.Text);
                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }
                    for (int y = 0; y < datagrid_renovacion_marcaatiempo_viejaley.Rows.Count; y++)
                    {
                        bool valor = (bool)datagrid_renovacion_marcaatiempo_viejaley.Rows[y].Cells[1].Value;
                        if (valor)
                        {
                            //obtenemos el objeto de declaracion de uso 3 años seleccionada del datagridview por medio de la busqueda de su casoid
                            String scasoid = datagrid_renovacion_marcaatiempo_viejaley.Rows[y].Cells[0].Value.ToString();
                            objMP_seleccionada obj_renovacion_marcaatiempo_viejaley = renovacionmarcaatiempoviejaley.Find(x => x.sCasoId == scasoid);


                            String sDays = "-10000";
                            String sTipoPlazoId = obj_renovacion_marcaatiempo_viejaley.stipoplazoid;
                            String sPlazoId = obj_renovacion_marcaatiempo_viejaley.sPlazoId;
                            String sEstatusPlazoId = obj_renovacion_marcaatiempo_viejaley.sEstatusPlazoId;
                            String sUID_Jobconfig = "";
                            String sCasoId = obj_renovacion_marcaatiempo_viejaley.sCasoId;
                            String sTiposolicitudid = obj_renovacion_marcaatiempo_viejaley.sTipoSolicitudId;
                            String sDocumentoid = obj_renovacion_marcaatiempo_viejaley.sDocumentoId;
                            String sCasoNumero = obj_renovacion_marcaatiempo_viejaley.sCasoNumero;
                            String sContactoEmail = obj_renovacion_marcaatiempo_viejaley.sContactoEmail;// "eramiref92@gmail.com";//´Para pruebas
                            String sIdiomaClave = obj_renovacion_marcaatiempo_viejaley.sIdiomaClave;
                            String sSubject = obj_renovacion_marcaatiempo_viejaley.sSubject;
                            int REC = 0;
                            Action act = () =>
                            {
                                //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                                //por lo que generamos el siguiente query
                                conect_robot con = new conect_robot();
                                String datosconectjobconfig = con.getdatavalues();
                                //String sUID_JobConfig = obj_Declaraciondeuso3.sobj_UID_JobConfig;
                                //String FunctionName = obj_Declaraciondeuso3.Fobj_unctionName;
                                //String sViewName = obj_Declaraciondeuso3.sobj_ViewName;
                                String sUID_JobConfig = "a8b24705-ceab-11e8-869b-000c291862e7";
                                String FunctionName = "Get_Email_RenovacionMarca_20_34_2";
                                String sViewName = "warning_renovacionmarca_20_34_2";
                                conect_robot valores = new conect_robot();
                                String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

                                //resps_UIDJobconfig.Close();
                                String sCorreodestino = "";

                                if (bCorreodepeuba)
                                {
                                    sCorreodestino = tbCorreoPrueba.Text;//Prueba de correo
                                }
                                else
                                {
                                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                                }
                                String[] correos = sCorreodestino.Split(',');
                                if (correos.Length > 1)
                                {
                                    sCorreodestino = correos[0];
                                    for (int z = 1; z < correos.Length; z++)
                                    {
                                        sGlobalSmtpCC += "," + correos[z];
                                    }

                                }
                                //String sAsunto = listView1.CheckedItems[x].SubItems[42].Text;
                                //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                                iContadorcorreossend += iresult;
                                //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
                                if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                                {
                                    int iCasoid = Int32.Parse(sCasoId);
                                    int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                                    int isDocumentoid;
                                    if (sDocumentoid == "")
                                    {
                                        isDocumentoid = 0;
                                    }
                                    else
                                    {
                                        isDocumentoid = Int32.Parse(sDocumentoid);
                                    }

                                    int iDays = Int32.Parse("-10000");
                                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                    int iPlazoId = Int32.Parse(sPlazoId);
                                    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                                }
                            };
                            using (Waitforsendmail obj = new Waitforsendmail(act))
                            {
                                obj.ShowDialog();
                            }
                            tbCorreosenviados.Text = iContadorcorreossend + "";
                            tbCorreosactualizados.Text = iContadorcorreosupdates + "";

                        }
                    }
                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates);
                }
            }
            catch (Exception ex)
            {

            }
        }
        //public int enviarcorreo(String sBodymail, String sAsunto, String sMailsended, String sCasoId, int REC)
        //{
        //        String sMailsend = "mail@vadillo-king.mx";
        //        String sSmtpserver = "smtp.gmail.com";
        //        //String sSmtpport = "465";//465
        //        String sSmtpuser = "mail@vadillo-king.mx";
        //        String sSmtppwd = "bety1976";
        //        return SendEmail(sMailsended, sAsunto, sBodymail, Int32.Parse(sCasoId), REC);
        //}
        private Stream Get_Logo()
        {
            try
            {
                MySqlConnectionStringBuilder conImg = new MySqlConnectionStringBuilder();
                string fichero = strRutaArchivo + "\\mailking\\conemailking.properties";
                string contenido = String.Empty;
                string SmtpServer = "", SmtpUser = "", SmtpPwd = "", SmtpFrom = "";
                if (File.Exists(fichero))
                {
                    contenido = File.ReadAllText(fichero);
                    String[] lineasdos = contenido.Split('\n');

                    SmtpServer = lineasdos[0];
                    SmtpUser = lineasdos[2];
                    SmtpPwd = lineasdos[3];
                    SmtpFrom = lineasdos[7];
                }
                conImg.Server = SmtpServer;// "192.168.1.160";
                conImg.UserID = SmtpUser;// "root";
                conImg.Password = SmtpPwd;// "Alejandra5m";
                conImg.Database = "jobconfig";
                conImg.SslMode = MySqlSslMode.None;

                MySqlConnection ConnIMG = new MySqlConnection(conImg.ToString());
                ConnIMG.Open();
                string qryIMG = "select p.PIMG from job_params p where p.Param = 'LOGO'";

                MySqlCommand myCommand = new MySqlCommand(qryIMG, ConnIMG);
                myCommand.CommandTimeout = 3600;
                MySqlDataReader myData;
                myData = myCommand.ExecuteReader();
                if (!myData.HasRows)
                    throw new Exception("There are no BLOBs to save");

                myData.Read();

                byte[] imageBytes = (byte[])myData[0];
                Stream buf = new MemoryStream(imageBytes);


                myData.Dispose();
                myCommand.Dispose();
                ConnIMG.Dispose();

                return buf;
            }
            catch (Exception Ex)
            {
                return null;
            }

        }
        private int SendEmail(string To, string Subject, string body, int CasoId, int REC, string SmtpCC)
        {
            string SmtpServer = "smtp.gmail.com";
            string SmtpUser = "mail@vadillo-king.mx";
            string SmtpPwd = "Nogales28";
            string SmtpFrom = "smtp.gmail.com";
            //string SmtpCC = "eduardor@dicss.com.mx";
            int SmtpPort = 465;
            string SmtpDisplay = "Vadillo &  King";
            string rstl = "";
            string sCcomail = "";
            string[] lineasdos;
            try
            {
                String ruta_log_log = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\casosking\\";
                
                if (!Directory.Exists(ruta_log_log))
                {
                    System.IO.Directory.CreateDirectory(ruta_log_log);
                }
                String fechalog = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
                StringBuilder sb_log = new StringBuilder();
                sb_log.Append(fechalog + ":configuracionfilesinicio:" + " Error:");
                string fichero = strRutaArchivo + "\\mailking\\conemailking.properties";
                string contenido = String.Empty;
                if (File.Exists(fichero))
                {
                    contenido = File.ReadAllText(fichero);
                    lineasdos = contenido.Split('\n');

                    SmtpServer = lineasdos[4];
                    SmtpUser = lineasdos[5];
                    SmtpPwd = lineasdos[6];
                    SmtpFrom = lineasdos[7];
                    //SmtpCC = lineasdos[11];//marcas 
                    sCcomail = lineasdos[12];
                }
                else
                {
                    MessageBox.Show("Error en el archivo de configuración.");
                    return 0;
                }

                Boolean SmtpSSL = false;
                //String PathNet = @"J:\PatentesIpFacts\Documentos"; //@"\\servidor\SistemaKingIpfacts\PatentesIpFacts\Documentos";
                //String AppPath = @"J:\PatentesIpFacts\Documentos";


                configuracionfiles obj = new configuracionfiles();
                obj.configuracionfilesinicio();
                String PathNet = @obj.sFileupload + @"\Documentos";
                String AppPath = @obj.sFileupload + @"\Documentos";
                //J:\PatentesIpFacts\Documentos
                //try
                //{
                //    var iniFile = new IniFile("config_filename.ini");
                //    SmtpServer = iniFile.ReadString("KING", "SmtpServer");
                //    SmtpUser = iniFile.ReadString("KING", "SmtpUser");
                //    SmtpPwd = iniFile.ReadString("KING", "SmtpPwd");
                //    SmtpFrom = iniFile.ReadString("KING", "SmtpFrom");
                //    SmtpPort = iniFile.ReadInteger("KING", "SmtpPort");
                //    SmtpSSL = iniFile.ReadBoolean("KING", "SmtpSSL");
                //    SmtpCC = iniFile.ReadString("KING", "SmtpCC");
                //    SmtpDisplay = iniFile.ReadString("KING", "SmtpDisplay");
                //}
                //catch (Exception exception)
                //{
                //    //EventLog.WriteEntry("Error al obtener los datos del email. " + exception.Message, EventLogEntryType.Information);
                //}

                MailBee.Global.LicenseKey = "MN110-8B8932A44B8239779277420FE843-E158";
                Smtp mailer = new Smtp();
                SmtpServer server = new SmtpServer(SmtpServer, SmtpUser, SmtpPwd);
                server.AccountDomain = SmtpServer;
                server.Port = SmtpPort;
                server.AccountName = SmtpUser;
                server.Password = SmtpPwd;

                mailer.SmtpServers.Add(server);
                mailer.Connect();
                mailer.Hello();
                mailer.Login();
                //Get Data From Send Email
                mailer.Message.From.Email = SmtpFrom;
                mailer.Message.From.DisplayName = SmtpDisplay;// "News Letter <newsletter@vadillo-king.mx>";
                //if (TestFrom != "")
                //    To = TestFrom;
                sb_log.Append(fechalog + ":SmtpFrom:" + SmtpFrom);
                mailer.Message.To.AsString = To;
                if (bPruebadecorreo)
                {
                    SmtpCC = "copiaskingrobot@dicss.com.mx";
                }
                else
                {
                    SmtpCC = sGlobalSmtpCC;
                    //SmtpCC = "eduardor@dicss.com.mx";
                }
                mailer.Message.Cc.AsString = SmtpCC;
                mailer.Message.Bcc.Add(sCcomail);//copia oculta traido desde el archivo de configuración 
                mailer.Message.Subject = Subject;
                sb_log.Append(fechalog + ":SmtpFrom:");
                //Embed image (add as attachment with Content-ID value set) of stream
                Stream Logo = Get_Logo();
                mailer.Message.Attachments.Add(Logo, "KingEmail.jpg", "<12s4a8a8778c$5664i1b1$ir671781@tlffmdqjobxj>", "image/gif", null, NewAttachmentOptions.None, MailTransferEncoding.Base64);
                //Get Body of Email
                mailer.BodyHtmlText = body;
                //Sender
                bool sEnvio = mailer.Send();

                System.IO.File.AppendAllText(ruta_log_log + "sistema_casosking.log", sb_log.ToString());
                sb_log.Clear();
                //if (EnviarEmail)
                //    mailer.Send();
                //Save Email in directory
                if (!bPruebadecorreo)
                {
                    string NetPath = Path.Combine(PathNet);
                    string NewPath = Path.Combine(AppPath);
                    string Caso = CasoId.ToString().PadLeft(6, '0');
                    string RECQty = "_REC_" + REC.ToString().PadLeft(2, '0');
                    //string FileMSG = Path.Combine(NewPath, Caso.Substring(0, 2), Caso.Substring(2, 2), Caso.Substring(4, 2));
                    //string FileNET = Path.Combine(NetPath, Caso.Substring(0, 2), Caso.Substring(2, 2), Caso.Substring(4, 2));
                    string FileMSG = Path.Combine(NewPath, Caso);
                    string FileNET = Path.Combine(NetPath, Caso);
                    Directory.CreateDirectory(FileNET);
                    if (Directory.Exists(FileNET))
                    {
                        FileMSG = FileMSG + @"\" + Caso + RECQty.ToString() + "_" + DateTime.Now.ToString("yyyyMMdd_hhmm") + ".eml";
                        FileNET = FileNET + @"\" + Caso + RECQty.ToString() + "_" + DateTime.Now.ToString("yyyyMMdd_hhmm") + ".eml";
                        //EventLog.WriteEntry(FileMSG, EventLogEntryType.Information);
                        //EventLog.WriteEntry(FileNET, EventLogEntryType.Information);
                        mailer.Message.SaveMessage(FileNET);
                        FileUpName = FileMSG;
                        FileUpNNET = FileNET;
                    }
                }
                mailer.Dispose();
                return 1;
            }
            catch (Exception e)
            {
                //grstl = "Error en Email:" + e.Message;
                String ruta_log = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\casosking\\";
                if (!Directory.Exists(ruta_log))
                {
                    System.IO.Directory.CreateDirectory(ruta_log);
                }
                String fechalog = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
                StringBuilder sb_log = new StringBuilder();
                sb_log.Append(fechalog + ":configuracionfilesinicio:" + " Error:" + e + "\n");
                System.IO.File.AppendAllText(ruta_log + "sistema_casosking.log", sb_log.ToString());
                sb_log.Clear();
                //EventLog.WriteEntry(e.Message, EventLogEntryType.Information);
                return 0;
            }
        }
        private int Update_Mov(string con, string UIDJob, int PlazoID, int CasoId, int TipoSolicitudId, int DocumentoId, int EstatusPlazoId, string ViewName, string FileUpName, string FileUpNNET, string CasoNumero, int Days, int REC)
        {
            int rstl;
            try
            {
                byte[] FileUpload = new byte[0]; ;
                if (File.Exists(FileUpNNET))
                {
                    FileStream fStream = File.OpenRead(FileUpNNET);
                    FileUpload = new byte[fStream.Length];
                    fStream.Read(FileUpload, 0, (int)fStream.Length);
                    fStream.Close();
                }
                string qry = "INSERT INTO job_sended (Job_sended_UID,UIDJob,PlazoID,CasoId,TipoSolicitudId,DocumentoId,EstatusPlazoId,ViewName,CasoNumero,FileUpload,RelacionDocumentoLink,REC) " +
                             "values(@Job_sended_UID,@UIDJob,@PlazoID,@CasoId,@TipoSolicitudId,@DocumentoId,@EstatusPlazoId,@ViewName,@CasoNumero,@FileUpload,@RelacionDocumentoLink,@REC)";
                MySqlConnection myConn = new MySqlConnection(con);
                myConn.Open();
                MySqlCommand myCommand = new MySqlCommand(qry, myConn);
                myCommand.CommandTimeout = 3600;
                myCommand.Parameters.Add("@Job_sended_UID", Guid.NewGuid());
                myCommand.Parameters.Add("@UIDJob", UIDJob);
                myCommand.Parameters.Add("@PlazoID", PlazoID);
                myCommand.Parameters.Add("@CasoId", CasoId);
                myCommand.Parameters.Add("@TipoSolicitudId", TipoSolicitudId);
                myCommand.Parameters.Add("@DocumentoId", DocumentoId);
                myCommand.Parameters.Add("@EstatusPlazoId", EstatusPlazoId);
                myCommand.Parameters.Add("@ViewName", ViewName);
                myCommand.Parameters.Add("@CasoNumero", CasoNumero);
                myCommand.Parameters.Add("@FileUpload", FileUpload);
                myCommand.Parameters.Add("@RelacionDocumentoLink", FileUpName);
                myCommand.Parameters.Add("@REC", REC);
                myCommand.ExecuteNonQuery();
                myConn.Dispose();
                myCommand.Dispose();
                rstl = 1;
            }
            catch (Exception e)
            {
                String ruta_log = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\casosking\\";
                if (!Directory.Exists(ruta_log))
                {
                    System.IO.Directory.CreateDirectory(ruta_log);
                }
                String fechalog = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
                StringBuilder sb_log = new StringBuilder();
                sb_log.Append(fechalog + ":configuracionfilesinicio:" + " Error:" + e + "\n");
                System.IO.File.AppendAllText(ruta_log + "sistema_casosking.log", sb_log.ToString());
                sb_log.Clear();
                //rstl = ViewName + " ERROR Update MOV: " + e.Message;
                rstl = 0;
                throw;
            }
            return rstl;
        }

        private void button16_Click(object sender, EventArgs e)
        {
            if (cbAnoanualidad.Text != "")
            {
                tbloadingpatente.Text = "Cargando registros ...";
                System.Threading.Thread.Sleep(1000);
                conect_robot con1 = new conect_robot();
                String sPlazoid = "";
                String sSend = "";
                String sSendnow = "";
                if (true)
                {
                    tbContanualidades.Text = "";
                    List<ListViewItem> myItems = new List<ListViewItem>();
                    int contador = 0;
                    //String queryinsert = "use jobconfig;  select * from (SELECT DISTINCT" +
                    //                             "         `p`.`PlazoId` AS `PlazoId`," +
                    //                             "         `c`.`CasoId` AS `CasoId`," +
                    //                             "         `d`.`DocumentoId` AS `DocumentoId`," +
                    //                             "         (CASE" +
                    //                             "             WHEN (IFNULL(`i`.`IdiomaId`, 2) = 2) THEN 'Pago anualidades subsecuentes'" +
                    //                             "             ELSE 'Next Annuity Payments'" +
                    //                             "         END) AS `TipoPlazoDescrip`," +
                    //                             "         `cl`.`ClienteNombre` AS `ClienteNombre`," +
                    //                             "         GET_INTERESADOS(`c`.`CasoId`) AS `InteresadoNombre`," +
                    //                             "         (CASE" +
                    //                             "             WHEN (IFNULL(`i`.`IdiomaId`, 2) = 2) THEN `ts`.`TipoSolicitudDescrip`" +
                    //                             "             ELSE `ts`.`TipoSolicitudDescripI`" +
                    //                             "         END) AS `TipoSolicitudDescrip`," +
                    //                             "         (CASE" +
                    //                             "             WHEN (IFNULL(`i`.`IdiomaId`, 2) = 2) THEN `sts`.`SubTipoSolicitudDescripcion`" +
                    //                             "             ELSE `sts`.`SubTipoSolicitudDescripcionI`" +
                    //                             "         END) AS `SubTipoSolicitudDescripcion`," +
                    //                             "         (CASE" +
                    //                             "             WHEN (IFNULL(`i`.`IdiomaId`, 2) = 2) THEN `c`.`CasoDenominacion`" +
                    //                             "             ELSE IFNULL(`c`.`CasoTitulo`, `c`.`CasoDenominacion`)" +
                    //                             "         END) AS `Invento`," +
                    //                             "         `c`.`CasoNumeroExpedienteLargo` AS `CasoNumeroExpedienteLargo`," +
                    //                             "         `c`.`CasoNumConcedida` AS `CasoNumConcedida`," +
                    //                             "         `c`.`CasoNumero` AS `CasoNumero`," +
                    //                             "         `rr`.`ReferenciaNombre` AS `ReferenciaNombre`," +
                    //                             "         `d`.`DocumentoFechaRecepcion` AS `DocumentoFechaRecepcion`," +
                    //                             "         (`d`.`DocumentoFechaRecepcion` + INTERVAL 2 MONTH) AS `DocumentoFechaRecepcion2meses`," +
                    //                             "         (`d`.`DocumentoFechaRecepcion` + INTERVAL 4 MONTH) AS `DocumentoFechaRecepcion4meses`," +
                    //                             "         Get_Anualidades_number(`c`.`CasoId`," +
                    //                             "                 IFNULL(`i`.`IdiomaClave`, 'ES')) AS `anualidades`," +
                    //                             "         (CASE" +
                    //                             "             WHEN (IFNULL(`i`.`IdiomaId`, 2) = 2) THEN IFNULL(`pp`.`PaisNombre`, 'México')" +
                    //                             "             ELSE IFNULL(`pp`.`PaisNombreIngles`, 'Mexico')" +
                    //                             "         END) AS `PaisNombre`," +
                    //                             "         `c`.`CasoFechaRecepcion` AS `CasoFechaRecepcion`," +
                    //                             "         `c`.`CasoFechaFilingCliente` AS `CasoFechaFilingCliente`," +
                    //                             "         Get_Fechaultimo(`c`.`CasoId`, 'warning_pagoanualidad_6_33_2') AS `FechaSended`," +
                    //                             "         Get_countenviados(`c`.`CasoId`, 'warning_pagoanualidad_6_33_2') AS `numenviados`," +
                    //                             "         `c`.`CasoFechaVigencia` AS `CasoFechaVigencia`," +
                    //                             "         (`c`.`CasoFechaVigencia` - INTERVAL 180 DAY) AS `CasoFechaIni`," +
                    //                             "         (`c`.`CasoFechaVigencia` + INTERVAL 180 DAY) AS `CasoFechaFin`," +
                    //                             "         `d`.`DocumentoFecha` AS `DocumentoFecha`," +
                    //                             "         `d`.`DocumentoFechaVencimiento` AS `DocumentoFechaVencimiento`," +
                    //                             "         `c`.`EstatusCasoId` AS `EstatusCasoId`," +
                    //                             "         `stc`.`EstatusCasoDescrip` AS `EstatusCasoDescrip`," +
                    //                             "         `p`.`TipoPlazoId` AS `tipoplazoid`," +
                    //                             "         `p`.`EstatusPlazoId` AS `EstatusPlazoId`," +
                    //                             "         `stp`.`EstatusPlazoDescrip` AS `EstatusPlazoDescrip`," +
                    //                             "         `p`.`PlazoFecha` AS `PlazoFecha`," +
                    //                             "         `p`.`PlazoFechaAtencion` AS `PlazoFechaAtencion`," +
                    //                             "         `ct`.`ContactoNombre` AS `ContactoNombre`," +
                    //                             "         `ct`.`ContactoEmail` AS `ContactoEmail`," +
                    //                             "         `i`.`IdiomaId` AS `IdiomaOriginalID`," +
                    //                             "         IFNULL(`i`.`IdiomaId`, 2) AS `IdiomaId`," +
                    //                             "         IFNULL(`i`.`IdiomaClave`, 'ES') AS `IdiomaClave`," +
                    //                             "         (CASE" +
                    //                             "             WHEN" +
                    //                             "                 (IFNULL(`i`.`IdiomaId`, 2) = 2)" +
                    //                             "             THEN" +
                    //                             "                 CONCAT('PAGO ANUALIDADES SUBSECUENTES, MEXICO --'," +
                    //                             "                         `c`.`CasoDenominacion`)" +
                    //                             "             ELSE CONCAT('NEXT ANNUITY PAYMENTS, MEXICO --'," +
                    //                             "                     IFNULL(`c`.`CasoTitulo`, `c`.`CasoDenominacion`))" +
                    //                             "         END) AS `Subject`," +
                    //                             "         GETSENDNOW(`p`.`PlazoId`," +
                    //                             "                 `c`.`CasoId`," +
                    //                             "                 `d`.`DocumentoId`," +
                    //                             "                 `p`.`EstatusPlazoId`," +
                    //                             "                 'warning_pagoanualidad_6_33_2'," +
                    //                             "                 `c`.`CasoNumero`) AS `SendNow`," +
                    //                             "         `c`.`CasoDisenoClasificacion` AS `CasoDisenoClasificacion`" +
                    //                             "     FROM" +
                    //                             "         ((((((((((((`king`.`plazo` `p`" +
                    //                             "         JOIN `king`.`caso` `c` ON ((`c`.`CasoId` = `p`.`CasoId`)))" +
                    //                             "         LEFT JOIN `king`.`pais` `pp` ON ((`pp`.`PaisId` = `c`.`PaisId`)))" +
                    //                             "         LEFT JOIN `king`.`casocliente` `ccl` ON ((`ccl`.`CasoId` = `c`.`CasoId`)))" +
                    //                             "         LEFT JOIN `king`.`cliente` `cl` ON ((`cl`.`ClienteId` = `ccl`.`ClienteId`)))" +
                    //                             "         LEFT JOIN `king`.`contacto` `ct` ON ((`ccl`.`contactoid` = `ct`.`ContactoId`)))" +
                    //                             "         LEFT JOIN `king`.`documento` `d` ON ((`d`.`DocumentoId` = `p`.`DocumentoId`)))" +
                    //                             "         LEFT JOIN `king`.`referencia` `rr` ON ((`c`.`CasoId` = `rr`.`CasoId`)))" +
                    //                             "         LEFT JOIN `king`.`tiposolicitud` `ts` ON ((`ts`.`TipoSolicitudId` = `c`.`TipoSolicitudId`)))" +
                    //                             "         LEFT JOIN `king`.`estatuscaso` `stc` ON ((`stc`.`EstatusCasoId` = `c`.`EstatusCasoId`)))" +
                    //                             "         LEFT JOIN `king`.`estatusplazo` `stp` ON ((`stp`.`EstatusPlazoId` = `p`.`EstatusPlazoId`)))" +
                    //                             "         LEFT JOIN `king`.`subtiposolicitud` `sts` ON (((`sts`.`SubTipoSolicitudId` = `c`.`SubTipoSolicitudId`)" +
                    //                             "             AND (`c`.`TipoSolicitudId` = `sts`.`TipoSolicitudId`))))" +
                    //                             "         LEFT JOIN `king`.`idioma` `i` ON ((`i`.`IdiomaId` = `cl`.`IdiomaId`)))" +
                    //                             "     WHERE" +
                    //                             "         ((`p`.`TipoPlazoId` = 6)" +
                    //                             "             AND (`p`.`EstatusPlazoId` IN (1 , 3))" +
                    //                             "             AND (`c`.`TipoSolicitudId` IN (1 , 2))" +
                    //                             "             AND (`stc`.`estautscasoindseg` <> 0)" +
                    //                             "             AND (`c`.`EstatusCasoId` = 27)" +
                    //                             "             AND (`c`.`SubTipoSolicitudId` < 7)" +
                    //                             "             AND (GET_STATUS_33_123(`p`.`AnualidadId`) = 'T'))) as vistaanualidad, king.anualidad as anualidad" +
                    //" where " +
                    //" vistaanualidad.casoid = anualidad.casoid" +
                    //" and anualidad.estatusanualidadid=1" +

                    //" and year(Anualidad.anualidadfechalimitepago) = '" + cbAnoanualidad.Text + "'";


                    //String queryinsert = "use jobconfig;  select * from (SELECT DISTINCT" +
                    //    " where " +
                    //" vistaanualidad.casoid = anualidad.casoid" +
                    //" and anualidad.estatusanualidadid=1" +

                    //" and year(anualidadfechalimitepago) = '" + cbAnoanualidad.Text + "'";

                    String queryinsert = "use jobconfig;  select * from  warning_anualidades_erf_2022 where year(FechaPagarAnualidades) = " + cbAnoanualidad.Text+";";
                    if (patentesanualidades1 != null)
                    {
                        patentesanualidades1.Clear();
                    }


                    datagrid_patentes_anualidades.Rows.Clear();
                    Action act = () =>
                    {
                        MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);

                        while (respuestastringinsert.Read())
                        {
                            String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
                            try
                            {
                                String sPlazoId = validareader("PlazoId", "PlazoId", respuestastringinsert);
                                String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                                String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);
                                String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                                String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                                String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                                String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                                String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                                String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                                String sMarca = "";// validareader("Marca", "Marca", respuestastringinsert);
                                String sFechadiferencia = validareader("Meses_transcurridos", "Meses_transcurridos", respuestastringinsert);
                                String sFechaLimite = validareader("FechaPagarAnualidades", "CasoId", respuestastringinsert).Substring(0, 10);
                                String sInvento = validareader("Invento", "Invento", respuestastringinsert);
                                String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                                String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                                String sCasoProductosClase = "";// validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                                String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                                String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);

                                // *
                                String sCasoFechaConcesion = ""; // validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);

                                String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                                String sCasoFechaInidos = "";//validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                                String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                                String sDocumentoFechaRecepcion = "";// validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                                String sDocumentoFechaRecepcion2meses = "";// validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                                String sDocumentoFechaRecepcion4meses = "";// validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                                String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                                String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                                String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                                String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                                String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                                String sDocumentoFecha = "";// validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                                String sDocumentoFechaVencimiento = "";// validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                                String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                                String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                                String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                                String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                                String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                                String sPlazoFechaAtencion = validareader("PlazoFechaAtencion", "PlazoFechaAtencion", respuestastringinsert);
                                String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                                String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                                String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                                String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                                String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                                String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                                String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                                String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                                String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);
                                
                                
                                //sContactoEmail = "eramiref92@gmail.com; eduardor@dicss.com.mx";
                                int REC = 0;
                                String sUID_JobConfig = "1ae792f1-ceab-11e8-869b-000c291862e7";
                                String FunctionName = "Get_Email_pagoanualidad_6_33_2";
                                String sViewName = "warning_anualidades_erf_2022";

                                DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                                DateTime dFechaLimite = validafechavacia(sFechaLimite);
                                DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                                DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                                DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                                DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                                DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                                DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                                DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                                DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);
                                DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                                DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                                DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                                DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                                DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                                DateTime dFechaSended = validafechavacia(sFechaSended);

                                objMP_seleccionada patentes_anualidades = new objMP_seleccionada(sPlazoId,
                                                                                                 sCasoId,
                                                                                                sDocumentoId,
                                                                                                sTipoPlazoDescrip,
                                                                                                sClienteNombre,
                                                                                                sInteresadoNombre,
                                                                                                sTipoSolicitudDescrip,
                                                                                                sSubTipoSolicitudDescripcion,
                                                                                                sMarca,
                                                                                                sInvento,
                                                                                                sFechadiferencia,
                                                                                                dFechaLimite,
                                                                                                sCasoNumeroExpedienteLargo,
                                                                                                sCasoNumero,
                                                                                                sCasoProductosClase,
                                                                                                sReferenciaNombre,
                                                                                                dCasoFechaConcesion,
                                                                                                dCasoFechaVigencia,
                                                                                                dCasoFechaIni,
                                                                                                dCasoFechaInidos,
                                                                                                dCasoFechaFin,
                                                                                                dDocumentoFechaRecepcion,
                                                                                                dDocumentoFechaRecepcion2meses,
                                                                                                dDocumentoFechaRecepcion4meses,
                                                                                                sanualidades,
                                                                                                sPaisNombre,
                                                                                                dCasoFechaRecepcion,
                                                                                                dCasoFechaFilingCliente,
                                                                                                sCasoNumConcedida,
                                                                                                dDocumentoFecha,
                                                                                                dDocumentoFechaVencimiento,
                                                                                                sEstatusCasoId,
                                                                                                sEstatusCasoDescrip,
                                                                                                stipoplazoid,
                                                                                                sEstatusPlazoId,
                                                                                                sEstatusPlazoDescrip,
                                                                                                dPlazoFechaAtencion,
                                                                                                sContactoNombre,
                                                                                                sContactoEmail,
                                                                                                sIdiomaOriginalID,
                                                                                                sIdiomaId,
                                                                                                sIdiomaClave,
                                                                                                sSubject,
                                                                                                sSendNow,
                                                                                                dFechaSended,
                                                                                                snumenviados,
                                                                                                REC,
                                                                                                tbCorreodepruebas.Text,
                                                                                                sUID_JobConfig,
                                                                                                FunctionName,
                                                                                                sViewName,
                                                                                                sTipoSolicitudId
                                                                                                );
                                patentesanualidades1.Add(patentes_anualidades);
                            }
                            catch (Exception Ex)
                            {
                                MessageBox.Show("Mensaje " + Ex.Message);
                            }
                            contador++;
                        }
                        respuestastringinsert.Close();
                        con1.Cerrarconexion();
                    };
                    using (Waitforcases form = new Waitforcases(act))
                    {
                        form.ShowDialog();
                    }

                    foreach (var Obj_patentes_anualidades in patentesanualidades1)
                    {
                        /*1*/
                        CheckBox checkboxcell = new CheckBox();
                        datagrid_patentes_anualidades.Rows.Add(Obj_patentes_anualidades.sCasoId, false,
                        /*2*/        Obj_patentes_anualidades.sFechaSended,
                        /*3*/        Obj_patentes_anualidades.snumenviados,
                        /*4*/        Obj_patentes_anualidades.sCasoNumero,
                        /*5*/        Obj_patentes_anualidades.sFechaLimite,
                        /*6*/        Obj_patentes_anualidades.sanualidades,
                        /*7*/        Obj_patentes_anualidades.sSubject,
                        /*8*/        Obj_patentes_anualidades.sPlazoId,
                        /*9*/        Obj_patentes_anualidades.sCasoId,
                        /*10*/       Obj_patentes_anualidades.sCasoNumConcedida,//numero de registro
                        /*11*/       Obj_patentes_anualidades.sTipoPlazoDescrip,
                        /*12*/       Obj_patentes_anualidades.sClienteNombre,
                        /*13*/       Obj_patentes_anualidades.sInteresadoNombre,
                        /*14*/       Obj_patentes_anualidades.sTipoSolicitudDescrip,
                        /*15*/       Obj_patentes_anualidades.sSubTipoSolicitudDescripcion,
                        /*16*/       Obj_patentes_anualidades.sInvento,
                        /*17*/       Obj_patentes_anualidades.sCasoNumeroExpedienteLargo,//No.expediente
                        /*18*/       Obj_patentes_anualidades.sReferenciaNombre,//Referencia cliente
                        /*19*/       Obj_patentes_anualidades.sCasoFechaVigencia, //Fecha vigencia 
                        /*20*/       Obj_patentes_anualidades.sPaisNombre,
                        /*21*/       Obj_patentes_anualidades.sCasoFechaRecepcion, //Fecha presentacion 
                        /*22*/       Obj_patentes_anualidades.sEstatusCasoId,
                        /*23*/       Obj_patentes_anualidades.sEstatusCasoDescrip,
                        /*24*/       Obj_patentes_anualidades.stipoplazoid,
                        /*25*/       Obj_patentes_anualidades.sEstatusPlazoId,
                        /*26*/       Obj_patentes_anualidades.sEstatusPlazoDescrip,
                        /*27*/       Obj_patentes_anualidades.sContactoNombre,
                        /*28*/       Obj_patentes_anualidades.sContactoEmail, //solicitante       
                        /*29*/       Obj_patentes_anualidades.sIdiomaOriginalID,
                        /*30*/       Obj_patentes_anualidades.sIdiomaId,
                        /*31*/       Obj_patentes_anualidades.sIdiomaClave);









                        //datagrid_patentes_anualidades.sCasoProductosClase,//Clase
                        //datagrid_patentes_anualidades.sCasoFechaIni, //caso fecha inicio
                        //datagrid_patentes_anualidades.sCasoFechaFin, //caso fecha fin 
                        //"",
                        //"",
                        //datagrid_patentes_anualidades.sDocumentoFechaRecepcion,
                        //datagrid_patentes_anualidades.sDocumentoFechaRecepcion2meses,
                        //datagrid_patentes_anualidades.sDocumentoFechaRecepcion4meses,
                        //datagrid_patentes_anualidades.sCasoFechaFilingCliente,
                        //datagrid_patentes_anualidades.sDocumentoFecha,
                        //datagrid_patentes_anualidades.sDocumentoFechaVencimiento,     
                        //datagrid_patentes_anualidades.sPlazoFechaAtencion,      



                        /*32*/
                        /*33*/
                        /*34*/
                        /*35*/
                        /*36*/
                        /*37*/
                        /*38*/
                        /*39*/
                        /*40*/
                        /*41*/
                        /*42*/
                    }
                    lipiafechas(datagrid_patentes_anualidades);
                    AdjustColumnOrder_PA();
                    tbContanualidades.Text = contador + "";
                    tbloadingpatente.Text = "";
                }
                else
                {
                    tbloadingpatente.Text = "";
                }
            }
            else
            {
                MessageBox.Show("Debe seleecionar un año para consultar");
            }

            //if(cbAnoanualidad.Text!=""){
            //    tbloadingpatente.Text = "Cargando registros ...";
            //    int conuntpatentes = 0;
            //    try
            //    {
            //        contadorG = 0;
            //        myItemsG = new List<ListViewItem>();
            //        /*FIN  Inicializamos la variables locales que son dos, una es la lista de datos y el otro es un contador*/
            //        lwpatentetes.Items.Clear();
            //        tbContanualidades.Text = "";
            //        tbpatentesanualidadescorreoactualizado.Text = "0";
            //        tbPatentesanualidadesenviados.Text = "0";
            //        //String queryinsert = "SELECT * FROM jobconfig.warning_pagoanualidad_6_33_2 limit 10;";// where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
            //        sGqueryinsertconsulta = "use jobconfig;  select * from (SELECT DISTINCT" +
            //                                    "         `p`.`PlazoId` AS `PlazoId`," +
            //                                    "         `c`.`CasoId` AS `CasoId`," +
            //                                    "         `d`.`DocumentoId` AS `DocumentoId`," +
            //                                    "         (CASE" +
            //                                    "             WHEN (IFNULL(`i`.`IdiomaId`, 2) = 2) THEN 'Pago anualidades subsecuentes'" +
            //                                    "             ELSE 'Next Annuity Payments'" +
            //                                    "         END) AS `TipoPlazoDescrip`," +
            //                                    "         `cl`.`ClienteNombre` AS `ClienteNombre`," +
            //                                    "         GET_INTERESADOS(`c`.`CasoId`) AS `InteresadoNombre`," +
            //                                    "         (CASE" +
            //                                    "             WHEN (IFNULL(`i`.`IdiomaId`, 2) = 2) THEN `ts`.`TipoSolicitudDescrip`" +
            //                                    "             ELSE `ts`.`TipoSolicitudDescripI`" +
            //                                    "         END) AS `TipoSolicitudDescrip`," +
            //                                    "         (CASE" +
            //                                    "             WHEN (IFNULL(`i`.`IdiomaId`, 2) = 2) THEN `sts`.`SubTipoSolicitudDescripcion`" +
            //                                    "             ELSE `sts`.`SubTipoSolicitudDescripcionI`" +
            //                                    "         END) AS `SubTipoSolicitudDescripcion`," +
            //                                    "         (CASE" +
            //                                    "             WHEN (IFNULL(`i`.`IdiomaId`, 2) = 2) THEN `c`.`CasoDenominacion`" +
            //                                    "             ELSE IFNULL(`c`.`CasoTitulo`, `c`.`CasoDenominacion`)" +
            //                                    "         END) AS `Invento`," +
            //                                    "         `c`.`CasoNumeroExpedienteLargo` AS `CasoNumeroExpedienteLargo`," +
            //                                    "         `c`.`CasoNumConcedida` AS `CasoNumConcedida`," +
            //                                    "         `c`.`CasoNumero` AS `CasoNumero`," +
            //                                    "         `rr`.`ReferenciaNombre` AS `ReferenciaNombre`," +
            //                                    "         `d`.`DocumentoFechaRecepcion` AS `DocumentoFechaRecepcion`," +
            //                                    "         (`d`.`DocumentoFechaRecepcion` + INTERVAL 2 MONTH) AS `DocumentoFechaRecepcion2meses`," +
            //                                    "         (`d`.`DocumentoFechaRecepcion` + INTERVAL 4 MONTH) AS `DocumentoFechaRecepcion4meses`," +
            //                                    "         Get_Anualidades_number(`c`.`CasoId`," +
            //                                    "                 IFNULL(`i`.`IdiomaClave`, 'ES')) AS `anualidades`," +
            //                                    "         (CASE" +
            //                                    "             WHEN (IFNULL(`i`.`IdiomaId`, 2) = 2) THEN IFNULL(`pp`.`PaisNombre`, 'México')" +
            //                                    "             ELSE IFNULL(`pp`.`PaisNombreIngles`, 'Mexico')" +
            //                                    "         END) AS `PaisNombre`," +
            //                                    "         `c`.`CasoFechaRecepcion` AS `CasoFechaRecepcion`," +
            //                                    "         `c`.`CasoFechaFilingCliente` AS `CasoFechaFilingCliente`," +
            //                                    "         Get_Fechaultimo(`c`.`CasoId`, 'warning_pagoanualidad_6_33_2') AS `FechaSended`," +
            //                                    "         Get_countenviados(`c`.`CasoId`, 'warning_pagoanualidad_6_33_2') AS `numenviados`," +
            //                                    "         `c`.`CasoFechaVigencia` AS `CasoFechaVigencia`," +
            //                                    "         (`c`.`CasoFechaVigencia` - INTERVAL 180 DAY) AS `CasoFechaIni`," +
            //                                    "         (`c`.`CasoFechaVigencia` + INTERVAL 180 DAY) AS `CasoFechaFin`," +
            //                                    "         `d`.`DocumentoFecha` AS `DocumentoFecha`," +
            //                                    "         `d`.`DocumentoFechaVencimiento` AS `DocumentoFechaVencimiento`," +
            //                                    "         `c`.`EstatusCasoId` AS `EstatusCasoId`," +
            //                                    "         `stc`.`EstatusCasoDescrip` AS `EstatusCasoDescrip`," +
            //                                    "         `p`.`TipoPlazoId` AS `tipoplazoid`," +
            //                                    "         `p`.`EstatusPlazoId` AS `EstatusPlazoId`," +
            //                                    "         `stp`.`EstatusPlazoDescrip` AS `EstatusPlazoDescrip`," +
            //                                    "         `p`.`PlazoFecha` AS `PlazoFecha`," +
            //                                    "         `p`.`PlazoFechaAtencion` AS `PlazoFechaAtencion`," +
            //                                    "         `ct`.`ContactoNombre` AS `ContactoNombre`," +
            //                                    "         `ct`.`ContactoEmail` AS `ContactoEmail`," +
            //                                    "         `i`.`IdiomaId` AS `IdiomaOriginalID`," +
            //                                    "         IFNULL(`i`.`IdiomaId`, 2) AS `IdiomaId`," +
            //                                    "         IFNULL(`i`.`IdiomaClave`, 'ES') AS `IdiomaClave`," +
            //                                    "         (CASE" +
            //                                    "             WHEN" +
            //                                    "                 (IFNULL(`i`.`IdiomaId`, 2) = 2)" +
            //                                    "             THEN" +
            //                                    "                 CONCAT('PAGO ANUALIDADES SUBSECUENTES, MEXICO --'," +
            //                                    "                         `c`.`CasoDenominacion`)" +
            //                                    "             ELSE CONCAT('NEXT ANNUITY PAYMENTS, MEXICO --'," +
            //                                    "                     IFNULL(`c`.`CasoTitulo`, `c`.`CasoDenominacion`))" +
            //                                    "         END) AS `Subject`," +
            //                                    "         GETSENDNOW(`p`.`PlazoId`," +
            //                                    "                 `c`.`CasoId`," +
            //                                    "                 `d`.`DocumentoId`," +
            //                                    "                 `p`.`EstatusPlazoId`," +
            //                                    "                 'warning_pagoanualidad_6_33_2'," +
            //                                    "                 `c`.`CasoNumero`) AS `SendNow`," +
            //                                    "         `c`.`CasoDisenoClasificacion` AS `CasoDisenoClasificacion`" +
            //                                    "     FROM" +
            //                                    "         ((((((((((((`king`.`plazo` `p`" +
            //                                    "         JOIN `king`.`caso` `c` ON ((`c`.`CasoId` = `p`.`CasoId`)))" +
            //                                    "         LEFT JOIN `king`.`pais` `pp` ON ((`pp`.`PaisId` = `c`.`PaisId`)))" +
            //                                    "         LEFT JOIN `king`.`casocliente` `ccl` ON ((`ccl`.`CasoId` = `c`.`CasoId`)))" +
            //                                    "         LEFT JOIN `king`.`cliente` `cl` ON ((`cl`.`ClienteId` = `ccl`.`ClienteId`)))" +
            //                                    "         LEFT JOIN `king`.`contacto` `ct` ON ((`ccl`.`contactoid` = `ct`.`ContactoId`)))" +
            //                                    "         LEFT JOIN `king`.`documento` `d` ON ((`d`.`DocumentoId` = `p`.`DocumentoId`)))" +
            //                                    "         LEFT JOIN `king`.`referencia` `rr` ON ((`c`.`CasoId` = `rr`.`CasoId`)))" +
            //                                    "         LEFT JOIN `king`.`tiposolicitud` `ts` ON ((`ts`.`TipoSolicitudId` = `c`.`TipoSolicitudId`)))" +
            //                                    "         LEFT JOIN `king`.`estatuscaso` `stc` ON ((`stc`.`EstatusCasoId` = `c`.`EstatusCasoId`)))" +
            //                                    "         LEFT JOIN `king`.`estatusplazo` `stp` ON ((`stp`.`EstatusPlazoId` = `p`.`EstatusPlazoId`)))" +
            //                                    "         LEFT JOIN `king`.`subtiposolicitud` `sts` ON (((`sts`.`SubTipoSolicitudId` = `c`.`SubTipoSolicitudId`)" +
            //                                    "             AND (`c`.`TipoSolicitudId` = `sts`.`TipoSolicitudId`))))" +
            //                                    "         LEFT JOIN `king`.`idioma` `i` ON ((`i`.`IdiomaId` = `cl`.`IdiomaId`)))" +
            //                                    "     WHERE" +
            //                                    "         ((`p`.`TipoPlazoId` = 6)" +
            //                                    "             AND (`p`.`EstatusPlazoId` IN (1 , 3))" +
            //                                    "             AND (`c`.`TipoSolicitudId` IN (1 , 2))" +
            //                                    "             AND (`stc`.`estautscasoindseg` <> 0)" +
            //                                    "             AND (`c`.`EstatusCasoId` = 27)" +
            //                                    "             AND (`c`.`SubTipoSolicitudId` < 7)" +
            //                                    "             AND (GET_STATUS_33_123(`p`.`AnualidadId`) = 'T'))) as vistaanualidad, king.anualidad as anualidad" +
            //                                    " where " +
            //                                    " vistaanualidad.casoid = anualidad.casoid" +
            //                                    " and anualidad.estatusanualidadid=1" +
            //                                    " and year(Anualidad.anualidadfechalimitepago) = '" + cbAnoanualidad.Text + "'";//where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
            //        using (Waitforcases form = new Waitforcases(Cargaregistros_patentes))
            //        {
            //            form.ShowDialog();
            //        }
            //        for (int x = 0; x < myItemsG.Count; x++)
            //        {
            //            lwpatentetes.Items.Add(myItemsG[x]);
            //            lwpatentetes.FullRowSelect = true;
            //        }

            //        tbContanualidades.Text = contadorG + "";
            //        tbloadingpatente.Text = "";


            //    }
            //    catch (Exception E)
            //    {
            //        tbloadingpatente.Text = "";
            //        tbContanualidades.Text = conuntpatentes + "";
            //        //respuestastringinsert.Close();
            //    }
            //}else{
            //    MessageBox.Show("Debe seleecionar un año para consultar");
            //}
        }

        private void AdjustColumnOrder_PA()
        {
            datagrid_patentes_anualidades.Columns["PA_casoid"].DisplayIndex = 0;
            datagrid_patentes_anualidades.Columns["PA_seleccionar"].DisplayIndex = 1;
            datagrid_patentes_anualidades.Columns["PA_Ultimi_correo"].DisplayIndex = 2;
            datagrid_patentes_anualidades.Columns["PA_Correos_enviados"].DisplayIndex = 3;
            datagrid_patentes_anualidades.Columns["PA_casonumero"].DisplayIndex = 4;
            datagrid_patentes_anualidades.Columns["PA_fecha_limite"].DisplayIndex = 5;
            datagrid_patentes_anualidades.Columns["PA_anualidades"].DisplayIndex = 6;
            datagrid_patentes_anualidades.Columns["PA_subject"].DisplayIndex = 7;
            datagrid_patentes_anualidades.Columns["PA_plazoid"].DisplayIndex = 8;
            datagrid_patentes_anualidades.Columns["PA_casoid_view"].DisplayIndex = 9;
            datagrid_patentes_anualidades.Columns["PA_Numero_registro"].DisplayIndex = 10;
            datagrid_patentes_anualidades.Columns["PA_tipoplazodescrip"].DisplayIndex = 11;
            datagrid_patentes_anualidades.Columns["PA_clientenombre"].DisplayIndex = 12;
            datagrid_patentes_anualidades.Columns["PA_solicitante"].DisplayIndex = 13;
            datagrid_patentes_anualidades.Columns["PA_tiposoldescrip"].DisplayIndex = 14;
            datagrid_patentes_anualidades.Columns["PA_subtiposoldesc"].DisplayIndex = 15;
            datagrid_patentes_anualidades.Columns["PA_invento"].DisplayIndex = 16;
            datagrid_patentes_anualidades.Columns["PA_nexp"].DisplayIndex = 17;
            datagrid_patentes_anualidades.Columns["PA_Referencia_nombre"].DisplayIndex = 18;
            datagrid_patentes_anualidades.Columns["PA_fechavigencia"].DisplayIndex = 19;
            datagrid_patentes_anualidades.Columns["PA_paisnombre"].DisplayIndex = 20;
            datagrid_patentes_anualidades.Columns["PA_fechapresentacion"].DisplayIndex = 21;
            datagrid_patentes_anualidades.Columns["PA_estatus_caso"].DisplayIndex = 22;
            datagrid_patentes_anualidades.Columns["PA_estatuscasodescr"].DisplayIndex = 23;
            datagrid_patentes_anualidades.Columns["PA_tipo_plazo_id"].DisplayIndex = 24;
            datagrid_patentes_anualidades.Columns["PA_estatus_plazo_id"].DisplayIndex = 25;
            datagrid_patentes_anualidades.Columns["PA_estatusplazodescr"].DisplayIndex = 26;
            datagrid_patentes_anualidades.Columns["PA_contactonombre"].DisplayIndex = 27;
            datagrid_patentes_anualidades.Columns["PA_contactomail"].DisplayIndex = 28;
            datagrid_patentes_anualidades.Columns["PA_idioma_original_id"].DisplayIndex = 29;
            datagrid_patentes_anualidades.Columns["PA_idioma_id"].DisplayIndex = 30;
            datagrid_patentes_anualidades.Columns["PA_indiomaclave"].DisplayIndex = 31;


            //datagrid_patentes_anualidades.Columns["PA_clase"].DisplayIndex = 18;
            //datagrid_patentes_anualidades.Columns["PA_fecha_inicio"].DisplayIndex = 22;
            //datagrid_patentes_anualidades.Columns["PA_fecha_fin"].DisplayIndex = 23;
            //datagrid_patentes_anualidades.Columns["PA_dias_proximo_mail"].DisplayIndex = 24;
            //datagrid_patentes_anualidades.Columns["PA_fecha_proximo_mail"].DisplayIndex = 25;
            //datagrid_patentes_anualidades.Columns["PA_documento_fecha_recepcion"].DisplayIndex = 26;
            //datagrid_patentes_anualidades.Columns["PA_documento_fecha_recepcion_2"].DisplayIndex = 27;
            //datagrid_patentes_anualidades.Columns["PA_documento_fecha_recepcion_4"].DisplayIndex = 28;
            //datagrid_patentes_anualidades.Columns["PA_fecha_filing_cliente"].DisplayIndex = 31;
            //datagrid_patentes_anualidades.Columns["PA_documento_fecha"].DisplayIndex = 32;
            //datagrid_patentes_anualidades.Columns["PA_documento_fecha_vencimiento"].DisplayIndex = 33;
            //datagrid_patentes_anualidades.Columns["PA_plazo_fecha_atencion"].DisplayIndex = 37;





        }


        private void button14_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_patentes_anualidades.Rows)
            {

                row.Cells["PA_seleccionar"].Value = true;

            }
        }

        private void button11_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_patentes_anualidades.Rows)
            {

                row.Cells["PA_seleccionar"].Value = false;

            }
        }

        //private void textBox3_KeyPress(object sender, KeyPressEventArgs e)
        //{
        //if (Char.IsDigit(e.KeyChar))
        //{
        //    e.Handled = false;
        //}
        //else if (Char.IsControl(e.KeyChar))
        //{
        //    e.Handled = false;
        //}
        //else if (Char.IsSeparator(e.KeyChar))
        //{
        //    e.Handled = false;
        //}
        //else
        //{
        //    e.Handled = true;
        //}


        //if (tbFechainiciopatentes.Text.Length == 2)
        //{
        //    tbFechainiciopatentes.Text = tbFechainiciopatentes.Text + "-";
        //    tbFechainiciopatentes.SelectionStart = tbFechainiciopatentes.Text.Length;

        //}
        //if (tbFechainiciopatentes.Text.Length == 5)
        //{
        //    tbFechainiciopatentes.Text = tbFechainiciopatentes.Text + "-";
        //    tbFechainiciopatentes.SelectionStart = tbFechainiciopatentes.Text.Length;
        //}
        //}

        //private void textBox2_KeyPress(object sender, KeyPressEventArgs e)
        //{
        //    if (Char.IsDigit(e.KeyChar))
        //    {
        //        e.Handled = false;
        //    }
        //    else if (Char.IsControl(e.KeyChar))
        //    {
        //        e.Handled = false;
        //    }
        //    else if (Char.IsSeparator(e.KeyChar))
        //    {
        //        e.Handled = false;
        //    }
        //    else
        //    {
        //        e.Handled = true;
        //    }


        //    if (tbFechafinpatentes.Text.Length == 2)
        //    {
        //        tbFechafinpatentes.Text = tbFechafinpatentes.Text + "-";
        //        tbFechafinpatentes.SelectionStart = tbFechafinpatentes.Text.Length;

        //    }
        //    if (tbFechafinpatentes.Text.Length == 5)
        //    {
        //        tbFechafinpatentes.Text = tbFechafinpatentes.Text + "-";
        //        tbFechafinpatentes.SelectionStart = tbFechafinpatentes.Text.Length;
        //    }
        //}

        private void button15_Click(object sender, EventArgs e)
        {
            try
            {

                if (cbanualidadespatentespruebas.Checked && tbPatentesanualidades.Text == "")
                {
                    MessageBox.Show("Para actualizar un caso de prueba debe ingresar un correo de prueba.");
                    return;
                }

                //contamos el numero de marcas seleccionadas
                int contador = 0;
                for (int z = 0; z < datagrid_patentes_anualidades.Rows.Count; z++)
                {
                    bool valor = (bool)datagrid_patentes_anualidades.Rows[z].Cells[1].Value;
                    if (valor)
                    {
                        contador++;
                    }
                }
                //hacemos una confimacion para saber si realmente quiere enviar al numero de marcas seleccionadas
                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + " correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;
                    //definimos la prueba como falso a menos de que tenga capturado el correo de prueba
                    Boolean bCorreodepeuba = false;
                    if (tbPatentesanualidades.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//bandera para no mandar copias de correo
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbPatentesanualidades.Text);

                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }

                    if (cbanualidadespatentespruebas.Checked && tbPatentesanualidades.Text != "")
                    {//si esta checado el checbox de prueba actualizamos 
                        oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + "correos seleccionados a: " + tbPatentesanualidades.Text + " y actualizar" +
                                                    "en el sistema casos king?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                        if (oDlgRes == DialogResult.Yes)
                        {
                            //se enviara el correo de prueba 
                            bCorreodepeuba = false;
                        }
                        else
                        {//salimos del caso
                            return;
                        }

                    }

                    for (int y = 0; y < datagrid_patentes_anualidades.Rows.Count; y++)
                    {
                        bool valor = (bool)datagrid_patentes_anualidades.Rows[y].Cells[1].Value;
                        if (valor)
                        {
                            //obtenemos el objeto de marcasin novedad seleccionada del datagridview por medio de la busqueda de su casoid
                            String scasoid = datagrid_patentes_anualidades.Rows[y].Cells[0].Value.ToString();
                            objMP_seleccionada obj_Panualidadesseleccionada = patentesanualidades1.Find(x => x.sCasoId == scasoid);

                            //#CasoId 4
                            //#ContactoEmail 38
                            //#IdiomaClave 41
                            //#Subject 42
                            String sDays = "-10000";
                            String sTipoPlazoId = obj_Panualidadesseleccionada.stipoplazoid;
                            String sPlazoId = obj_Panualidadesseleccionada.sPlazoId;
                            String sEstatusPlazoId = obj_Panualidadesseleccionada.sEstatusPlazoId;
                            String sUID_Jobconfig = "";
                            String sCasoId = obj_Panualidadesseleccionada.sCasoId;
                            String sTiposolicitudid = obj_Panualidadesseleccionada.sTipoSolicitudId;


                            String sDocumentoid = obj_Panualidadesseleccionada.sDocumentoId;
                            String sCasoNumero = obj_Panualidadesseleccionada.sCasoNumero;
                            String sContactoEmail = obj_Panualidadesseleccionada.sContactoEmail;// "eramiref92@gmail.com";//´Para pruebas
                            String sIdiomaClave = obj_Panualidadesseleccionada.sIdiomaClave;
                            String sSubject = obj_Panualidadesseleccionada.sSubject;
                            int REC = 0;// Get_Rec(Convert.ToInt32(sPlazoId));
                            //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);
                            //sGlobalSmtpCC
                            /*Aquí tomamos el valor del los rtBodymessage_patentes para Patentes ya que si lo hacemos adelante estária fuera de contexto*/
                            sGlobalSmtpCC = rtBodymessage_patentes.Text;//para patentes
                            Action act = () =>
                            {
                                //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                                //por lo que generamos el siguiente query
                                conect_robot con = new conect_robot();
                                String datosconectjobconfig = con.getdatavalues();
                                //String sQuerygetUidjobconfig = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
                                //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
                                String sUID_JobConfig = "1ae792f1-ceab-11e8-869b-000c291862e7";
                                String FunctionName = "Get_Email_pagoanualidad_6_33_2";
                                String sViewName = "warning_anualidades_erf_2022";
                                //while (resps_UIDJobconfig.Read())
                                //{
                                //    sUID_JobConfig = validareader("UID_JobConfig", "UID_JobConfig", resps_UIDJobconfig);
                                //    FunctionName = validareader("FunctionName", "UID_JobConfig", resps_UIDJobconfig);
                                //    sViewName = validareader("ViewName", "UID_JobConfig", resps_UIDJobconfig);
                                //}
                                conect_robot valores = new conect_robot();
                                String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);


                                //resps_UIDJobconfig.Close();
                                String sCorreodestino = "";
                                
                                if (tbPatentesanualidades.Text!="")
                                {
                                    sCorreodestino = tbPatentesanualidades.Text;//Prueba de correo

                                }
                                else
                                {
                                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                                }
                                String[] correos = sCorreodestino.Split(',');
                                //if (correos.Length > 1)
                                //{
                                //    sCorreodestino = correos[0];
                                //    for (int z = 1; z < correos.Length; z++)
                                //    {
                                //        sGlobalSmtpCC += "," + correos[z];
                                //    }

                                //}
                                //sGlobalSmtpCC = rtBodymessage.Text;
                                //String sAsunto = listView1.CheckedItems[x].SubItems[42].Text;
                                //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                                iContadorcorreossend += iresult;
                                //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
                                if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                                {
                                    int iCasoid = Int32.Parse(sCasoId);
                                    int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                                    
                                    int isDocumentoid;
                                    if (sDocumentoid == "")
                                    {
                                        isDocumentoid = 0;
                                    }
                                    else
                                    {
                                        isDocumentoid = Int32.Parse(sDocumentoid);
                                    }

                                    int iDays = Int32.Parse("-10000");
                                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                    int iPlazoId = Int32.Parse(sPlazoId);
                                    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                                }

                            };
                            using (Waitforsendmail obj = new Waitforsendmail(act))
                            {
                                obj.ShowDialog();
                            }
                            tbPatentesanualidadesenviados.Text = iContadorcorreossend + "";
                            tbpatentesanualidadescorreoactualizado.Text = iContadorcorreosupdates + "";
                        }
                    }

                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates);// + iContadorcorreosupdates + " Registros en la base de datos King");

                }
            }
            catch (Exception ex)
            {

            }
            ////Aquí enviaremos los seleccionados 
            //int iNumerodechecados = lwpatentetes.CheckedItems.Count;
            //DialogResult oDlgRes;
            //oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + iNumerodechecados + "correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
            //if (oDlgRes == DialogResult.Yes)
            //{
            //    int iContadorcorreossend = 0;
            //    int iContadorcorreosupdates = 0;
            //    tbPatentesanualidadesenviados.Text = "0";
            //    tbpatentesanualidadescorreoactualizado.Text = "0";
            //    sGiContadorcorreossend = 0;
            //    sGiContadorcorreosupdates = 0;
            //    Boolean bCorreodepeuba = false;
            //    if (tbPatentesanualidades.Text != "")
            //    {
            //        bCorreodepeuba = true;
            //        bPruebadecorreo = true;//bandera para no mnadar copias de correos
            //        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbPatentesanualidades.Text);
            //    }
            //    else
            //    {
            //        bPruebadecorreo = false;
            //    }
            //    for (int x = 0; x < iNumerodechecados; x++)
            //    {
            //        //#CasoId 4
            //        //#ContactoEmail 38
            //        //#IdiomaClave 41
            //        //#Subject 42
            //        String sDays = "-10000";
            //        //var sTipoPlazoId_prueba = lwpatentetes.CheckedItems[x].SubItems["TipoPlazoId"];//string key //columnhandler.index
            //        //String sTipoPlazoId_prueba = lwpatentetes.CheckedItems[x].SubItems[tipoplazoid.Index].Text;//string key
            //        /*String sTipoPlazoId = lwpatentetes.CheckedItems[x].SubItems[33].Text;
            //        String sPlazoId = lwpatentetes.CheckedItems[x].SubItems[3].Text;
            //        String sEstatusPlazoId = lwpatentetes.CheckedItems[x].SubItems[34].Text;
            //        String sUID_Jobconfig = "";
            //        String sCasoId = lwpatentetes.CheckedItems[x].SubItems[4].Text;
            //        String sDocumentoid = lwpatentetes.CheckedItems[x].SubItems[7].Text;
            //        String sCasoNumero = lwpatentetes.CheckedItems[x].SubItems[5].Text;
            //        String sContactoEmail = lwpatentetes.CheckedItems[x].SubItems[38].Text;
            //        String sIdiomaClave = lwpatentetes.CheckedItems[x].SubItems[41].Text;
            //        String sSubject = lwpatentetes.CheckedItems[x].SubItems[42].Text;
            //        */
            //        /*
            //        String sTipoPlazoId_prueba = lwpatentetes.CheckedItems[x].SubItems[tipoplazoid.Index].Text;
            //        String sPlazoId_prueba = lwpatentetes.CheckedItems[x].SubItems[plazoid.Index].Text;
            //        String sEstatusPlazoId_prueba = lwpatentetes.CheckedItems[x].SubItems[estatusplazoid.Index].Text;
            //        String sUID_Jobconfig_prueba = "";
            //        String sCasoId_prueba = lwpatentetes.CheckedItems[x].SubItems[casoid.Index].Text;
            //        String sDocumentoid_prueba = lwpatentetes.CheckedItems[x].SubItems[documentoid.Index].Text;
            //        String sCasoNumero_prueba = lwpatentetes.CheckedItems[x].SubItems[casonumero.Index].Text;
            //        String sContactoEmail_prueba = lwpatentetes.CheckedItems[x].SubItems[Contactoemail.Index].Text;
            //        String sIdiomaClave_prueba = lwpatentetes.CheckedItems[x].SubItems[idiomaclave.Index].Text;
            //        String sSubject_prueba = lwpatentetes.CheckedItems[x].SubItems[Subject.Index].Text;
            //        */
            //        String sTipoPlazoId = lwpatentetes.CheckedItems[x].SubItems[tipoplazoid.Index].Text;
            //        String sPlazoId = lwpatentetes.CheckedItems[x].SubItems[plazoid.Index].Text;
            //        String sEstatusPlazoId = lwpatentetes.CheckedItems[x].SubItems[estatusplazoid.Index].Text;
            //        String sUID_Jobconfig = "";
            //        String sCasoId = lwpatentetes.CheckedItems[x].SubItems[casoid.Index].Text;
            //        String sDocumentoid = "";//lwpatentetes.CheckedItems[x].SubItems[documentoid.Index].Text;
            //        String sCasoNumero = lwpatentetes.CheckedItems[x].SubItems[casonumero.Index].Text;
            //        String sContactoEmail = lwpatentetes.CheckedItems[x].SubItems[Contactoemail.Index].Text;
            //        String sIdiomaClave = lwpatentetes.CheckedItems[x].SubItems[idiomaclave.Index].Text;
            //        String sSubject = lwpatentetes.CheckedItems[x].SubItems[Subject.Index].Text;

            //        int REC = Get_Rec(Convert.ToInt32(sPlazoId));
            //        //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);

            //        //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
            //        //por lo que generamos el siguiente query
            //        conect_robot con = new conect_robot();
            //        String datosconectjobconfig = con.getdatavalues();
            //        //String sQuerygetUidjobconfig = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
            //        //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
            //        String sUID_JobConfig = "1ae792f1-ceab-11e8-869b-000c291862e7";
            //        String FunctionName = "Get_Email_pagoanualidad_6_33_2";
            //        String sViewName = "warning_pagoanualidad_6_33_2";

            //        //while (resps_UIDJobconfig.Read())
            //        //{
            //        //    sUID_JobConfig = validareader("UID_JobConfig", "UID_JobConfig", resps_UIDJobconfig);
            //        //    FunctionName = validareader("FunctionName", "UID_JobConfig", resps_UIDJobconfig);
            //        //    sViewName = validareader("ViewName", "UID_JobConfig", resps_UIDJobconfig);
            //        //}

            //        //inicializamos la variables locales

            //        sGsPlazoId = sPlazoId;
            //        sGsEstatusPlazoId = sEstatusPlazoId;

            //        sGsCasoId = sCasoId;
            //        sGsDocumentoid = sDocumentoid;
            //        sGsCasoNumero = sCasoNumero;
            //        sGsContactoEmail = sContactoEmail;
            //        sGsIdiomaClave = sIdiomaClave;
            //        sGsSubject = sSubject;

            //        sGREC = REC;
            //        sGbCorreodepeuba = bCorreodepeuba;
            //        sGsUID_JobConfig = sUID_JobConfig;
            //        sGFunctionName = FunctionName;
            //        sGsViewName = sViewName;

            //        sGCorreodepruebasendmail = tbPatentesanualidades.Text;


            //        using (Waitforsendmail obj = new Waitforsendmail(enviarrenovaciondemarcasatiempo))
            //        {
            //            obj.ShowDialog();
            //        }

            //        tbPatentesanualidadesenviados.Text = sGiContadorcorreossend + "";
            //        tbpatentesanualidadescorreoactualizado.Text = sGiContadorcorreosupdates + "";

            //        /*Borramos las variables globales*/
            //        sGsCasoId = "";
            //        sGsIdiomaClave = "";
            //        sGsContactoEmail = "";
            //        sGsSubject = "";
            //        sGREC = 0;
            //        sGbCorreodepeuba = true;
            //        sGsCasoNumero = "";
            //        sGsDocumentoid = "";
            //        sGsEstatusPlazoId = "";
            //        sGsPlazoId = "";
            //        sGsUID_JobConfig = "";
            //        sGFunctionName = "";
            //        sGsViewName = "";
            //        sGCorreodepruebasendmail = "";
            //        //conect valores = new conect_robot();
            //        //String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);
            //        ////resps_UIDJobconfig.Close();
            //        //String sCorreodestino = "";
            //        //if (bCorreodepeuba)
            //        //{
            //        //    sCorreodestino = tbPatentesanualidades.Text;//Prueba de correo
            //        //}
            //        //else
            //        //{
            //        //    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
            //        //}

            //        //String[] correos = sCorreodestino.Split(',');
            //        //if (correos.Length > 1)
            //        //{
            //        //    sCorreodestino = correos[0];
            //        //    for (int z = 1; z < correos.Length; z++)
            //        //    {
            //        //        sGlobalSmtpCC += "," + correos[z];
            //        //    }
            //        //}
            //        ////iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
            //        //int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
            //        //iContadorcorreossend += iresult;
            //        ////bCorreodepeuba = false;//solo para probar IMPORTANTE QUITAR
            //        //if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
            //        //{
            //        //    int iCasoid = Int32.Parse(sCasoId);
            //        //    int isDocumentoid;
            //        //    if (sDocumentoid == "")
            //        //    {
            //        //        isDocumentoid = 0;
            //        //    }
            //        //    else
            //        //    {
            //        //        isDocumentoid = Int32.Parse(sDocumentoid);
            //        //    }

            //        //    int iDays = Int32.Parse("-10000");
            //        //    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
            //        //    int iPlazoId = Int32.Parse(sPlazoId);
            //        //    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
            //        //}
            //    }
            //    MessageBox.Show("Se enviaron " + sGiContadorcorreossend + " Correos Correctamente  y se actualizarón " + sGiContadorcorreosupdates + " Registros en la base de datos King");
            //}
            //else
            //{
            //    //no hacemos nada por que cancelo
            //}
        }

        public class Empleados
        {
            public int ID { get; set; }
            public string Nombre { set; get; }
            public double Salario { get; set; }
            /*
            this.columnHeader24,
            this.columnHeader14,
            this.columnHeader15,
            this.columnHeader1,
            this.columnHeader2,
            this.columnHeader3,
            this.columnHeader4,
            this.columnHeader5,
            this.columnHeader6,
            this.columnHeader7,
            this.columnHeader8,
            this.columnHeader9,
            this.columnHeader10,
            this.columnHeader11,
            this.columnHeader12,
            this.columnHeader13,
            this.columnHeader16,
            this.columnHeader17,
            this.columnHeader18,
            this.columnHeader25,
            this.columnHeader26,
            this.columnHeader27,
            this.columnHeader28,
            this.columnHeader29,
            this.columnHeader30,
            this.columnHeader31,
            this.columnHeader32,
            this.columnHeader33,
            this.columnHeader34,
            this.columnHeader35,
            this.columnHeader36,
            this.columnHeader37,
            this.columnHeader38,
            this.columnHeader39,
            this.columnHeader40,
            this.columnHeader41,
            this.columnHeader42,
            this.columnHeader43,
            this.columnHeader44,
            this.columnHeader45,
            this.columnHeader46,
            this.columnHeader47,
            this.columnHeader48
            */
        }


        private void button29_Click(object sender, EventArgs e)
        {
            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Plazoid";
                workSheet.Cells[3, "E"] = "Casoid";
                workSheet.Cells[3, "F"] = "Casonumero";
                workSheet.Cells[3, "G"] = "No.de Registro";
                workSheet.Cells[3, "H"] = "Marca";
                workSheet.Cells[3, "I"] = "tipoplazadescrip";
                workSheet.Cells[3, "J"] = "clienteNombre";
                workSheet.Cells[3, "K"] = "InteresadoNombre";
                workSheet.Cells[3, "L"] = "ContactoNombre";
                workSheet.Cells[3, "M"] = "ContactoEmail";
                workSheet.Cells[3, "N"] = "Subject";
                workSheet.Cells[3, "O"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "P"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "Q"] = "No.de Expediente";
                workSheet.Cells[3, "R"] = "Clase";
                workSheet.Cells[3, "S"] = "Referencia Cliente";
                workSheet.Cells[3, "T"] = "Fecha de Presentación";
                workSheet.Cells[3, "U"] = "Casofechavigencia";
                workSheet.Cells[3, "V"] = "CasoFechaInicio";
                workSheet.Cells[3, "W"] = "CasoFechaFin";
                workSheet.Cells[3, "X"] = "Pais Nombre";
                workSheet.Cells[3, "Y"] = "IdiomaClave";


                workSheet.Cells[1, "A"] = "Renovación de Marca a tiempo (Vieja Ley)";
                workSheet.Range["A1", "G1"].Merge();
                workSheet.Range["A1", "G1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "G1"].Font.Bold = true;
                workSheet.Range["A1", "G1"].Font.Size = 20;
                var row = 3;

                for (int i = 1; i < datagrid_renovacion_marcaatiempo_viejaley.Rows.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[1].Value;
                    workSheet.Cells[i + 4, "B"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[2].Value;
                    workSheet.Cells[i + 4, "C"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[3].Value;
                    workSheet.Cells[i + 4, "D"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[4].Value;
                    workSheet.Cells[i + 4, "E"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[5].Value;
                    workSheet.Cells[i + 4, "F"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[6].Value;
                    workSheet.Cells[i + 4, "G"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[7].Value;
                    workSheet.Cells[i + 4, "H"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[8].Value;
                    workSheet.Cells[i + 4, "I"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[9].Value;
                    workSheet.Cells[i + 4, "J"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[10].Value;
                    workSheet.Cells[i + 4, "K"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[11].Value;
                    workSheet.Cells[i + 4, "L"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[12].Value;
                    workSheet.Cells[i + 4, "M"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[13].Value;
                    workSheet.Cells[i + 4, "N"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[14].Value;
                    workSheet.Cells[i + 4, "O"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[15].Value;
                    workSheet.Cells[i + 4, "P"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[16].Value;
                    workSheet.Cells[i + 4, "Q"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[17].Value;
                    workSheet.Cells[i + 4, "R"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[18].Value;
                    workSheet.Cells[i + 4, "S"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[19].Value;
                    workSheet.Cells[i + 4, "T"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[20].Value;
                    workSheet.Cells[i + 4, "U"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[21].Value;
                    workSheet.Cells[i + 4, "V"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[22].Value;
                    workSheet.Cells[i + 4, "W"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[23].Value;
                    workSheet.Cells[i + 4, "X"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[30].Value;
                    workSheet.Cells[i + 4, "Y"] = datagrid_renovacion_marcaatiempo_viejaley.Rows[i].Cells[40].Value;

                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "Y" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
                workSheet.Range["A3", "Y" + (row + 4)].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                workSheet.Range["A3", "Y3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            }
            catch (Exception E)
            {
                Console.Write("Se canceló la exportación");
            }
        }

        private void button30_Click(object sender, EventArgs e)
        {
            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Casonumero";
                workSheet.Cells[3, "E"] = "Anualidad fecha limite de pago";
                workSheet.Cells[3, "F"] = "Quinquenio a pagar";
                workSheet.Cells[3, "G"] = "Titulo del correo";
                workSheet.Cells[3, "H"] = "PlazoId";
                workSheet.Cells[3, "I"] = "CasoId";
                workSheet.Cells[3, "J"] = "No. de Registro";
                workSheet.Cells[3, "K"] = "Tipoplazodescrip";
                workSheet.Cells[3, "L"] = "Cliente Nombre";
                workSheet.Cells[3, "M"] = "Interesado Nombre";
                workSheet.Cells[3, "N"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "O"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "P"] = "Invento";
                workSheet.Cells[3, "Q"] = "No. de Expediente";
                workSheet.Cells[3, "R"] = "ReferenciaNombre";
                workSheet.Cells[3, "S"] = "Casofechavigencia";
                workSheet.Cells[3, "T"] = "Pais Nombre";
                workSheet.Cells[3, "U"] = "Fecha Presentacion";
                workSheet.Cells[3, "V"] = "Estatuscaso";
                workSheet.Cells[3, "W"] = "EstatusCasoDescrip";
                workSheet.Cells[3, "X"] = "Tipoplazoid";
                workSheet.Cells[3, "Y"] = "EstatusPlazoid";
                workSheet.Cells[3, "Z"] = "EstatusPlazoDescrip";
                workSheet.Cells[3, "AA"] = "ContactoNombre";
                workSheet.Cells[3, "AB"] = "ContactoEmail";
                workSheet.Cells[3, "AC"] = "IdiomaOriginalId";
                workSheet.Cells[3, "AD"] = "Idiomaid";
                workSheet.Cells[3, "AE"] = "IdiomaClave";




                workSheet.Cells[1, "A"] = "Patentes Anualidades.";
                workSheet.Range["A1", "G1"].Merge();
                workSheet.Range["A1", "G1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "G1"].Font.Bold = true;
                workSheet.Range["A1", "G1"].Font.Size = 20;
                var row = 3;

                for (int i = 1; i < datagrid_patentes_anualidades.Rows.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = datagrid_patentes_anualidades.Rows[i].Cells[1].Value;
                    workSheet.Cells[i + 4, "B"] = datagrid_patentes_anualidades.Rows[i].Cells[2].Value;
                    workSheet.Cells[i + 4, "C"] = datagrid_patentes_anualidades.Rows[i].Cells[3].Value;
                    workSheet.Cells[i + 4, "D"] = datagrid_patentes_anualidades.Rows[i].Cells[4].Value;
                    workSheet.Cells[i + 4, "E"] = datagrid_patentes_anualidades.Rows[i].Cells[5].Value;
                    workSheet.Cells[i + 4, "F"] = datagrid_patentes_anualidades.Rows[i].Cells[6].Value;
                    workSheet.Cells[i + 4, "G"] = datagrid_patentes_anualidades.Rows[i].Cells[7].Value;
                    workSheet.Cells[i + 4, "H"] = datagrid_patentes_anualidades.Rows[i].Cells[8].Value;
                    workSheet.Cells[i + 4, "I"] = datagrid_patentes_anualidades.Rows[i].Cells[9].Value;
                    workSheet.Cells[i + 4, "J"] = datagrid_patentes_anualidades.Rows[i].Cells[10].Value;
                    workSheet.Cells[i + 4, "K"] = datagrid_patentes_anualidades.Rows[i].Cells[11].Value;
                    workSheet.Cells[i + 4, "L"] = datagrid_patentes_anualidades.Rows[i].Cells[12].Value;
                    workSheet.Cells[i + 4, "M"] = datagrid_patentes_anualidades.Rows[i].Cells[13].Value;
                    workSheet.Cells[i + 4, "N"] = datagrid_patentes_anualidades.Rows[i].Cells[14].Value;
                    workSheet.Cells[i + 4, "O"] = datagrid_patentes_anualidades.Rows[i].Cells[15].Value;
                    workSheet.Cells[i + 4, "P"] = datagrid_patentes_anualidades.Rows[i].Cells[16].Value;
                    workSheet.Cells[i + 4, "Q"] = datagrid_patentes_anualidades.Rows[i].Cells[17].Value;
                    workSheet.Cells[i + 4, "R"] = datagrid_patentes_anualidades.Rows[i].Cells[18].Value;
                    workSheet.Cells[i + 4, "S"] = datagrid_patentes_anualidades.Rows[i].Cells[19].Value;
                    workSheet.Cells[i + 4, "T"] = datagrid_patentes_anualidades.Rows[i].Cells[20].Value;
                    workSheet.Cells[i + 4, "U"] = datagrid_patentes_anualidades.Rows[i].Cells[21].Value;
                    workSheet.Cells[i + 4, "V"] = datagrid_patentes_anualidades.Rows[i].Cells[22].Value;
                    workSheet.Cells[i + 4, "W"] = datagrid_patentes_anualidades.Rows[i].Cells[23].Value;
                    workSheet.Cells[i + 4, "X"] = datagrid_patentes_anualidades.Rows[i].Cells[24].Value;
                    workSheet.Cells[i + 4, "Y"] = datagrid_patentes_anualidades.Rows[i].Cells[25].Value;
                    workSheet.Cells[i + 4, "Z"] = datagrid_patentes_anualidades.Rows[i].Cells[26].Value;
                    workSheet.Cells[i + 4, "AA"] = datagrid_patentes_anualidades.Rows[i].Cells[27].Value;
                    workSheet.Cells[i + 4, "AB"] = datagrid_patentes_anualidades.Rows[i].Cells[28].Value;
                    workSheet.Cells[i + 4, "AC"] = datagrid_patentes_anualidades.Rows[i].Cells[29].Value;
                    workSheet.Cells[i + 4, "AD"] = datagrid_patentes_anualidades.Rows[i].Cells[30].Value;
                    workSheet.Cells[i + 4, "AE"] = datagrid_patentes_anualidades.Rows[i].Cells[31].Value;






                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "AE" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
                workSheet.Range["A3", "AE" + (row + 4)].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                workSheet.Range["A3", "AE3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            }
            catch (Exception E)
            {
                Console.Write("Se canceló la exportación");
            }
            //try
            //{
            //    var excelApp = new Excel.Application();
            //    excelApp.Visible = true;
            //    //Crea un nuevo libro
            //    excelApp.Workbooks.Add();
            //    //Crear una hoja
            //    Excel._Worksheet workSheet = excelApp.ActiveSheet;
            //    //En versiones anteriores de C# se requiere una conversión explícita
            //    //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
            //    //Estableciendo los encabezados de columna
            //    workSheet.Cells[3, "A"] = "Autorizar";
            //    workSheet.Cells[3, "B"] = "Último Correo Enviado";
            //    workSheet.Cells[3, "C"] = "Correos Enviados";
            //    workSheet.Cells[3, "D"] = "Plazoid";
            //    workSheet.Cells[3, "E"] = "Casoid";
            //    workSheet.Cells[3, "F"] = "Casonumero";
            //    workSheet.Cells[3, "G"] = "CasoNúmeroConcedida";
            //    workSheet.Cells[3, "H"] = "Documentoid";
            //    workSheet.Cells[3, "I"] = "tipoplazadescrip";
            //    workSheet.Cells[3, "J"] = "clienteNombre";
            //    workSheet.Cells[3, "K"] = "InteresadoNombre";
            //    workSheet.Cells[3, "L"] = "TiposolicitudDecrip";
            //    workSheet.Cells[3, "M"] = "SubtiposolicitudDescrip";
            //    workSheet.Cells[3, "N"] = "Invento";
            //    workSheet.Cells[3, "O"] = "CasoNumeroExpediente Largo";
            //    workSheet.Cells[3, "P"] = "Casoproductosclase";
            //    workSheet.Cells[3, "Q"] = "ReferenciaNombre";
            //    workSheet.Cells[3, "R"] = "Casofechavigencia";
            //    workSheet.Cells[3, "S"] = "CasoFechaInicio";
            //    workSheet.Cells[3, "T"] = "CasoFechaFin";
            //    workSheet.Cells[3, "U"] = "DíasProximoEmail";
            //    workSheet.Cells[3, "V"] = "FechaProximoEmail";
            //    workSheet.Cells[3, "W"] = "DocumentoFechaRecepción";
            //    workSheet.Cells[3, "X"] = "DocumentoFechaRecepción 2 meses";
            //    workSheet.Cells[3, "Y"] = "DocumentoFechaRecepción 4 meses";
            //    workSheet.Cells[3, "Z"] = "Anualidades";
            //    workSheet.Cells[3, "AA"] = "Pais Nombre";
            //    workSheet.Cells[3, "AB"] = "Caso FechaRecepción";
            //    workSheet.Cells[3, "AC"] = "CasoFechafillingcliente";
            //    workSheet.Cells[3, "AD"] = "DocumentoFecha";
            //    workSheet.Cells[3, "AE"] = "DocumentoFechavencimiento";
            //    workSheet.Cells[3, "AF"] = "Estatuscaso";
            //    workSheet.Cells[3, "AG"] = "EstatusCasoDescrip";
            //    workSheet.Cells[3, "AH"] = "Tipoplazoid";
            //    workSheet.Cells[3, "AI"] = "EstatusPlazoid";
            //    workSheet.Cells[3, "AJ"] = "EstatusPlazoDescrip";
            //    workSheet.Cells[3, "AK"] = "PlazoFechaatención";
            //    workSheet.Cells[3, "AL"] = "ContactoNombre";
            //    workSheet.Cells[3, "AM"] = "ContactoEmail";
            //    workSheet.Cells[3, "AN"] = "IdiomaOriginalId";
            //    workSheet.Cells[3, "AO"] = "Idiomaid";
            //    workSheet.Cells[3, "AP"] = "IdiomaClave";
            //    workSheet.Cells[3, "AQ"] = "Subject"; 

            //    workSheet.Cells[1, "A"] = "Patentes Anualidades.";
            //    workSheet.Range["A1", "F1"].Merge();
            //    workSheet.Range["A1", "F1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            //    workSheet.Range["A1", "F1"].Font.Bold = true;
            //    workSheet.Range["A1", "F1"].Font.Size = 20;
            //    var row = 3;
            //    for (int i = 0; i < lwpatentetes.Items.Count; i++)
            //    {
            //        workSheet.Cells[i + 4, "A"] = lwpatentetes.Items[i].SubItems[0].Text;
            //        workSheet.Cells[i + 4, "B"] = lwpatentetes.Items[i].SubItems[1].Text;
            //        workSheet.Cells[i + 4, "C"] = lwpatentetes.Items[i].SubItems[2].Text;
            //        workSheet.Cells[i + 4, "D"] = lwpatentetes.Items[i].SubItems[3].Text;
            //        workSheet.Cells[i + 4, "E"] = lwpatentetes.Items[i].SubItems[4].Text;
            //        workSheet.Cells[i + 4, "F"] = lwpatentetes.Items[i].SubItems[5].Text;
            //        workSheet.Cells[i + 4, "G"] = lwpatentetes.Items[i].SubItems[6].Text;
            //        workSheet.Cells[i + 4, "H"] = lwpatentetes.Items[i].SubItems[7].Text;
            //        workSheet.Cells[i + 4, "I"] = lwpatentetes.Items[i].SubItems[8].Text;
            //        workSheet.Cells[i + 4, "J"] = lwpatentetes.Items[i].SubItems[9].Text;
            //        workSheet.Cells[i + 4, "K"] = lwpatentetes.Items[i].SubItems[10].Text;
            //        workSheet.Cells[i + 4, "L"] = lwpatentetes.Items[i].SubItems[11].Text;
            //        workSheet.Cells[i + 4, "M"] = lwpatentetes.Items[i].SubItems[12].Text;
            //        workSheet.Cells[i + 4, "N"] = lwpatentetes.Items[i].SubItems[13].Text;
            //        workSheet.Cells[i + 4, "O"] = lwpatentetes.Items[i].SubItems[14].Text;
            //        workSheet.Cells[i + 4, "P"] = lwpatentetes.Items[i].SubItems[15].Text;
            //        workSheet.Cells[i + 4, "Q"] = lwpatentetes.Items[i].SubItems[16].Text;
            //        workSheet.Cells[i + 4, "R"] = lwpatentetes.Items[i].SubItems[17].Text;
            //        workSheet.Cells[i + 4, "S"] = lwpatentetes.Items[i].SubItems[18].Text;
            //        workSheet.Cells[i + 4, "T"] = lwpatentetes.Items[i].SubItems[19].Text;
            //        workSheet.Cells[i + 4, "U"] = lwpatentetes.Items[i].SubItems[20].Text;
            //        workSheet.Cells[i + 4, "V"] = lwpatentetes.Items[i].SubItems[21].Text;
            //        workSheet.Cells[i + 4, "W"] = lwpatentetes.Items[i].SubItems[22].Text;
            //        workSheet.Cells[i + 4, "X"] = lwpatentetes.Items[i].SubItems[23].Text;
            //        workSheet.Cells[i + 4, "Y"] = lwpatentetes.Items[i].SubItems[24].Text;
            //        workSheet.Cells[i + 4, "Z"] = lwpatentetes.Items[i].SubItems[25].Text;
            //        workSheet.Cells[i + 4, "AA"] = lwpatentetes.Items[i].SubItems[26].Text;
            //        workSheet.Cells[i + 4, "AB"] = lwpatentetes.Items[i].SubItems[27].Text;
            //        workSheet.Cells[i + 4, "AC"] = lwpatentetes.Items[i].SubItems[28].Text;
            //        workSheet.Cells[i + 4, "AD"] = lwpatentetes.Items[i].SubItems[29].Text;
            //        workSheet.Cells[i + 4, "AE"] = lwpatentetes.Items[i].SubItems[30].Text;
            //        workSheet.Cells[i + 4, "AF"] = lwpatentetes.Items[i].SubItems[31].Text;
            //        workSheet.Cells[i + 4, "AG"] = lwpatentetes.Items[i].SubItems[32].Text;
            //        workSheet.Cells[i + 4, "AH"] = lwpatentetes.Items[i].SubItems[33].Text;
            //        workSheet.Cells[i + 4, "AI"] = lwpatentetes.Items[i].SubItems[34].Text;
            //        workSheet.Cells[i + 4, "AJ"] = lwpatentetes.Items[i].SubItems[35].Text;
            //        workSheet.Cells[i + 4, "AK"] = lwpatentetes.Items[i].SubItems[36].Text;
            //        workSheet.Cells[i + 4, "AL"] = lwpatentetes.Items[i].SubItems[37].Text;
            //        workSheet.Cells[i + 4, "AM"] = lwpatentetes.Items[i].SubItems[38].Text;
            //        workSheet.Cells[i + 4, "AN"] = lwpatentetes.Items[i].SubItems[39].Text;
            //        workSheet.Cells[i + 4, "AO"] = lwpatentetes.Items[i].SubItems[40].Text;
            //        workSheet.Cells[i + 4, "AP"] = lwpatentetes.Items[i].SubItems[41].Text;
            //        workSheet.Cells[i + 4, "AQ"] = lwpatentetes.Items[i].SubItems[42].Text;
            //        //workSheet.Cells[i + 4, "AP"] = lwpatentetes.Items[i].SubItems[41].Text;
            //        //workSheet.Cells[i + 4, "AQ"] = lwpatentetes.Items[i].SubItems[42].Text;
            //        row = i;
            //    }
            //    //foreach (var acct in listView1.Items)
            //    //{
            //    //    row++;
            //    //    workSheet.Cells[row, "A"] = acct.;
            //    //    workSheet.Cells[row, "B"] = acct;
            //    //    workSheet.Cells[row, "C"] = acct;
            //    //}

            //    workSheet.Columns[1].AutoFit();
            //    workSheet.Columns[2].AutoFit();
            //    workSheet.Columns[3].AutoFit();

            //    //Aplicando un autoformato a la tabla
            //    workSheet.Range["A3", "AQ" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
            //}catch(Exception E){
            //    //cancelaron la exportacion
            //}
        }

        void enviarcorreoaction(String paramuno, String dos)
        {
            System.Threading.Thread.Sleep(5000);
        }
        private void button19_Click(object sender, EventArgs e)
        {   //Aquí enviaremos los seleccionados 
            try
            {
                int iNumerodechecados = lvdocprioridad.CheckedItems.Count;
                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + iNumerodechecados + "correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;
                    Boolean bCorreodepeuba = false;
                    if (tbcorreoprioridad.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//vairbale global para no mandar copias a correos
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbcorreoprioridad.Text);
                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }
                    for (int x = 0; x < iNumerodechecados; x++)
                    {
                        //#CasoId 4
                        //#ContactoEmail 38
                        //#IdiomaClave 41
                        //#Subject 42
                        String sDays = "-10000";
                        String sTipoPlazoId = lvdocprioridad.CheckedItems[x].SubItems[34].Text;
                        String sPlazoId = lvdocprioridad.CheckedItems[x].SubItems[3].Text;
                        String sEstatusPlazoId = lvdocprioridad.CheckedItems[x].SubItems[37].Text;
                        String sUID_Jobconfig = "";
                        String sCasoId = lvdocprioridad.CheckedItems[x].SubItems[4].Text;
                        String sTiposolicitudid = "1";//pendiente
                        String sDocumentoid = lvdocprioridad.CheckedItems[x].SubItems[10].Text;
                        String sCasoNumero = lvdocprioridad.CheckedItems[x].SubItems[5].Text;
                        String sContactoEmail = lvdocprioridad.CheckedItems[x].SubItems[41].Text;
                        String sIdiomaClave = lvdocprioridad.CheckedItems[x].SubItems[44].Text;
                        String sSubject = lvdocprioridad.CheckedItems[x].SubItems[45].Text;
                        int REC = Get_Rec(Convert.ToInt32(sPlazoId));
                        //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);
                        //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                        //por lo que generamos el siguiente query
                        conect_robot con = new conect_robot();
                        String datosconectjobconfig = con.getdatavalues();
                        //String  = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
                        //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
                        String sUID_JobConfig = "e6350bae-ceaa-11e8-869b-000c291862e7";
                        String FunctionName = "Get_Email_documentosprioridad";
                        String sViewName = "warning_documentosprioridad";

                        /*Aquí tomamos el valor del los rtBodymessage_patentes para Patentes ya que si lo hacemos adelante estária fuera de contexto*/
                        sGlobalSmtpCC = rtBodymessage_patentes.Text;//para patentes

                        Action act = () =>
                        {
                            String copiacorreocliente = "";
                            conect_robot valores = new conect_robot();
                            String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);
                            //resps_UIDJobconfig.Close();
                            String sCorreodestino = "";

                            if (bCorreodepeuba)
                            {
                                sCorreodestino = tbcorreoprioridad.Text;//Prueba de correo
                            }
                            else
                            {
                                sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                            }
                            String[] correos = sCorreodestino.Split(',');
                            //if (correos.Length > 1)
                            //{
                            //    sCorreodestino = correos[0];
                            //    for (int z = 1; z < correos.Length; z++)
                            //    {
                            //        copiacorreocliente += correos[z] + ",";
                            //    }
                            //}
                            copiacorreocliente = "";
                            //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                            int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                            iContadorcorreossend += iresult;
                            //bCorreodepeuba = false;//solo para probar IMPORTANTE QUITAR
                            if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                            {
                                int iCasoid = Int32.Parse(sCasoId);
                                int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                                int isDocumentoid;
                                if (sDocumentoid == "")
                                {
                                    isDocumentoid = 0;
                                }
                                else
                                {
                                    isDocumentoid = Int32.Parse(sDocumentoid);
                                }
                                int iDays = Int32.Parse("-10000");
                                int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                int iPlazoId = Int32.Parse(sPlazoId);
                                iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                            }
                        };
                        using (Waitforsendmail obj = new Waitforsendmail(act))
                        {
                            obj.ShowDialog();
                        }
                        tbcoenviadosdocprio.Text = iContadorcorreossend + "";
                        tbCorreosActualizadosdocprioridad.Text = iContadorcorreosupdates + "";
                    }
                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates + " Registros en la base de datos King");
                }
                else
                {
                    //no hacemos nada por que cancelo
                }
            }
            catch (Exception E)
            {
                //error al enviar correos
            }

        }

        private void button20_Click(object sender, EventArgs e)
        {

            lbloadingdocprioridad.Text = "Cargando registros ...";
            tbcoenviadosdocprio.Text = "";
            tbCorreosActualizadosdocprioridad.Text = "";
            MySqlDataReader respuestastringinsert;
            int conuntpatentes = 0;
            try
            {
                //if (tbFechainiciopatentes.Text != "" && tbFechafinpatentes.Text != "")
                //{
                //String sFechainicio = tbFechainicio.Text;
                //String sFechafin = tbFechafin.Text;
                //sFechainicio = cambiaformatofecha(sFechainicio);
                //sFechafin = cambiaformatofecha(sFechafin);
                lvdocprioridad.Items.Clear();
                conect_robot con1 = new conect_robot();
                String sPlazoid = "";
                String sSend = "";
                String sSendnow = "";
                //
                List<ListViewItem> myItems = new List<ListViewItem>();
                //String sFechauno = cambiaformatofecha(tbFechainiciopatentes.Text);
                //String sFechados = cambiaformatofecha(tbFechafinpatentes.Text);
                String queryinsert = "use jobconfig;  SELECT  " +
                                    " war.PlazoId, " +
                                    " war.CasoId, " +
                                    " war.DocumentoId, " +
                                    " war.TipoPlazoDescrip, " +
                                    " war.ClienteNombre, " +
                                    " war.InteresadoNombre, " +
                                    " war.TipoSolicitudDescrip, " +
                                    " war.SubTipoSolicitudDescripcion, " +
                                    //" war.Marca, " +
                                    " war.CasoNumeroExpedienteLargo, " +
                                    " war.CasoNumero, " +
                                    //" war.CasoProductosClase, " +
                                    " war.ReferenciaNombre, " +
                                    " war.CasoFechaVigencia, " +
                                    //" war.CasoFechaIni, " +
                                    //" war.CasoFechaFin, " +
                                    //" war.DocumentoFechaRecepcion, " +
                                    //" war.DocumentoFechaRecepcion2meses, " +
                                    //" war.DocumentoFechaRecepcion4meses, " +
                                    " war.anualidades, " +
                                    " war.PaisNombre, " +
                                    " war.CasoFechaRecepcion, " +
                                    " war.CasoFechaFilingCliente, " +
                                    " war.CasoNumConcedida, " +
                                    " war.DocumentoFecha, " +
                                    " war.DocumentoFechaVencimiento, " +
                                    " war.EstatusCasoId, " +
                                    " war.EstatusCasoDescrip, " +
                                    " war.tipoplazoid, " +
                                    " war.EstatusPlazoId, " +
                                    " war.EstatusPlazoDescrip, " +
                                    " war.PlazoFechaAtencion, " +
                                    " war.ContactoNombre, " +
                                    " war.ContactoEmail, " +
                                    " war.IdiomaOriginalID, " +
                                    " war.IdiomaId, " +
                                    " war.IdiomaClave, " +
                                    " war.Subject, " +
                                    " war.SendNow, " +
                                    " war.diasdiferencia as CasoFechaIni, " +
                                    " war.diasdiferencia as CasoFechaFin, " +
                                    " war.diasdiferencia as diasdiferencia, " +
                                    " Get_Fechaultimo(war.CasoId, 'warning_documentosprioridad') AS `FechaSended`," +
                                    " Get_countenviados(war.CasoId, 'warning_documentosprioridad') AS `numenviados` " +
                                    " FROM jobconfig.warning_documentosprioridad as war";
                //"SELECT * FROM jobconfig.warning_documentosprioridad";// where CasoFechaVigencia >= '"+sFechauno+"' AND CasoFechaVigencia <= '"+sFechados+"' ;";
                //String queryinsert = "SELECT * FROM jobconfig.warning_pagoanualidad_6_33_2 limit 25;";// where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
                //String queryinsert = "SELECT * FROM jobconfig.warning_renovacionmarca_20_34_2 where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
                respuestastringinsert = con1.getdatareader(queryinsert);
                Action act = () =>
                {
                    while (respuestastringinsert.Read())
                    {
                        CheckBox obje = new CheckBox();
                        //con el casoid obtendremos el valor del xUID_JobConfig para despues traer get body y enviar el mail en el momento con la funcion doble click
                        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
                        //String queryselectreviewbycasoid = "select * from jobconfig.job_review where casoid = " + sCasoid;
                        //conect con2 = new conect_robot();
                        //MySqlDataReader respuestasselectbycasoid = con2.getdatareader(queryselectreviewbycasoid);
                        //while (respuestasselectbycasoid.Read())
                        //{
                        //    sPlazoid = validareader("ViewName", "CasoId", respuestasselectbycasoid);
                        //    sSend = validareader("Send", "CasoId", respuestasselectbycasoid);
                        //    sSendnow = validareader("SendNow", "CasoId", respuestasselectbycasoid);
                        //}
                        //respuestasselectbycasoid.Close();
                        //con2.Cerrarconexion();
                        int REC = 0;
                        String sUID_JobConfig = "653071e9-ceaa-11e8-869b-000c291862e7";
                        String FunctionName = "Get_Email_CitaPago_135_13_2";
                        String sViewName = "warning_citaapago_erf_2022";
                        /**********/
                        int dias = 0;
                        if (validareader("diasdiferencia", "CasoId", respuestastringinsert) != "")
                        {
                            dias = Convert.ToInt32(validareader("diasdiferencia", "CasoId", respuestastringinsert));
                        }
                        int diasdiferenciasemanas = dias / 7;
                        int diasdiferenciames = dias / 30;
                        String sPlazoId = validareader("PlazoId", "PlazoId", respuestastringinsert);
                        String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                        String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);

                        String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                        String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                        String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                        String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                        String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                        String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                        String sMarca = validareader("Marca", "Marca", respuestastringinsert);
                        String sFechadiferencia = "" + diasdiferenciasemanas;
                        String sFechaLimite = validareader("Meses_transcurridos", "Meses_transcurridos", respuestastringinsert);
                        String sInvento = validareader("Invento", "Invento", respuestastringinsert);
                        String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                        String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                        String sCasoProductosClase = validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                        String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                        String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);

                        String sCasoFechaConcesion = validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);


                        String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                        String sCasoFechaInidos = validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                        String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                        String sDocumentoFechaRecepcion = validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                        String sDocumentoFechaRecepcion2meses = validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                        String sDocumentoFechaRecepcion4meses = validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                        String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                        String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                        String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                        String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                        String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                        String sDocumentoFecha = validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                        String sDocumentoFechaVencimiento = validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                        String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                        String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                        String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                        String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                        String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                        String sPlazoFechaAtencion = validareader("PlazoFechaAtencion13", "PlazoFechaAtencion13", respuestastringinsert);
                        String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                        String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                        String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                        String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                        String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                        String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                        String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                        String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                        String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);

                        DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                        DateTime dFechaLimite = validafechavacia(sFechaLimite);
                        DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                        DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                        DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                        DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                        DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                        DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                        DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                        DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);
                        DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                        DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                        DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                        DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                        DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                        DateTime dFechaSended = validafechavacia(sFechaSended);

                        objMP_seleccionada cita_pago = new objMP_seleccionada(sPlazoId,
                                                                                sCasoId,
                                                                                sDocumentoId,
                                                                                sTipoPlazoDescrip,
                                                                                sClienteNombre,
                                                                                sInteresadoNombre,
                                                                                sTipoSolicitudDescrip,
                                                                                sSubTipoSolicitudDescripcion,
                                                                                sMarca,
                                                                                sInvento,
                                                                                sFechadiferencia,
                                                                                dFechaLimite,
                                                                                sCasoNumeroExpedienteLargo,
                                                                                sCasoNumero,
                                                                                sCasoProductosClase,
                                                                                sReferenciaNombre,
                                                                                dCasoFechaConcesion,
                                                                                dCasoFechaVigencia,
                                                                                dCasoFechaIni,
                                                                                dCasoFechaInidos,
                                                                                dCasoFechaFin,
                                                                                dDocumentoFechaRecepcion,
                                                                                dDocumentoFechaRecepcion2meses,
                                                                                dDocumentoFechaRecepcion4meses,
                                                                                sanualidades,
                                                                                sPaisNombre,
                                                                                dCasoFechaRecepcion,
                                                                                dCasoFechaFilingCliente,
                                                                                sCasoNumConcedida,
                                                                                dDocumentoFecha,
                                                                                dDocumentoFechaVencimiento,
                                                                                sEstatusCasoId,
                                                                                sEstatusCasoDescrip,
                                                                                stipoplazoid,
                                                                                sEstatusPlazoId,
                                                                                sEstatusPlazoDescrip,
                                                                                dPlazoFechaAtencion,
                                                                                sContactoNombre,
                                                                                sContactoEmail,
                                                                                sIdiomaOriginalID,
                                                                                sIdiomaId,
                                                                                sIdiomaClave,
                                                                                sSubject,
                                                                                sSendNow,
                                                                                dFechaSended,
                                                                                snumenviados,
                                                                                REC,
                                                                                tbCorreodepruebas.Text,
                                                                                sUID_JobConfig,
                                                                                FunctionName,
                                                                                sViewName,
                                                                                sTipoSolicitudId
                                                                                );
                        citapago.Add(cita_pago);
                        /**********/
                        ListViewItem listaagregar = new ListViewItem("", 0);

                        //Para warning_documentosprioridad
                        //int diasdiferenciasemanas = Convert.ToInt32(validareader("diasdiferencia", "CasoId", respuestastringinsert)) / 7;
                        //int diasdiferenciames = Convert.ToInt32(validareader("diasdiferencia", "CasoId", respuestastringinsert)) / 30;
                        listaagregar.SubItems.Add(validareader("FechaSended", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("numenviados", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("PlazoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoNumero", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoNumConcedida", "CasoId", respuestastringinsert));

                        listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(diasdiferenciasemanas + "");
                        listaagregar.SubItems.Add(diasdiferenciames + "");
                        //agregamos semenas y meses con una diferencia
                        listaagregar.SubItems.Add(validareader("DocumentoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("TipoPlazoDescrip", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("ClienteNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("InteresadoNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));

                        listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("ReferenciaNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaVigencia", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaIni", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaFin", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));

                        listaagregar.SubItems.Add("");
                        listaagregar.SubItems.Add("");
                        listaagregar.SubItems.Add(validareader("anualidades", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("PaisNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaFilingCliente", "CasoId", respuestastringinsert));

                        listaagregar.SubItems.Add(validareader("DocumentoFecha", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("DocumentoFechaVencimiento", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("EstatusCasoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("tipoplazoid", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("EstatusPlazoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("EstatusPlazoDescrip", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("PlazoFechaAtencion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("ContactoNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("ContactoEmail", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("IdiomaOriginalID", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("IdiomaId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("IdiomaClave", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("Subject", "CasoId", respuestastringinsert));
                        /*listaagregar.SubItems.Add(validareader("SendNow", "CasoId", respuestastringinsert));*/
                        myItems.Add(listaagregar);
                        //lwpatentetes.Items.Add(listaagregar);
                        //lwpatentetes.FullRowSelect = true;
                        conuntpatentes++;
                    }

                };
                using (Waitforcases form = new Waitforcases(act))
                {
                    form.ShowDialog();
                }
                foreach (var Obj_cita_pago in citapago)
                {
                    // lvdocprioridad.Items.Add(myItems[x]);
                    CheckBox checkboxcell = new CheckBox();
                    dGVPrioridad.Rows.Add(Obj_cita_pago.sCasoId, false,
                    /*2*/        Obj_cita_pago.sFechaSended,
                    /*3*/        Obj_cita_pago.snumenviados,
                    /*4*/        Obj_cita_pago.sPlazoId,
                    /*5*/        Obj_cita_pago.sCasoId,
                    /*6*/        Obj_cita_pago.sCasoNumero,
                    /*7*/        Obj_cita_pago.sFechadiferencia,
                    /*8*/        Obj_cita_pago.sFechaLimite,
                    /*9*/        Obj_cita_pago.sInteresadoNombre,
                    /*10*/       Obj_cita_pago.sSubTipoSolicitudDescripcion,
                    /*11*/       Obj_cita_pago.sInvento,
                    /*12*/       Obj_cita_pago.sCasoNumeroExpedienteLargo,
                    /*13*/       Obj_cita_pago.sCasoFechaVigencia,
                    /*14*/       Obj_cita_pago.sClienteNombre,
                    /*15*/       Obj_cita_pago.sCasoFechaIni,
                    /*16*/       Obj_cita_pago.sTipoPlazoDescrip,
                    /*17*/       Obj_cita_pago.sCasoFechaFin,
                    /*18*/       "",
                    /*19*/       Obj_cita_pago.sDocumentoFechaRecepcion,
                    /*20*/       Obj_cita_pago.sDocumentoFechaRecepcion2meses,
                    /*21*/       Obj_cita_pago.sDocumentoFechaRecepcion4meses,
                    /*22*/       Obj_cita_pago.sanualidades,
                    /*23*/       Obj_cita_pago.sTipoSolicitudDescrip,
                    /*24*/       Obj_cita_pago.sPaisNombre,
                    /*25*/       Obj_cita_pago.sCasoFechaRecepcion,
                    /*26*/       Obj_cita_pago.sCasoFechaFilingCliente,
                    /*27*/       Obj_cita_pago.sDocumentoFecha,
                    /*28*/       Obj_cita_pago.sReferenciaNombre,
                    /*29*/       Obj_cita_pago.sCasoProductosClase,
                    /*30*/       Obj_cita_pago.sEstatusCasoId,
                    /*31*/       Obj_cita_pago.sEstatusCasoDescrip,
                    /*32*/       "",
                    /*33*/       Obj_cita_pago.stipoplazoid,
                    /*34*/       Obj_cita_pago.sDocumentoFechaVencimiento,
                    /*35*/       Obj_cita_pago.sDocumentoId,
                    /*36*/       Obj_cita_pago.sEstatusPlazoId,
                    /*37*/       Obj_cita_pago.sEstatusPlazoDescrip,
                    /*38*/       Obj_cita_pago.sPlazoFechaAtencion,
                    /*39*/       Obj_cita_pago.sContactoNombre,
                    /*40*/       Obj_cita_pago.sContactoEmail,
                    /*41*/       Obj_cita_pago.sIdiomaOriginalID,
                    /*42*/       Obj_cita_pago.sIdiomaId,
                    /*43*/       Obj_cita_pago.sIdiomaClave,
                    /*44*/       Obj_cita_pago.sSubject,
                    /*45*/       Obj_cita_pago.sTipoSolicitudId);
                }
                lbloadingdocprioridad.Text = "";
                tbDocumentosprioridad.Text = conuntpatentes + "";
                respuestastringinsert.Close();
                con1.Cerrarconexion();
                //}
                //else {
                //    MessageBox.Show("Debe ingresar fechas para poder consultar");
                //}
            }
            catch (Exception E)
            {
                lbloadingdocprioridad.Text = "";
                tbDocumentosprioridad.Text = conuntpatentes + "";
                //respuestastringinsert.Close();
            }

        }

        private void button31_Click(object sender, EventArgs e)
        {
            var excelApp = new Excel.Application();
            excelApp.Visible = true;
            //Crea un nuevo libro
            excelApp.Workbooks.Add();
            //Crear una hoja
            Excel._Worksheet workSheet = excelApp.ActiveSheet;
            //En versiones anteriores de C# se requiere una conversión explícita
            //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
            //Estableciendo los encabezados de columna
            workSheet.Cells[3, "A"] = "Autorizar";
            workSheet.Cells[3, "B"] = "Último Correo Enviado";
            workSheet.Cells[3, "C"] = "Correos ENviados";
            workSheet.Cells[3, "D"] = "Plazoid";
            workSheet.Cells[3, "E"] = "Casoid";
            workSheet.Cells[3, "F"] = "Casonumero";
            workSheet.Cells[3, "G"] = "CasoNúmeroConcedida";
            workSheet.Cells[3, "H"] = "CasoFechaPresentacion";
            workSheet.Cells[3, "I"] = "Semanas de presentacióm";
            workSheet.Cells[3, "J"] = "Meses de presentación";
            workSheet.Cells[3, "K"] = "Documentoid";
            workSheet.Cells[3, "L"] = "tipoplazadescrip";
            workSheet.Cells[3, "M"] = "clienteNombre";
            workSheet.Cells[3, "N"] = "InteresadoNombre";
            workSheet.Cells[3, "O"] = "TiposolicitudDecrip";
            workSheet.Cells[3, "P"] = "SubtiposolicitudDescrip";
            workSheet.Cells[3, "Q"] = "Invento";
            workSheet.Cells[3, "R"] = "CasoNumeroExpediente Largo";
            workSheet.Cells[3, "S"] = "Casoproductosclase";
            workSheet.Cells[3, "T"] = "ReferenciaNombre";
            workSheet.Cells[3, "U"] = "Casofechavigencia";
            workSheet.Cells[3, "V"] = "CasoFechaInicio";
            workSheet.Cells[3, "W"] = "CasoFechaFin";
            workSheet.Cells[3, "X"] = "DíasProximoEmail";
            workSheet.Cells[3, "Y"] = "FechaProximoEmail";
            workSheet.Cells[3, "Z"] = "DocumentoFechaRecepción";
            workSheet.Cells[3, "AA"] = "DocumentoFechaRecepción 2 meses";
            workSheet.Cells[3, "AB"] = "DocumentoFechaRecepción 4 meses";
            workSheet.Cells[3, "AC"] = "Anualidades";
            workSheet.Cells[3, "AD"] = "Pais Nombre";
            workSheet.Cells[3, "AE"] = "Caso FechaRecepción";
            workSheet.Cells[3, "AF"] = "CasoFechafillingcliente";
            workSheet.Cells[3, "AG"] = "DocumentoFecha";
            workSheet.Cells[3, "AH"] = "DocumentoFechavencimiento";
            workSheet.Cells[3, "AI"] = "Estatuscaso";
            workSheet.Cells[3, "AJ"] = "EstatusCasoDescrip";
            workSheet.Cells[3, "AK"] = "Tipoplazoid";
            workSheet.Cells[3, "AL"] = "EstatusPlazoid";
            workSheet.Cells[3, "AM"] = "EstatusPlazoDescrip";
            workSheet.Cells[3, "AN"] = "PlazoFechaatención";
            workSheet.Cells[3, "AO"] = "ContactoNombre";
            workSheet.Cells[3, "AP"] = "ContactoEmail";
            workSheet.Cells[3, "AQ"] = "IdiomaOriginalId";
            workSheet.Cells[3, "AR"] = "Idiomaid";
            workSheet.Cells[3, "AS"] = "IdiomaClave";
            workSheet.Cells[3, "AT"] = "Subject";



            workSheet.Cells[1, "A"] = "Documentos prioridad.";
            workSheet.Range["A1", "F1"].Merge();
            workSheet.Range["A1", "F1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            workSheet.Range["A1", "F1"].Font.Bold = true;
            workSheet.Range["A1", "F1"].Font.Size = 20;
            var row = 3;

            for (int i = 0; i < lvdocprioridad.Items.Count; i++)
            {
                workSheet.Cells[i + 4, "A"] = lvdocprioridad.Items[i].SubItems[0].Text;
                workSheet.Cells[i + 4, "B"] = lvdocprioridad.Items[i].SubItems[1].Text;
                workSheet.Cells[i + 4, "C"] = lvdocprioridad.Items[i].SubItems[2].Text;
                workSheet.Cells[i + 4, "D"] = lvdocprioridad.Items[i].SubItems[3].Text;
                workSheet.Cells[i + 4, "E"] = lvdocprioridad.Items[i].SubItems[4].Text;
                workSheet.Cells[i + 4, "F"] = lvdocprioridad.Items[i].SubItems[5].Text;
                workSheet.Cells[i + 4, "G"] = lvdocprioridad.Items[i].SubItems[6].Text;
                workSheet.Cells[i + 4, "H"] = lvdocprioridad.Items[i].SubItems[7].Text;
                workSheet.Cells[i + 4, "I"] = lvdocprioridad.Items[i].SubItems[8].Text;
                workSheet.Cells[i + 4, "J"] = lvdocprioridad.Items[i].SubItems[9].Text;
                workSheet.Cells[i + 4, "K"] = lvdocprioridad.Items[i].SubItems[10].Text;
                workSheet.Cells[i + 4, "L"] = lvdocprioridad.Items[i].SubItems[11].Text;
                workSheet.Cells[i + 4, "M"] = lvdocprioridad.Items[i].SubItems[12].Text;
                workSheet.Cells[i + 4, "N"] = lvdocprioridad.Items[i].SubItems[13].Text;
                workSheet.Cells[i + 4, "O"] = lvdocprioridad.Items[i].SubItems[14].Text;
                workSheet.Cells[i + 4, "P"] = lvdocprioridad.Items[i].SubItems[15].Text;
                workSheet.Cells[i + 4, "Q"] = lvdocprioridad.Items[i].SubItems[16].Text;
                workSheet.Cells[i + 4, "R"] = lvdocprioridad.Items[i].SubItems[17].Text;
                workSheet.Cells[i + 4, "S"] = lvdocprioridad.Items[i].SubItems[18].Text;
                workSheet.Cells[i + 4, "T"] = lvdocprioridad.Items[i].SubItems[19].Text;
                workSheet.Cells[i + 4, "U"] = lvdocprioridad.Items[i].SubItems[20].Text;
                workSheet.Cells[i + 4, "V"] = lvdocprioridad.Items[i].SubItems[21].Text;
                workSheet.Cells[i + 4, "W"] = lvdocprioridad.Items[i].SubItems[22].Text;
                workSheet.Cells[i + 4, "X"] = lvdocprioridad.Items[i].SubItems[23].Text;
                workSheet.Cells[i + 4, "Y"] = lvdocprioridad.Items[i].SubItems[24].Text;
                workSheet.Cells[i + 4, "Z"] = lvdocprioridad.Items[i].SubItems[25].Text;
                workSheet.Cells[i + 4, "AA"] = lvdocprioridad.Items[i].SubItems[26].Text;
                workSheet.Cells[i + 4, "AB"] = lvdocprioridad.Items[i].SubItems[27].Text;
                workSheet.Cells[i + 4, "AC"] = lvdocprioridad.Items[i].SubItems[28].Text;
                workSheet.Cells[i + 4, "AD"] = lvdocprioridad.Items[i].SubItems[29].Text;
                workSheet.Cells[i + 4, "AE"] = lvdocprioridad.Items[i].SubItems[30].Text;
                workSheet.Cells[i + 4, "AF"] = lvdocprioridad.Items[i].SubItems[31].Text;
                workSheet.Cells[i + 4, "AG"] = lvdocprioridad.Items[i].SubItems[32].Text;
                workSheet.Cells[i + 4, "AH"] = lvdocprioridad.Items[i].SubItems[33].Text;
                workSheet.Cells[i + 4, "AI"] = lvdocprioridad.Items[i].SubItems[34].Text;
                workSheet.Cells[i + 4, "AJ"] = lvdocprioridad.Items[i].SubItems[35].Text;
                workSheet.Cells[i + 4, "AK"] = lvdocprioridad.Items[i].SubItems[36].Text;
                workSheet.Cells[i + 4, "AL"] = lvdocprioridad.Items[i].SubItems[37].Text;
                workSheet.Cells[i + 4, "AM"] = lvdocprioridad.Items[i].SubItems[38].Text;
                workSheet.Cells[i + 4, "AN"] = lvdocprioridad.Items[i].SubItems[39].Text;
                workSheet.Cells[i + 4, "AO"] = lvdocprioridad.Items[i].SubItems[40].Text;
                workSheet.Cells[i + 4, "AP"] = lvdocprioridad.Items[i].SubItems[41].Text;
                workSheet.Cells[i + 4, "AQ"] = lvdocprioridad.Items[i].SubItems[42].Text;
                workSheet.Cells[i + 4, "AR"] = lvdocprioridad.Items[i].SubItems[43].Text;
                workSheet.Cells[i + 4, "AS"] = lvdocprioridad.Items[i].SubItems[44].Text;
                workSheet.Cells[i + 4, "AT"] = lvdocprioridad.Items[i].SubItems[45].Text;
                row = i;
            }
            //foreach (var acct in listView1.Items)
            //{
            //    row++;
            //    workSheet.Cells[row, "A"] = acct.;
            //    workSheet.Cells[row, "B"] = acct;
            //    workSheet.Cells[row, "C"] = acct;
            //}

            workSheet.Columns[1].AutoFit();
            workSheet.Columns[2].AutoFit();
            workSheet.Columns[3].AutoFit();

            //Aplicando un autoformato a la tabla
            workSheet.Range["A3", "AR" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
        }

        private void button36_Click(object sender, EventArgs e)
        {
            lLoadingmtardias.Text = "Cargando registros ...";
            System.Threading.Thread.Sleep(1000);
            lvRenovaciontardia.Items.Clear();
            conect_robot con1 = new conect_robot();
            String sPlazoid = "";
            String sSend = "";
            String sSendnow = "";
            if (true)
            {
                tbCountresultadotardias.Text = "";
                List<ListViewItem> myItems = new List<ListViewItem>();
                int contador = 0;
                String queryinsert = "use jobconfig; SELECT  " +
                                    " war.PlazoId, " +
                                    " war.CasoId, " +
                                    " war.DocumentoId, " +
                                    " war.TipoPlazoDescrip, " +
                                    " war.ClienteNombre, " +
                                    " war.InteresadoNombre, " +
                                    " war.TipoSolicitudDescrip, " +
                                    " war.SubTipoSolicitudDescripcion, " +
                                    " war.Marca, " +
                                    " war.CasoNumeroExpedienteLargo, " +
                                    " war.CasoNumero, " +
                                    " war.CasoProductosClase, " +
                                    " war.ReferenciaNombre, " +
                                    " DATE_FORMAT(war.CasoFechaVigencia,'%d-%m-%Y') as CasoFechaVigencia, " +
                                    " DATE_FORMAT(war.CasoFechaIni,'%d-%m-%Y') as CasoFechaIni, " +
                                    " DATE_FORMAT(war.CasoFechaFin,'%d-%m-%Y') as CasoFechaFin, " +
                                    " DATE_FORMAT(war.DocumentoFechaRecepcion,'%d-%m-%Y') as DocumentoFechaRecepcion, " +
                                    " war.DocumentoFechaRecepcion2meses, " +
                                    " war.DocumentoFechaRecepcion4meses, " +
                                    " war.anualidades, " +
                                    " war.PaisNombre, " +
                                    " DATE_FORMAT(war.CasoFechaRecepcion,'%d-%m-%Y') as CasoFechaRecepcion, " +
                                    " war.CasoFechaFilingCliente, " +
                                    " war.CasoNumConcedida, " +
                                    " war.DocumentoFecha, " +
                                    " war.DocumentoFechaVencimiento, " +
                                    " war.EstatusCasoId, " +
                                    " war.EstatusCasoDescrip, " +
                                    " war.tipoplazoid, " +
                                    " war.EstatusPlazoId, " +
                                    " war.EstatusPlazoDescrip, " +
                                    " war.PlazoFechaAtencion, " +
                                    " war.ContactoNombre, " +
                                    " war.ContactoEmail, " +
                                    " war.IdiomaOriginalID, " +
                                    " war.IdiomaId, " +
                                    " war.IdiomaClave, " +
                                    " war.Subject, " +
                                    " war.SendNow, " +
                                    " DATE_FORMAT(Get_Fechaultimo(war.CasoId, 'warning_renovacionmarca_20_34_2'),'%d-%m-%Y') AS `FechaSended`," +
                                    " Get_countenviados(war.CasoId, 'warning_renovacionmarca_20_34_2') AS `numenviados` " +
                                    "FROM " +
                                    "    jobconfig.warning_renovacionmarca_20_34_2 as war " +
                                    "WHERE " +
                                    " CURDATE() BETWEEN CasoFechaVigencia AND (CasoFechaVigencia + INTERVAL 6 MONTH) " +
                                    " group by CasoId " +
                                    " ORDER BY CasoFechaVigencia DESC; ";
                if (renovacionmarcatardiaviejaley != null)
                {
                    renovacionmarcatardiaviejaley.Clear();
                }

                datagrid_renovacion_marcatardia_viejaley.Rows.Clear();
                Action act = () =>
                {
                    MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);

                    while (respuestastringinsert.Read())
                    {
                        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);

                        try
                        {
                            String sPlazoId = validareader("PlazoId", "PlazoId", respuestastringinsert);
                            String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                            String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);
                            String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                            String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                            String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                            String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                            String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                            String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                            String sMarca = validareader("Marca", "Marca", respuestastringinsert);
                            String sInvento = "";
                            String sFechadiferencia = "";
                            String sFechaLimite = "";
                            String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                            String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                            String sCasoProductosClase = validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                            String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                            String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);

                            String sCasoFechaConcesion = validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);

                            String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                            String sCasoFechaInidos = validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                            String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                            String sDocumentoFechaRecepcion = validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                            String sDocumentoFechaRecepcion2meses = validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                            String sDocumentoFechaRecepcion4meses = validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                            String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                            String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                            String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                            String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                            String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                            String sDocumentoFecha = validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                            String sDocumentoFechaVencimiento = validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                            String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                            String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                            String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                            String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                            String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                            String sPlazoFechaAtencion = validareader("PlazoFechaAtencion", "PlazoFechaAtencion", respuestastringinsert);
                            String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                            String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                            String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                            String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                            String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                            String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                            String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                            String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                            String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);

                            int REC = 0;
                            String sUID_JobConfig = "a8b24705-ceab-11e8-869b-000c291862e7";
                            String FunctionName = "Get_Email_RenovacionMarca_20_34_2";
                            String sViewName = "warning_renovacionmarca_20_34_2";

                            DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                            DateTime dFechaLimite = validafechavacia(sFechaLimite);
                            DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                            DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                            DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                            DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                            DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                            DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                            DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                            DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);
                            DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                            DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                            DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                            DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                            DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                            DateTime dFechaSended = validafechavacia(sFechaSended);


                            objMP_seleccionada renovacion_marcatardia_viejaley = new objMP_seleccionada(sPlazoId,
                                                                                                         sCasoId,
                                                                                                            sDocumentoId,
                                                                                                            sTipoPlazoDescrip,
                                                                                                            sClienteNombre,
                                                                                                            sInteresadoNombre,
                                                                                                            sTipoSolicitudDescrip,
                                                                                                            sSubTipoSolicitudDescripcion,
                                                                                                            sMarca,
                                                                                                            sInvento,
                                                                                                            sFechadiferencia,
                                                                                                            dFechaLimite,
                                                                                                            sCasoNumeroExpedienteLargo,
                                                                                                            sCasoNumero,
                                                                                                            sCasoProductosClase,
                                                                                                            sReferenciaNombre,
                                                                                                            dCasoFechaConcesion,
                                                                                                            dCasoFechaVigencia,
                                                                                                            dCasoFechaIni,
                                                                                                            dCasoFechaInidos,
                                                                                                            dCasoFechaFin,
                                                                                                            dDocumentoFechaRecepcion,
                                                                                                            dDocumentoFechaRecepcion2meses,
                                                                                                            dDocumentoFechaRecepcion4meses,
                                                                                                            sanualidades,
                                                                                                            sPaisNombre,
                                                                                                            dCasoFechaRecepcion,
                                                                                                            dCasoFechaFilingCliente,
                                                                                                            sCasoNumConcedida,
                                                                                                            dDocumentoFecha,
                                                                                                            dDocumentoFechaVencimiento,
                                                                                                            sEstatusCasoId,
                                                                                                            sEstatusCasoDescrip,
                                                                                                            stipoplazoid,
                                                                                                            sEstatusPlazoId,
                                                                                                            sEstatusPlazoDescrip,
                                                                                                            dPlazoFechaAtencion,
                                                                                                            sContactoNombre,
                                                                                                            sContactoEmail,
                                                                                                            sIdiomaOriginalID,
                                                                                                            sIdiomaId,
                                                                                                            sIdiomaClave,
                                                                                                            sSubject,
                                                                                                            sSendNow,
                                                                                                            dFechaSended,
                                                                                                            snumenviados,
                                                                                                            REC,
                                                                                                            tbCorreodepruebas.Text,
                                                                                                            sUID_JobConfig,
                                                                                                            FunctionName,
                                                                                                            sViewName,
                                                                                                            sTipoSolicitudId
                                                                                                            );
                            renovacionmarcatardiaviejaley.Add(renovacion_marcatardia_viejaley);

                        }
                        catch (Exception Ex)
                        {

                        }
                        contador++;
                    }
                    respuestastringinsert.Close();
                    con1.Cerrarconexion();
                };
                using (Waitforcases form = new Waitforcases(act))
                {
                    form.ShowDialog();
                }
                foreach (var Obj_renovacion_marcatardia_viejaley in renovacionmarcatardiaviejaley)
                {
                    /*1*/
                    CheckBox checkboxcell = new CheckBox();

                    datagrid_renovacion_marcatardia_viejaley.Rows.Add(Obj_renovacion_marcatardia_viejaley.sCasoId, false,
       /*2*/        Obj_renovacion_marcatardia_viejaley.sFechaSended,
       /*3*/        Obj_renovacion_marcatardia_viejaley.snumenviados,
       /*4*/        Obj_renovacion_marcatardia_viejaley.sPlazoId,
       /*5*/        Obj_renovacion_marcatardia_viejaley.sCasoId,
       /*6*/        Obj_renovacion_marcatardia_viejaley.sCasoNumero,
       /*7*/        Obj_renovacion_marcatardia_viejaley.sCasoNumConcedida,//numero de registro
       /*8*/        Obj_renovacion_marcatardia_viejaley.sMarca,
       /*9*/        Obj_renovacion_marcatardia_viejaley.sTipoPlazoDescrip,
       /*10*/       Obj_renovacion_marcatardia_viejaley.sClienteNombre,
       /*11*/       Obj_renovacion_marcatardia_viejaley.sInteresadoNombre,
       /*12*/       Obj_renovacion_marcatardia_viejaley.sContactoNombre,
       /*13*/       Obj_renovacion_marcatardia_viejaley.sContactoEmail, //solicitante 
       /*14*/       Obj_renovacion_marcatardia_viejaley.sSubject,
       /*15*/       Obj_renovacion_marcatardia_viejaley.sTipoSolicitudDescrip,
       /*16*/       Obj_renovacion_marcatardia_viejaley.sSubTipoSolicitudDescripcion,
       /*17*/       Obj_renovacion_marcatardia_viejaley.sCasoNumeroExpedienteLargo,//No.expediente
       /*18*/       Obj_renovacion_marcatardia_viejaley.sCasoProductosClase,//Clase
       /*19*/       Obj_renovacion_marcatardia_viejaley.sReferenciaNombre,//referencia cliente 
       /*20*/       Obj_renovacion_marcatardia_viejaley.sCasoFechaRecepcion, //fecha presentacion
       /*21*/       Obj_renovacion_marcatardia_viejaley.sCasoFechaVigencia, //fecha vigencia
       /*22*/       Obj_renovacion_marcatardia_viejaley.sCasoFechaIni, //caso fecha inicio
       /*23*/       Obj_renovacion_marcatardia_viejaley.sCasoFechaFin, //caso fecha fin 
       /*24*/       "",
       /*25*/       "",
       /*26*/       Obj_renovacion_marcatardia_viejaley.sDocumentoFechaRecepcion,
       /*27*/       Obj_renovacion_marcatardia_viejaley.sDocumentoFechaRecepcion2meses,
       /*28*/       Obj_renovacion_marcatardia_viejaley.sDocumentoFechaRecepcion4meses,
       /*29*/       Obj_renovacion_marcatardia_viejaley.sanualidades,
       /*30*/       Obj_renovacion_marcatardia_viejaley.sPaisNombre,
       /*31*/       Obj_renovacion_marcatardia_viejaley.sCasoFechaFilingCliente,
       /*32*/       Obj_renovacion_marcatardia_viejaley.sDocumentoFecha,
       /*33*/       Obj_renovacion_marcatardia_viejaley.sDocumentoFechaVencimiento,
       /*34*/       Obj_renovacion_marcatardia_viejaley.sEstatusCasoId,
       /*35*/       Obj_renovacion_marcatardia_viejaley.stipoplazoid,
       /*36*/       Obj_renovacion_marcatardia_viejaley.sEstatusPlazoId,
       /*37*/       Obj_renovacion_marcatardia_viejaley.sPlazoFechaAtencion,
       /*38*/       Obj_renovacion_marcatardia_viejaley.sIdiomaOriginalID,
       /*39*/       Obj_renovacion_marcatardia_viejaley.sIdiomaId,
       /*40*/       Obj_renovacion_marcatardia_viejaley.sIdiomaClave,
       /*41*/       Obj_renovacion_marcatardia_viejaley.sEstatusCasoDescrip,
       /*42*/       Obj_renovacion_marcatardia_viejaley.sEstatusPlazoDescrip);
                }
                AdjustColumnOrder_RMTardiaVL();
                tbCountresultadotardias.Text = contador + "";
                lLoadingmtardias.Text = "";
            }
            else
            {
                lLoadingmtardias.Text = "";
            }



            //tbMtardiasactualizados.Text = "0";
            //tbcorreoxenviadosmtardias.Text = "0";
            //sGqueryinsertconsulta =  
            ////using (Waitforcases form = new Waitforcases(Cargaregistros))
            ////{
            ////    form.ShowDialog();
            ////}
            //for (int x = 0; x < myItemsG.Count; x++)
            //{
            //    lvRenovaciontardia.Items.Add(myItemsG[x]);
            //    lvRenovaciontardia.FullRowSelect = true;
            //}
            //tbCountresultadotardias.Text = contadorG + "";
            //lLoadingmtardias.Text = "";

            //lLoadingmtardias.Text = "Cargando registros ...";
            ////System.Threading.Thread.Sleep(1000);
            ////String sFechainicio = tbFechainicio.Text;
            ////String sFechafin = tbFechafin.Text;
            ////sFechainicio = cambiaformatofecha(sFechainicio);
            ////sFechafin = cambiaformatofecha(sFechafin);
            ////String anorenovacioatiempo = cbAnorenovacionatiempo.Text;
            //lvRenovaciontardia.Items.Clear();
            //tbCountresultadotardias.Text = "";
            //conect con1 = new conect_robot();
            //String sPlazoid = "";
            //String sSend = "";
            //String sSendnow = "";
            //if (true)//no validamos la fecha a seleccionar
            //{
            //    //String queryinsert = "SELECT * FROM jobconfig.warning_pagoanualidad_6_33_2 limit 10;";// where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
            //    String queryinsert = " SELECT  " +
            //                          "     * " +
            //                          " FROM " +
            //                          "     jobconfig.warning_renovacionmarca_20_34_2 " +
            //                          " WHERE " +
            //                          "     CURDATE() BETWEEN CasoFechaVigencia AND (CasoFechaVigencia + INTERVAL 6 MONTH) " +
            //                          " ORDER BY CasoFechaVigencia Desc;";//where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
            //    MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);
            //    List<ListViewItem> myItems = new List<ListViewItem>();
            //    int contador = 0;
            //    while (respuestastringinsert.Read())
            //    {
            //        //con el casoid obtendremos el valor del xUID_JobConfig para despues traer get body y enviar el mail en el momento con la funcion doble click
            //        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
            //        //String queryselectreviewbycasoid = "select * from jobconfig.job_review where casoid = " + sCasoid;
            //        //conect con2 = new conect_robot();
            //        //MySqlDataReader respuestasselectbycasoid = con2.getdatareader(queryselectreviewbycasoid);
            //        //while (respuestasselectbycasoid.Read())
            //        //{
            //        //    sPlazoid = validareader("ViewName", "CasoId", respuestasselectbycasoid);
            //        //    sSend = validareader("Send", "CasoId", respuestasselectbycasoid);
            //        //    sSendnow = validareader("SendNow", "CasoId", respuestasselectbycasoid);
            //        //}
            //        //respuestasselectbycasoid.Close();
            //        //con2.Cerrarconexion();
            //        ListViewItem listaagregar = new ListViewItem("", 0);
            //        listaagregar.SubItems.Add(validareader("PlazoId", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));

            //        listaagregar.SubItems.Add(validareader("CasoNumero", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoNumConcedida", "CasoId", respuestastringinsert));

            //        listaagregar.SubItems.Add(validareader("DocumentoId", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("TipoPlazoDescrip", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("ClienteNombre", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("InteresadoNombre", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("Marca", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));

            //        listaagregar.SubItems.Add(validareader("CasoProductosClase", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("ReferenciaNombre", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoFechaVigencia", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoFechaIni", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoFechaFin", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion2meses", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion4meses", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add("");
            //        listaagregar.SubItems.Add("");
            //        listaagregar.SubItems.Add(validareader("anualidades", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("PaisNombre", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoFechaFilingCliente", "CasoId", respuestastringinsert));

            //        listaagregar.SubItems.Add(validareader("DocumentoFecha", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("DocumentoFechaVencimiento", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("EstatusCasoId", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("tipoplazoid", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("EstatusPlazoId", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("EstatusPlazoDescrip", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("PlazoFechaAtencion", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("ContactoNombre", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("ContactoEmail", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("IdiomaOriginalID", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("IdiomaId", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("IdiomaClave", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("Subject", "CasoId", respuestastringinsert));
            //        myItems.Add(listaagregar);
            //        contador++;
            //    }

            //    for (int x = 0; x < myItems.Count; x++)
            //    {
            //        lvRenovaciontardia.Items.Add(myItems[x]);
            //        lvRenovaciontardia.FullRowSelect = true;
            //    }
            //    tbCountresultadotardias.Text = contador + "";
            //    lLoadingmtardias.Text = "";
            //    respuestastringinsert.Close();
            //    con1.Cerrarconexion();
            //}
            //else
            //{
            //    tbLoading.Text = "";
            //    //debe verificarse que existan las fechas correctas            
            //}
        }

        private void AdjustColumnOrder_RMTardiaVL()
        {
            //vamos a consultar de la base por usuario el orden de èsta pestañá

            conect_robot con1 = new conect_robot();
            String queryinsert = "SELECT Columna_nombre, orden_usuario FROM jobconfig.orden_vistas_robot where id_usuario = 1 and id_vista = 2 order by orden_usuario asc ;";

            MySqlDataReader resp_query = con1.getdatareader(queryinsert);
            while (resp_query.Read())
            {

                String sColumna_nombre = validareader("Columna_nombre", "Columna_nombre", resp_query);
                int sorden_usuario = int.Parse(validareader("orden_usuario", "orden_usuario", resp_query));

                datagrid_renovacion_marcatardia_viejaley.Columns[sColumna_nombre].DisplayIndex = sorden_usuario;// RMTVL_seleccionar



            }

            resp_query.Close();
            con1.Cerrarconexion();

            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_casoid"].DisplayIndex = 0;// RMTVL_casoid siempre va a ser 0
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_seleccionar"].DisplayIndex = 1;// RMTVL_seleccionar
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_Ultimi_correo"].DisplayIndex = 2;// RMTVL_Ultimi_correo
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_Correos_enviados"].DisplayIndex = 3;// RMTVL_Correos_enviados
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_plazoid"].DisplayIndex = 4;// RMTVL_plazoid
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_casoid_view"].DisplayIndex = 5;// RMTVL_casoid_view
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_casonumero"].DisplayIndex = 6;// RMTVL_casonumero
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_Numero_registro"].DisplayIndex = 7;// RMTVL_Numero_registro antes: caso numero concedida
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_marca"].DisplayIndex = 8;// RMTVL_marca
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_tipoplazodescrip"].DisplayIndex = 9;// RMTVL_tiposoldescrip
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_clientenombre"].DisplayIndex = 10;// RMTVL_clientenombre
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_solicitante"].DisplayIndex = 11;// RMTVL_solicitante
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_contactonombre"].DisplayIndex = 12;// RMTVL_contactonombre
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_contactomail"].DisplayIndex = 13;// RMTVL_contactomail
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_subject"].DisplayIndex = 14;// RMTVL_subject
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_tiposoldescrip"].DisplayIndex = 15;// RMTVL_tiposoldescrip
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_subtiposoldesc"].DisplayIndex = 16;// RMTVL_subtiposoldesc
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_nexp"].DisplayIndex = 17;// RMTVL_nexp
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_clase"].DisplayIndex = 18;// RMTVL_clase
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_Referencia_nombre"].DisplayIndex = 19;// RMTVL_Referencia_nombre
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_fechapresentacion"].DisplayIndex = 20;// RMTVL_fechapresentacion
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_fechavigencia"].DisplayIndex = 21;// RMTVL_fechavigencia
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_fecha_inicio"].DisplayIndex = 22;// RMTVL_fecha_inicio
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_fecha_fin"].DisplayIndex = 23;// RMTVL_fecha_fin
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_dias_proximo_mail"].DisplayIndex = 24;// RMTVL_dias_proximo_mail
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_fecha_proximo_mail"].DisplayIndex = 25;// RMTVL_fecha_proximo_mail
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_documento_fecha_recepcion"].DisplayIndex = 26;// RMTVL_documento_fecha_recepcion
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_documento_fecha_recepcion_2"].DisplayIndex = 27;// RMTVL_documento_fecha_recepcion_2
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_documento_fecha_recepcion_4"].DisplayIndex = 28;// RMTVL_documento_fecha_recepcion_4
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_anualidades"].DisplayIndex = 29;// RMTVL_anualidades
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_paisnombre"].DisplayIndex = 30;// RMTVL_paisnombre
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_fecha_filing_cliente"].DisplayIndex = 31;// RMTVL_fecha_filing_cliente
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_documento_fecha"].DisplayIndex = 32;// RMTVL_documento_fecha
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_documento_fecha_vencimiento"].DisplayIndex = 33;// RMTVL_documento_fecha_vencimiento
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_estatus_caso"].DisplayIndex = 34;// RMTVL_estatus_caso
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_tipo_plazo_id"].DisplayIndex = 35;// RMTVL_tipo_plazo_id
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_estatus_plazo_id"].DisplayIndex = 36;// RMTVL_estatus_plazo_id
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_plazo_fecha_atencion"].DisplayIndex = 37;// RMTVL_plazo_fecha_atencion
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_idioma_original_id"].DisplayIndex = 38;// RMTVL_idioma_original_id
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_idioma_id"].DisplayIndex = 39;// RMTVL_idioma_id
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_indiomaclave"].DisplayIndex = 40;// RMTVL_indiomaclave
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_estatuscasodescr"].DisplayIndex = 41;// RMTVL_estatuscasodescr
            //datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_estatusplazodescr"].DisplayIndex = 42;// RMTVL_estatusplazodescr
        }

        private void button34_Click(object sender, EventArgs e)
        {

            foreach (DataGridViewRow row in datagrid_renovacion_marcatardia_viejaley.Rows)
            {

                row.Cells["RMTardiaVL_seleccionar"].Value = true;

            }
        }

        private void button33_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_renovacion_marcatardia_viejaley.Rows)
            {

                row.Cells["RMTardiaVL_seleccionar"].Value = false;

            }
        }

        private void button32_Click(object sender, EventArgs e)
        {

            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Plazoid";
                workSheet.Cells[3, "E"] = "Casoid";
                workSheet.Cells[3, "F"] = "Casonumero";
                workSheet.Cells[3, "G"] = "No.de Registro";
                workSheet.Cells[3, "H"] = "Marca";
                workSheet.Cells[3, "I"] = "tipoplazadescrip";
                workSheet.Cells[3, "J"] = "clienteNombre";
                workSheet.Cells[3, "K"] = "InteresadoNombre";
                workSheet.Cells[3, "L"] = "ContactoNombre";
                workSheet.Cells[3, "M"] = "ContactoEmail";
                workSheet.Cells[3, "N"] = "Subject";
                workSheet.Cells[3, "O"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "P"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "Q"] = "No.de Expediente";
                workSheet.Cells[3, "R"] = "Clase";
                workSheet.Cells[3, "S"] = "Referencia Cliente";
                workSheet.Cells[3, "T"] = "Fecha de Presentación";
                workSheet.Cells[3, "U"] = "Casofechavigencia";
                workSheet.Cells[3, "V"] = "CasoFechaInicio";
                workSheet.Cells[3, "W"] = "CasoFechaFin";
                workSheet.Cells[3, "X"] = "Pais Nombre";
                workSheet.Cells[3, "Y"] = "IdiomaClave";


                workSheet.Cells[1, "A"] = "Renovación de Marcas Tardías (Vieja Ley)";
                workSheet.Range["A1", "G1"].Merge();
                workSheet.Range["A1", "G1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "G1"].Font.Bold = true;
                workSheet.Range["A1", "G1"].Font.Size = 20;
                var row = 3;

                for (int i = 1; i < datagrid_renovacion_marcatardia_viejaley.Rows.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[1].Value;
                    workSheet.Cells[i + 4, "B"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[2].Value;
                    workSheet.Cells[i + 4, "C"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[3].Value;
                    workSheet.Cells[i + 4, "D"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[4].Value;
                    workSheet.Cells[i + 4, "E"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[5].Value;
                    workSheet.Cells[i + 4, "F"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[6].Value;
                    workSheet.Cells[i + 4, "G"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[7].Value;
                    workSheet.Cells[i + 4, "H"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[8].Value;
                    workSheet.Cells[i + 4, "I"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[9].Value;
                    workSheet.Cells[i + 4, "J"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[10].Value;
                    workSheet.Cells[i + 4, "K"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[11].Value;
                    workSheet.Cells[i + 4, "L"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[12].Value;
                    workSheet.Cells[i + 4, "M"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[13].Value;
                    workSheet.Cells[i + 4, "N"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[14].Value;
                    workSheet.Cells[i + 4, "O"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[15].Value;
                    workSheet.Cells[i + 4, "P"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[16].Value;
                    workSheet.Cells[i + 4, "Q"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[17].Value;
                    workSheet.Cells[i + 4, "R"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[18].Value;
                    workSheet.Cells[i + 4, "S"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[19].Value;
                    workSheet.Cells[i + 4, "T"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[20].Value;
                    workSheet.Cells[i + 4, "U"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[21].Value;
                    workSheet.Cells[i + 4, "V"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[22].Value;
                    workSheet.Cells[i + 4, "W"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[23].Value;
                    workSheet.Cells[i + 4, "X"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[30].Value;
                    workSheet.Cells[i + 4, "Y"] = datagrid_renovacion_marcatardia_viejaley.Rows[i].Cells[40].Value;

                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "Y" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
                workSheet.Range["A3", "Y" + (row + 4)].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                workSheet.Range["A3", "Y3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            }
            catch (Exception E)
            {
                Console.Write("Se canceló la exportación");
            }
        }

        private void button35_Click(object sender, EventArgs e)
        {
            //Aquí enviaremos los seleccionados 
            try
            {
                //contamos el numero de marcas seleccionadas
                int contador = 0;
                for (int z = 0; z < datagrid_renovacion_marcatardia_viejaley.Rows.Count; z++)
                {
                    bool valor = (bool)datagrid_renovacion_marcatardia_viejaley.Rows[z].Cells[1].Value;
                    if (valor)
                    {
                        contador++;
                    }
                }
                //hacemos una confimacion para saber si realmente quiere enviar al numero de marcas seleccionadas
                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + " correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;
                    //definimos la prueba como falso a menos de que tenga capturado el correo de prueba
                    Boolean bCorreodepeuba = false;
                    if (tbPruebamarcastardias.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//bandera para no mandar copias de correo
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbPruebamarcastardias.Text);
                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }
                    for (int y = 0; y < datagrid_renovacion_marcatardia_viejaley.Rows.Count; y++)
                    {
                        bool valor = (bool)datagrid_renovacion_marcatardia_viejaley.Rows[y].Cells[1].Value;
                        if (valor)
                        {
                            //obtenemos el objeto de marcasin novedad seleccionada del datagridview por medio de la busqueda de su casoid
                            String scasoid = datagrid_renovacion_marcatardia_viejaley.Rows[y].Cells[0].Value.ToString();
                            objMP_seleccionada obj_RenovacionMarcaTardiaseleccionada = renovacionmarcatardiaviejaley.Find(x => x.sCasoId == scasoid);



                            //#CasoId 4
                            //#ContactoEmail 38
                            //#IdiomaClave 41
                            //#Subject 42
                            String sDays = "-10000";
                            String sTipoPlazoId = obj_RenovacionMarcaTardiaseleccionada.stipoplazoid;
                            String sPlazoId = obj_RenovacionMarcaTardiaseleccionada.sPlazoId;
                            String sEstatusPlazoId = obj_RenovacionMarcaTardiaseleccionada.sEstatusPlazoId;
                            String sUID_Jobconfig = "";
                            String sCasoId = obj_RenovacionMarcaTardiaseleccionada.sCasoId;
                            String sTiposolicitudid = obj_RenovacionMarcaTardiaseleccionada.sTipoSolicitudId;
                            String sDocumentoid = obj_RenovacionMarcaTardiaseleccionada.sDocumentoId;
                            String sCasoNumero = obj_RenovacionMarcaTardiaseleccionada.sCasoNumero;
                            String sContactoEmail = obj_RenovacionMarcaTardiaseleccionada.sContactoEmail;// "eramiref92@gmail.com";//´Para pruebas
                            String sIdiomaClave = obj_RenovacionMarcaTardiaseleccionada.sIdiomaClave;
                            String sSubject = obj_RenovacionMarcaTardiaseleccionada.sSubject;
                            int REC = 0;// Get_Rec(Convert.ToInt32(sPlazoId));
                            //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);
                            Action act = () =>
                            {
                                //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                                //por lo que generamos el siguiente query
                                conect_robot con = new conect_robot();
                                String datosconectjobconfig = con.getdatavalues();
                                //String sQuerygetUidjobconfig = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
                                //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
                                String sUID_JobConfig = "a8b24705-ceab-11e8-869b-000c291862e7";
                                String FunctionName = "Get_Email_RenovacionMarca_20_34_2";//"Get_Email_Marca_sinnovedad";
                                String sViewName = "warning_renovacionmarca_20_34_2";//"warning_marcassinovedades_erf";
                                //while (resps_UIDJobconfig.Read())
                                //{
                                //    sUID_JobConfig = validareader("UID_JobConfig", "UID_JobConfig", resps_UIDJobconfig);
                                //    FunctionName = validareader("FunctionName", "UID_JobConfig", resps_UIDJobconfig);
                                //    sViewName = validareader("ViewName", "UID_JobConfig", resps_UIDJobconfig);
                                //}
                                conect_robot valores = new conect_robot();
                                String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

                                //resps_UIDJobconfig.Close();
                                String sCorreodestino = "";

                                if (bCorreodepeuba)
                                {
                                    sCorreodestino = tbPruebamarcastardias.Text;//Prueba de correo
                                }
                                else
                                {
                                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                                }
                                String[] correos = sCorreodestino.Split(',');
                                if (correos.Length > 1)
                                {
                                    sCorreodestino = correos[0];
                                    for (int z = 1; z < correos.Length; z++)
                                    {
                                        sGlobalSmtpCC += "," + correos[z];
                                    }

                                }
                                //String sAsunto = listView1.CheckedItems[x].SubItems[42].Text;
                                //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                                iContadorcorreossend += iresult;
                                //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
                                if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                                {
                                    int iCasoid = Int32.Parse(sCasoId);
                                    int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                                    int isDocumentoid;
                                    if (sDocumentoid == "")
                                    {
                                        isDocumentoid = 0;
                                    }
                                    else
                                    {
                                        isDocumentoid = Int32.Parse(sDocumentoid);
                                    }

                                    int iDays = Int32.Parse("-10000");
                                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                    int iPlazoId = Int32.Parse(sPlazoId);
                                    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid,  isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                                }
                            };
                            using (Waitforsendmail obj = new Waitforsendmail(act))
                            {
                                obj.ShowDialog();
                            }
                            tbcorreoxenviadosmtardias.Text = iContadorcorreossend + "";
                            tbMtardiasactualizados.Text = iContadorcorreosupdates + "";
                        }
                    }

                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates);// + iContadorcorreosupdates + " Registros en la base de datos King");
                }

            }
            catch (Exception E)
            {
                //error al enviar correo
            }
        }


        public void validafondo(DataGridViewRow dRows, String sDatefecha, int iColumna)
        {
            try
            {
                    //dRows.DefaultCellStyle.BackColor = Color.LightGray;
                    if (sDatefecha.Trim() == "00-00-0000" && sDatefecha.Trim() == ""){
                        dRows.Cells[iColumna].Style.ForeColor = Color.White;
                    }

            }catch (Exception exs){
                new filelog("", "" + exs.Message);
            }
        }
        
        public DateTime validafechavacia(String sDatefecha)
        {
            DateTime sFechareturn = DateTime.MinValue;
            try
            {
                if (sDatefecha.Trim() != "00-00-0000" && sDatefecha.Trim() != "")
                {
                    sFechareturn = Convert.ToDateTime(sDatefecha.Trim());
                    //dRows.Cells[iColumna].Style.ForeColor = Color.White;
                    return sFechareturn;
                }else {
                    return sFechareturn;
                }
            }catch (Exception exs){
                return sFechareturn;
            }
        }
        public void lipiafechas(DataGridView dtaPagos) {
            try {
                for (int fila = 0; fila < dtaPagos.Rows.Count - 1; fila++)
                {
                    for (int col = 0; col < dtaPagos.Rows[fila].Cells.Count; col++)
                    {
                        string valor = dtaPagos.Rows[fila].Cells[col].Value.ToString();
                        if (valor == "01/01/0001 12:00:00 a. m.") {
                            dtaPagos.Rows[fila].Cells[col].Style.ForeColor = Color.White;
                            //dRows.Cells[7].Style.ForeColor = Color.Black;
                        }
                        //MessageBox.Show(valor);
                    }
                }
            }catch (Exception exs) {
                new filelog("", ""+exs.Message);
            }
            
        }

        private void button41_Click(object sender, EventArgs e)
        {
            String sAnorenovacion = cbAnorenovacion.Text;
            if (sAnorenovacion != "")//no validamos la fecha a seleccionar
            {

                Lcargando.Text = "Cargando registros ...";
                System.Threading.Thread.Sleep(1000);
                lvmarcasporano.Items.Clear();

                conect_robot con1 = new conect_robot();
                String sPlazoid = "";
                String sSend = "";
                String sSendnow = "";
                if (true)//no validamos la fecha a seleccionar
                {
                    tbMarcasrenovacionporano.Text = "";
                    List<ListViewItem> myItems = new List<ListViewItem>();
                    int contador = 0;
                    //String queryinsert = " use jobconfig; SELECT  " +
                    //                    " war.PlazoId, " +
                    //                    " war.CasoId, " +
                    //                    " war.DocumentoId, " +
                    //                    " war.TipoPlazoDescrip, " +
                    //                    " war.ClienteNombre, " +
                    //                    " war.InteresadoNombre, " +
                    //                    " war.TipoSolicitudDescrip, " +
                    //                    " war.SubTipoSolicitudDescripcion, " +
                    //                    " war.Marca, " +
                    //                    " war.CasoNumeroExpedienteLargo, " +
                    //                    " war.CasoNumero, " +
                    //                    " war.CasoProductosClase, " +
                    //                    " war.ReferenciaNombre, " +
                    //                    " DATE_FORMAT(war.CasoFechaVigencia,'%d-%m-%Y') as CasoFechaVigencia, " +
                    //                    " DATE_FORMAT(war.CasoFechaIni,'%d-%m-%Y') as CasoFechaIni, " +
                    //                    " DATE_FORMAT(war.CasoFechaFin,'%d-%m-%Y') as CasoFechaFin, " +
                    //                    " war.DocumentoFechaRecepcion, " +
                    //                    " war.DocumentoFechaRecepcion2meses, " +
                    //                    " war.DocumentoFechaRecepcion4meses, " +
                    //                    " war.anualidades, " +
                    //                    " war.PaisNombre, " +
                    //                    " DATE_FORMAT(war.CasoFechaRecepcion,'%d-%m-%Y') as CasoFechaRecepcion, " +
                    //                    " war.CasoFechaFilingCliente, " +
                    //                    " war.CasoNumConcedida, " +
                    //                    " war.DocumentoFecha, " +
                    //                    " war.DocumentoFechaVencimiento, " +
                    //                    " war.EstatusCasoId, " +
                    //                    " war.EstatusCasoDescrip, " +
                    //                    " war.tipoplazoid, " +
                    //                    " war.EstatusPlazoId, " +
                    //                    " war.EstatusPlazoDescrip, " +
                    //                    " war.PlazoFechaAtencion, " +
                    //                    " war.ContactoNombre, " +
                    //                    " war.ContactoEmail, " +
                    //                    " war.IdiomaOriginalID, " +
                    //                    " war.IdiomaId, " +
                    //                    " war.IdiomaClave, " +
                    //                    " war.Subject, " +
                    //                    " war.SendNow, " +
                    //                    " DATE_FORMAT(Get_Fechaultimo(war.CasoId, 'warning_renovacionmarca_20_34_2'),'%d-%m-%Y') AS `FechaSended`," +
                    //                    " Get_countenviados(war.CasoId, 'warning_renovacionmarca_20_34_2') AS `numenviados` " +
                    //                    " FROM " +
                    //                    "     jobconfig.warning_renovacionmarca_20_34_2 AS war " +
                    //                    " WHERE " +
                    //                    " YEAR((war.CasoFechaVigencia - INTERVAL 6 MONTH)) = '" + cbAnorenovacion.Text + "' " +
                    //                    " group by CasoId  " +
                    //                    " ORDER BY CasoFechaVigencia DESC; ";

                    //String queryinsert = " use jobconfig; SELECT  " +
                    //                    " war.PlazoId, " +
                    //                    " war.CasoId, " +
                    //                    " war.DocumentoId, " +
                    //                    " war.TipoPlazoDescrip, " +
                    //                    " war.ClienteNombre, " +
                    //                    " war.InteresadoNombre, " +
                    //                    " war.TipoSolicitudDescrip, " +
                    //                    " war.SubTipoSolicitudDescripcion, " +
                    //                    " war.Marca, " +
                    //                    " war.CasoNumeroExpedienteLargo, " +
                    //                    " war.CasoNumero, " +
                    //                    " war.CasoProductosClase, " +
                    //                    " war.ReferenciaNombre, " +
                    //                    " DATE_FORMAT(war.CasoFechaVigencia,'%d-%m-%Y') as CasoFechaVigencia, " +
                    //                    " DATE_FORMAT(war.CasoFechaIni,'%d-%m-%Y') as CasoFechaIni, " +
                    //                    " DATE_FORMAT(war.CasoFechaFin,'%d-%m-%Y') as CasoFechaFin, " +
                    //                    " war.DocumentoFechaRecepcion, " +
                    //                    " war.DocumentoFechaRecepcion2meses, " +
                    //                    " war.DocumentoFechaRecepcion4meses, " +
                    //                    " war.anualidades, " +
                    //                    " war.PaisNombre, " +
                    //                    " DATE_FORMAT(war.CasoFechaRecepcion,'%d-%m-%Y') as CasoFechaRecepcion, " +
                    //                    " war.CasoFechaFilingCliente, " +
                    //                    " war.CasoNumConcedida, " +
                    //                    " war.DocumentoFecha, " +
                    //                    " war.DocumentoFechaVencimiento, " +
                    //                    " war.EstatusCasoId, " +
                    //                    " war.EstatusCasoDescrip, " +
                    //                    " war.tipoplazoid, " +
                    //                    " war.EstatusPlazoId, " +
                    //                    " war.EstatusPlazoDescrip, " +
                    //                    " war.PlazoFechaAtencion, " +
                    //                    " war.ContactoNombre, " +
                    //                    " war.ContactoEmail, " +
                    //                    " war.IdiomaOriginalID, " +
                    //                    " war.IdiomaId, " +
                    //                    " war.IdiomaClave, " +
                    //                    " war.Subject, " +
                    //                    " war.SendNow, " +
                    //                    " DATE_FORMAT(Get_Fechaultimo(war.CasoId, 'warning_renovacionmarca_20_34_2'),'%d-%m-%Y') AS `FechaSended`," +
                    //                    " Get_countenviados(war.CasoId, 'warning_renovacionmarca_20_34_2') AS `numenviados` " +
                    //                    " FROM " +
                    //                    "     jobconfig.warning_renovacionmarca_20_34_2 AS war " +
                    //                    " WHERE " +
                    //                    " YEAR((war.CasoFechaVigencia - INTERVAL 6 MONTH)) = '" + cbAnorenovacion.Text + "' " +
                    //                    " group by CasoId  " +
                    //                    " ORDER BY CasoFechaVigencia DESC; ";
                    //String queryinsert = " use jobconfig; SELECT  " +
                    //                    " war.PlazoId, " +
                    //                    " war.CasoId, " +
                    //                    " war.DocumentoId, " +
                    //                    " war.TipoPlazoDescrip, " +
                    //                    " war.ClienteNombre, " +
                    //                    " war.InteresadoNombre, " +
                    //                    " war.TipoSolicitudDescrip, " +
                    //                    " war.SubTipoSolicitudDescripcion, " +
                    //                    " war.Marca, " +
                    //                    " war.CasoNumeroExpedienteLargo, " +
                    //                    " war.CasoNumero, " +
                    //                    " war.CasoProductosClase, " +
                    //                    " war.ReferenciaNombre, " +


                    //                    " DATE_FORMAT(war.CasoFechaVigencia,'%d-%m-%Y') as CasoFechaVigencia, " +
                    //                    " DATE_FORMAT(war.CasoFechaIni,'%d-%m-%Y') as CasoFechaIni, " +
                    //                    " DATE_FORMAT(war.CasoFechaFin,'%d-%m-%Y') as CasoFechaFin, " +

                    //                    " war.DocumentoFechaRecepcion, " +
                    //                    " war.DocumentoFechaRecepcion2meses, " +
                    //                    " war.DocumentoFechaRecepcion4meses, " +
                    //                    " war.anualidades, " +
                    //                    " war.PaisNombre, " +
                    //                    " DATE_FORMAT(war.CasoFechaRecepcion,'%d-%m-%Y') as CasoFechaRecepcion, " +
                    //                    " war.CasoFechaFilingCliente, " +
                    //                    " war.CasoNumConcedida, " +
                    //                    " war.DocumentoFecha, " +
                    //                    " war.DocumentoFechaVencimiento, " +
                    //                    " war.EstatusCasoId, " +
                    //                    " war.EstatusCasoDescrip, " +
                    //                    " war.tipoplazoid, " +
                    //                    " war.EstatusPlazoId, " +
                    //                    " war.EstatusPlazoDescrip, " +
                    //                    " war.PlazoFechaAtencion, " +
                    //                    " war.ContactoNombre, " +
                    //                    " war.ContactoEmail, " +
                    //                    " war.IdiomaOriginalID, " +
                    //                    " war.IdiomaId, " +
                    //                    " war.IdiomaClave, " +
                    //                    " war.Subject, " +
                    //                    " war.SendNow, " +
                    //                    " DATE_FORMAT(Get_Fechaultimo(war.CasoId, 'warning_renovacionmarca_20_34_2'),'%d-%m-%Y') AS `FechaSended`," +
                    //                    " Get_countenviados(war.CasoId, 'warning_renovacionmarca_20_34_2') AS `numenviados` " +
                    //                    " FROM " +
                    //                    "     jobconfig.warning_renovacionmarca_20_34_2 AS war " +
                    //                    " WHERE " +
                    //                    " YEAR((war.CasoFechaVigencia - INTERVAL 6 MONTH)) = '" + cbAnorenovacion.Text + "' " +
                    //                    " group by CasoId  " +
                    //                    " ORDER BY CasoFechaVigencia DESC; ";
                    //
                    String queryinsert = " use jobconfig; SELECT war.*, " +
                                            " DATE_FORMAT(war.CasoFechaVigencia2,'%d-%m-%Y') as CasoFechaVigencia " +
                                            " from warning_renovacionmarca_20_34_2022 war " +
                                            " WHERE " +
                                            " YEAR((war.CasoFechaVigencia2 - INTERVAL 6 MONTH)) = '" + cbAnorenovacion.Text + "' " +
                                            " group by CasoId  " +
                                            " ORDER BY CasoFechaVigencia2 DESC; ";
                    if (renovacionmarcaporanoviejaley != null)
                    {
                        renovacionmarcaporanoviejaley.Clear();
                    }
                    datagrid_renovacion_marca_porano_viejaley.Rows.Clear();
                    Action act = () =>
                    {
                        MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);

                        while (respuestastringinsert.Read())
                        {
                            String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);

                            try
                            {
                                String sPlazoId = validareader("PlazosId", "PlazoId", respuestastringinsert);
                                String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                                String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);
                                String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                                String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                                String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                                String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                                String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                                String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                                String sMarca = validareader("Marca", "Marca", respuestastringinsert);
                                String sInvento = validareader("invento", "invento", respuestastringinsert);
                                String sFechadiferencia = "";
                                String sFechaLimite = "";
                                String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                                String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                                String sCasoProductosClase = validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                                String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                                String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);

                                String sCasoFechaConcesion = validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);

                                String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                                String sCasoFechaInidos = validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                                String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                                String sDocumentoFechaRecepcion = validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                                String sDocumentoFechaRecepcion2meses = validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                                String sDocumentoFechaRecepcion4meses = validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                                String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                                String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                                String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                                String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                                String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                                String sDocumentoFecha = validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                                String sDocumentoFechaVencimiento = validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                                String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                                String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                                String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                                String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                                String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                                String sPlazoFechaAtencion = validareader("PlazoFechaAtencion", "PlazoFechaAtencion", respuestastringinsert);
                                String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                                String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                                String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                                String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                                String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                                String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                                String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                                String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                                String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);

                                //para pruebas agregamos el correo de prueba   y si no comentamos la linea de código
                                //sContactoEmail = "eduarximo@gmail.com; eduardor@dicss.com.mx";

                                int REC = 0;
                                String sUID_JobConfig = "a8b24705-ceab-11e8-869b-000c291862e7";
                                String FunctionName = "Get_Email_RenovacionMarca_20_34_2";
                                String sViewName = "warning_renovacionmarca_20_34_2";

                                DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                                DateTime dFechaLimite = validafechavacia(sFechaLimite);
                                DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                                DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                                DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                                DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                                DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                                DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                                DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                                DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);

                                DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                                DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                                DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                                DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                                DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                                DateTime dFechaSended = validafechavacia(sFechaSended);
                                

                                objMP_seleccionada renovacion_marca_porano_viejaley = new objMP_seleccionada(sPlazoId,
                                                                                             sCasoId,
                                                                                             sDocumentoId,
                                                                                             sTipoPlazoDescrip,
                                                                                             sClienteNombre,
                                                                                             sInteresadoNombre,
                                                                                             sTipoSolicitudDescrip,
                                                                                             sSubTipoSolicitudDescripcion,
                                                                                             sMarca,
                                                                                             sInvento,
                                                                                             sFechadiferencia,
                                                                                             dFechaLimite,
                                                                                             sCasoNumeroExpedienteLargo,
                                                                                             sCasoNumero,
                                                                                             sCasoProductosClase,
                                                                                             sReferenciaNombre,
                                                                                             dCasoFechaConcesion,
                                                                                             dCasoFechaVigencia,
                                                                                             dCasoFechaIni,
                                                                                             dCasoFechaInidos,
                                                                                             dCasoFechaFin,
                                                                                             dDocumentoFechaRecepcion,
                                                                                             dDocumentoFechaRecepcion2meses,
                                                                                             dDocumentoFechaRecepcion4meses,
                                                                                             sanualidades,
                                                                                             sPaisNombre,
                                                                                             dCasoFechaRecepcion,
                                                                                             dCasoFechaFilingCliente,
                                                                                             sCasoNumConcedida,
                                                                                             dDocumentoFecha,
                                                                                             dDocumentoFechaVencimiento,
                                                                                             sEstatusCasoId,
                                                                                             sEstatusCasoDescrip,
                                                                                             stipoplazoid,
                                                                                             sEstatusPlazoId,
                                                                                             sEstatusPlazoDescrip,
                                                                                             dPlazoFechaAtencion,
                                                                                             sContactoNombre,
                                                                                             sContactoEmail,
                                                                                             sIdiomaOriginalID,
                                                                                             sIdiomaId,
                                                                                             sIdiomaClave,
                                                                                             sSubject,
                                                                                             sSendNow,
                                                                                             dFechaSended,
                                                                                             snumenviados,
                                                                                            REC,
                                                                                            tbCorreodepruebas.Text,
                                                                                            sUID_JobConfig,
                                                                                            FunctionName,
                                                                                            sViewName, 
                                                                                            sTipoSolicitudId
                                                                                            );
                                renovacionmarcaporanoviejaley.Add(renovacion_marca_porano_viejaley);
                            }
                            catch (Exception Ex)
                            {
                                MessageBox.Show("Mensaje "+Ex.Message);
                            }
                            contador++;
                        }
                        respuestastringinsert.Close();
                        con1.Cerrarconexion();
                    };
                    using (Waitforcases form = new Waitforcases(act))
                    {
                        form.ShowDialog();
                    }

                    foreach (var Obj_renovacion_marca_porano_viejaley in renovacionmarcaporanoviejaley)
                    {
                        /*1*/
                        CheckBox checkboxcell = new CheckBox();
                        /* INICIO
                        * Aqui validaremos las fechas para asignar a ariables tipodatetime min o con un calor mayor
                        */
                            //validafondo(,,);


                        /* FIN
                            * Aqui validaremos las fechas para asignar a ariables tipodatetime min o con un calor mayor
                        */
                        //DataGridViewRow dRows = (DataGridViewRow)datagrid_renovacion_marca_porano_viejaley.Rows[0].Clone();
                        //dRows.Cells[0].Value = Obj_renovacion_marca_porano_viejaley.sCasoId;


                        datagrid_renovacion_marca_porano_viejaley.Rows.Add(Obj_renovacion_marca_porano_viejaley.sCasoId, false,
            /*2*/        Obj_renovacion_marca_porano_viejaley.sFechaSended,
            /*3*/        Obj_renovacion_marca_porano_viejaley.snumenviados,
            /*4*/        Obj_renovacion_marca_porano_viejaley.sPlazoId,
            /*5*/        Obj_renovacion_marca_porano_viejaley.sCasoId,
            /*6*/        Obj_renovacion_marca_porano_viejaley.sCasoNumero,
            /*7*/        Obj_renovacion_marca_porano_viejaley.sCasoNumConcedida,//numero de registro
            /*8*/        Obj_renovacion_marca_porano_viejaley.sMarca,
            /*9*/        Obj_renovacion_marca_porano_viejaley.sTipoPlazoDescrip,
            /*10*/       Obj_renovacion_marca_porano_viejaley.sClienteNombre,
            /*11*/       Obj_renovacion_marca_porano_viejaley.sInteresadoNombre,
            /*12*/       Obj_renovacion_marca_porano_viejaley.sContactoNombre,
            /*13*/       Obj_renovacion_marca_porano_viejaley.sContactoEmail, //solicitante 
            /*14*/       Obj_renovacion_marca_porano_viejaley.sSubject,
            /*15*/       Obj_renovacion_marca_porano_viejaley.sTipoSolicitudDescrip,
            /*16*/       Obj_renovacion_marca_porano_viejaley.sSubTipoSolicitudDescripcion,
            /*17*/       Obj_renovacion_marca_porano_viejaley.sCasoNumeroExpedienteLargo,//No.expediente
            /*18*/       Obj_renovacion_marca_porano_viejaley.sCasoProductosClase,//Clase
            /*19*/       Obj_renovacion_marca_porano_viejaley.sReferenciaNombre,//referencia cliente 
            /*20*/       Obj_renovacion_marca_porano_viejaley.sCasoFechaRecepcion, //fecha presentacion
            /*21*/       Obj_renovacion_marca_porano_viejaley.sCasoFechaVigencia, //fecha vigencia
            /*22*/       Obj_renovacion_marca_porano_viejaley.sCasoFechaIni, //caso fecha inicio
            /*23*/       Obj_renovacion_marca_porano_viejaley.sCasoFechaFin, //caso fecha fin 
            /*24*/       "",
            /*25*/       "",
            /*26*/       Obj_renovacion_marca_porano_viejaley.sDocumentoFechaRecepcion,
            /*27*/       Obj_renovacion_marca_porano_viejaley.sDocumentoFechaRecepcion2meses,
            /*28*/       Obj_renovacion_marca_porano_viejaley.sDocumentoFechaRecepcion4meses,
            /*29*/       Obj_renovacion_marca_porano_viejaley.sanualidades,
            /*30*/       Obj_renovacion_marca_porano_viejaley.sPaisNombre,
            /*31*/       Obj_renovacion_marca_porano_viejaley.sCasoFechaFilingCliente,
            /*32*/       Obj_renovacion_marca_porano_viejaley.sDocumentoFecha,
            /*33*/       Obj_renovacion_marca_porano_viejaley.sDocumentoFechaVencimiento,
            /*34*/       Obj_renovacion_marca_porano_viejaley.sEstatusCasoId,
            /*35*/       Obj_renovacion_marca_porano_viejaley.stipoplazoid,
            /*36*/       Obj_renovacion_marca_porano_viejaley.sEstatusPlazoId,
            /*37*/       Obj_renovacion_marca_porano_viejaley.sPlazoFechaAtencion,
            /*38*/       Obj_renovacion_marca_porano_viejaley.sIdiomaOriginalID,
            /*39*/       Obj_renovacion_marca_porano_viejaley.sIdiomaId,
            /*40*/       Obj_renovacion_marca_porano_viejaley.sIdiomaClave,
            /*41*/       Obj_renovacion_marca_porano_viejaley.sEstatusCasoDescrip,
            /*42*/       Obj_renovacion_marca_porano_viejaley.sEstatusPlazoDescrip,
            /*43*/       Obj_renovacion_marca_porano_viejaley.sTipoSolicitudId
            );
                    }
                    lipiafechas(datagrid_renovacion_marca_porano_viejaley);
                    AdjustColumnOrder_RMPorAnoVL();
                    tbMarcasrenovacionporano.Text = contador + "";
                    Lcargando.Text = "";
                    //tbMporanoactualizados.Text = "0";
                    //tbMporanoenviados.Text = "0";
                }
                else
                {
                    Lcargando.Text = "";
                }

            }
            else
            {
                MessageBox.Show("Debe seleccionar un año.");
                Lcargando.Text = "";
            }
            
            //Lcargando.Text = "Cargando registros ...";
            //System.Threading.Thread.Sleep(1000);
            ////String sFechainicio = tbFechainicio.Text;
            ////String sFechafin = tbFechafin.Text;
            ////sFechainicio = cambiaformatofecha(sFechainicio);
            ////sFechafin = cambiaformatofecha(sFechafin);
            ////String anorenovacioatiempo = cbAnorenovacionatiempo.Text;
            //lvmarcasporano.Items.Clear();
            //String sAnorenovacion = cbAnorenovacion.Text;
            //conect con1 = new conect_robot();
            //String sPlazoid = "";
            //String sSend = "";
            //String sSendnow = "";
            //if (sAnorenovacion!="")//no validamos la fecha a seleccionar
            //{
            //    //String queryinsert = "SELECT * FROM jobconfig.warning_pagoanualidad_6_33_2 limit 10;";// where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
            //    String queryinsert = " SELECT  " +
            //                          "     * " +
            //                          " FROM " +
            //                          "     jobconfig.warning_renovacionmarca_20_34_2 " +
            //                          " WHERE " +
            //                          "    year((CasoFechaVigencia - INTERVAL 6 MONTH)) ='" + sAnorenovacion + "'" +
            //                          " ORDER BY CasoFechaVigencia Desc;";//where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
            //    MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);
            //    tbMarcasrenovacionporano.Text = "";
            //    List<ListViewItem> myItems = new List<ListViewItem>();
            //    int contador = 0;
            //    while (respuestastringinsert.Read())
            //    {

            //        //con el casoid obtendremos el valor del xUID_JobConfig para despues traer get body y enviar el mail en el momento con la funcion doble click
            //        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
            //        String queryselectreviewbycasoid = "select * from jobconfig.job_review where casoid = " + sCasoid;
            //        conect_robot con2 = new conect_robot();
            //        MySqlDataReader respuestasselectbycasoid = con2.getdatareader(queryselectreviewbycasoid);
            //        while (respuestasselectbycasoid.Read())
            //        {
            //            sPlazoid = validareader("ViewName", "CasoId", respuestasselectbycasoid);
            //            sSend = validareader("Send", "CasoId", respuestasselectbycasoid);
            //            sSendnow = validareader("SendNow", "CasoId", respuestasselectbycasoid);
            //        }
            //        respuestasselectbycasoid.Close();
            //        con2.Cerrarconexion();
            //        ListViewItem listaagregar = new ListViewItem("", 0);
            //        ListViewItem checks = new ListViewItem();
            //        //validareader("ClienteId", "ClienteId", respuestastringinsert);//primer parametro es el texto, el segundo parametro es el id o valor y el tercer parametro es el mysqldatareader
            //        //if (sSend == "T")
            //        //{
            //        //    listaagregar.SubItems.Add(sSend);
            //        //}
            //        //else
            //        //{
            //        //    listaagregar.SubItems.Add(sSend);
            //        //}
            //        //listaagregar.SubItems.Add(sSendnow);
            //        //para marcas
            //        listaagregar.Checked = false;
            //        listaagregar.SubItems.Add(validareader("PlazoId", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));

            //        listaagregar.SubItems.Add(validareader("CasoNumero", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoNumConcedida", "CasoId", respuestastringinsert));

            //        listaagregar.SubItems.Add(validareader("DocumentoId", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("TipoPlazoDescrip", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("ClienteNombre", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("InteresadoNombre", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("Marca", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));

            //        listaagregar.SubItems.Add(validareader("CasoProductosClase", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("ReferenciaNombre", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoFechaVigencia", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoFechaIni", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoFechaFin", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion2meses", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion4meses", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add("");
            //        listaagregar.SubItems.Add("");
            //        listaagregar.SubItems.Add(validareader("anualidades", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("PaisNombre", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("CasoFechaFilingCliente", "CasoId", respuestastringinsert));

            //        listaagregar.SubItems.Add(validareader("DocumentoFecha", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("DocumentoFechaVencimiento", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("EstatusCasoId", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("tipoplazoid", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("EstatusPlazoId", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("EstatusPlazoDescrip", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("PlazoFechaAtencion", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("ContactoNombre", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("ContactoEmail", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("IdiomaOriginalID", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("IdiomaId", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("IdiomaClave", "CasoId", respuestastringinsert));
            //        listaagregar.SubItems.Add(validareader("Subject", "CasoId", respuestastringinsert));

            //        //Para patentes
            //        //listaagregar.SubItems.Add(validareader("PlazoId", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("DocumentoId", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("TipoPlazoDescrip", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("ClienteNombre", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("InteresadoNombre", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("CasoNumero", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("ReferenciaNombre", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("CasoFechaVigencia", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("CasoFechaIni", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("CasoFechaFin", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion2meses", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion4meses", "CasoId", respuestastringinsert));

            //        //listaagregar.SubItems.Add("");
            //        //listaagregar.SubItems.Add("");
            //        //listaagregar.SubItems.Add(validareader("anualidades", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("PaisNombre", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("CasoFechaFilingCliente", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("CasoNumConcedida", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("DocumentoFecha", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("DocumentoFechaVencimiento", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("EstatusCasoId", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("tipoplazoid", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("EstatusPlazoId", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("EstatusPlazoDescrip", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("PlazoFechaAtencion", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("ContactoNombre", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("ContactoEmail", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("IdiomaOriginalID", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("IdiomaId", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("IdiomaClave", "CasoId", respuestastringinsert));
            //        //listaagregar.SubItems.Add(validareader("Subject", "CasoId", respuestastringinsert));
            //        /*listaagregar.SubItems.Add(validareader("SendNow", "CasoId", respuestastringinsert));*/
            //        myItems.Add(listaagregar);
            //        contador++;
            //    }

            //    for (int x = 0; x < myItems.Count; x++)
            //    {
            //        lvmarcasporano.Items.Add(myItems[x]);
            //        lvmarcasporano.FullRowSelect = true;

            //    }
            //    tbMarcasrenovacionporano.Text = contador + "";
            //    Lcargando.Text = "";
            //    respuestastringinsert.Close();
            //    con1.Cerrarconexion();
            //}
            //else
            //{
            //    Lcargando.Text = "";
            //    MessageBox.Show("Debe seleccionar un año para consultar.");
            //    //debe verificarse que existan las fechas correctas            
            //}
        }

        private void AdjustColumnOrder_RMPorAnoVL()
        {
            //vamos a consultar de la base por usuario el orden de èsta pestañá
            try {
                conect_robot con1 = new conect_robot();
                String queryinsert = "SELECT Columna_nombre, orden_usuario FROM jobconfig.orden_vistas_robot_king where id_usuario = 1 and id_vista = 3 order by orden_usuario asc ;";

                MySqlDataReader resp_query = con1.getdatareader(queryinsert);
                while (resp_query.Read())
                {

                    String sColumna_nombre = validareader("Columna_nombre", "Columna_nombre", resp_query);
                    int sorden_usuario = int.Parse(validareader("orden_usuario", "orden_usuario", resp_query));

                    datagrid_renovacion_marca_porano_viejaley.Columns[sColumna_nombre].DisplayIndex = sorden_usuario;// RMTVL_seleccionar



                }

                resp_query.Close();
                con1.Cerrarconexion();
            }
            catch (Exception exs) {
                new filelog("Robot", ":"+exs.Message);
            }
            
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_casoid"].DisplayIndex = 0;// RMAnoVL_casoid
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_seleccionar"].DisplayIndex = 1;// RMAnoVL_seleccionar
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_Ultimi_correo"].DisplayIndex = 2;// RMAnoVL_Ultimi_correo
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_Correos_enviados"].DisplayIndex = 3;// RMAnoVL_Correos_enviados
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_plazoid"].DisplayIndex = 4;// RMAnoVL_plazoid
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_casoid_view"].DisplayIndex = 5;// RMAnoVL_casoid_view
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_casonumero"].DisplayIndex = 6;// RMAnoVL_casonumero
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_Numero_registro"].DisplayIndex = 7;// RMAnoVL_Numero_registro antes: caso numero concedida
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_marca"].DisplayIndex = 8;// RMAnoVL_marca
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_tipoplazodescrip"].DisplayIndex = 9;// RMAnoVL_tiposoldescrip
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_clientenombre"].DisplayIndex = 10;// RMAnoVL_clientenombre
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_solicitante"].DisplayIndex = 11;// RMAnoVL_solicitante
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_contactonombre"].DisplayIndex = 12;// RMAnoVL_contactonombre
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_contactomail"].DisplayIndex = 13;// RMAnoVL_contactomail
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_subject"].DisplayIndex = 14;// RMAnoVL_subject
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_tiposoldescrip"].DisplayIndex = 15;// RMAnoVL_tiposoldescrip
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_subtiposoldesc"].DisplayIndex = 16;// RMAnoVL_subtiposoldesc
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_nexp"].DisplayIndex = 17;// RMAnoVL_nexp
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_clase"].DisplayIndex = 18;// RMAnoVL_clase
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_Referencia_nombre"].DisplayIndex = 19;// RMAnoVL_Referencia_nombre
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_fechapresentacion"].DisplayIndex = 20;// RMAnoVL_fechapresentacion
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_fechavigencia"].DisplayIndex = 21;// RMAnoVL_fechavigencia
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_fecha_inicio"].DisplayIndex = 22;// RMAnoVL_fecha_inicio
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_fecha_fin"].DisplayIndex = 23;// RMAnoVL_fecha_fin
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_dias_proximo_mail"].DisplayIndex = 24;// RMAnoVL_dias_proximo_mail
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_fecha_proximo_mail"].DisplayIndex = 25;// RMAnoVL_fecha_proximo_mail
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_documento_fecha_recepcion"].DisplayIndex = 26;// RMAnoVL_documento_fecha_recepcion
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_documento_fecha_recepcion_2"].DisplayIndex = 27;// RMAnoVL_documento_fecha_recepcion_2
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_documento_fecha_recepcion_4"].DisplayIndex = 28;// RMAnoVL_documento_fecha_recepcion_4
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_anualidades"].DisplayIndex = 29;// RMAnoVL_anualidades
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_paisnombre"].DisplayIndex = 30;// RMAnoVL_paisnombre
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_fecha_filing_cliente"].DisplayIndex = 31;// RMAnoVL_fecha_filing_cliente
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_documento_fecha"].DisplayIndex = 32;// RMAnoVL_documento_fecha
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_documento_fecha_vencimiento"].DisplayIndex = 33;// RMAnoVL_documento_fecha_vencimiento
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_estatus_caso"].DisplayIndex = 34;// RMAnoVL_estatus_caso
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_tipo_plazo_id"].DisplayIndex = 35;// RMAnoVL_tipo_plazo_id
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_estatus_plazo_id"].DisplayIndex = 36;// RMAnoVL_estatus_plazo_id
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_plazo_fecha_atencion"].DisplayIndex = 37;// RMAnoVL_plazo_fecha_atencion
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_idioma_original_id"].DisplayIndex = 38;// RMAnoVL_idioma_original_id
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_idioma_id"].DisplayIndex = 39;// RMAnoVL_idioma_id
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_indiomaclave"].DisplayIndex = 40;// RMAnoVL_indiomaclave
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_estatuscasodescr"].DisplayIndex = 41;// RMAnoVL_estatuscasodescr
            //datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_estatusplazodescr"].DisplayIndex = 42;// RMAnoVL_estatusplazodescr
        }


        private void button39_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_renovacion_marca_porano_viejaley.Rows)
            {

                row.Cells["RMAnoVL_seleccionar"].Value = true;

            }

        }

        private void button38_Click(object sender, EventArgs e)
        {

            foreach (DataGridViewRow row in datagrid_renovacion_marca_porano_viejaley.Rows)
            {

                row.Cells["RMAnoVL_seleccionar"].Value = false;

            }
        }

        private void button37_Click(object sender, EventArgs e)
        {

            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Plazoid";
                workSheet.Cells[3, "E"] = "Casoid";
                workSheet.Cells[3, "F"] = "Casonumero";
                workSheet.Cells[3, "G"] = "No.de Registro";
                workSheet.Cells[3, "H"] = "Marca";
                workSheet.Cells[3, "I"] = "tipoplazadescrip";
                workSheet.Cells[3, "J"] = "clienteNombre";
                workSheet.Cells[3, "K"] = "InteresadoNombre";
                workSheet.Cells[3, "L"] = "ContactoNombre";
                workSheet.Cells[3, "M"] = "ContactoEmail";
                workSheet.Cells[3, "N"] = "Subject";
                workSheet.Cells[3, "O"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "P"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "Q"] = "No.de Expediente";
                workSheet.Cells[3, "R"] = "Clase";
                workSheet.Cells[3, "S"] = "Referencia Cliente";
                workSheet.Cells[3, "T"] = "Fecha de Presentación";
                workSheet.Cells[3, "U"] = "Casofechavigencia";
                workSheet.Cells[3, "V"] = "CasoFechaInicio";
                workSheet.Cells[3, "W"] = "CasoFechaFin";
                workSheet.Cells[3, "X"] = "Pais Nombre";
                workSheet.Cells[3, "Y"] = "IdiomaClave";


                workSheet.Cells[1, "A"] = "Renovación de Marcas por año (Vieja Ley)";
                workSheet.Range["A1", "G1"].Merge();
                workSheet.Range["A1", "G1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "G1"].Font.Bold = true;
                workSheet.Range["A1", "G1"].Font.Size = 20;
                var row = 3;

                for (int i = 1; i < datagrid_renovacion_marca_porano_viejaley.Rows.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[1].Value;
                    workSheet.Cells[i + 4, "B"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[2].Value;
                    workSheet.Cells[i + 4, "C"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[3].Value;
                    workSheet.Cells[i + 4, "D"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[4].Value;
                    workSheet.Cells[i + 4, "E"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[5].Value;
                    workSheet.Cells[i + 4, "F"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[6].Value;
                    workSheet.Cells[i + 4, "G"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[7].Value;
                    workSheet.Cells[i + 4, "H"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[8].Value;
                    workSheet.Cells[i + 4, "I"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[9].Value;
                    workSheet.Cells[i + 4, "J"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[10].Value;
                    workSheet.Cells[i + 4, "K"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[11].Value;
                    workSheet.Cells[i + 4, "L"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[12].Value;
                    workSheet.Cells[i + 4, "M"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[13].Value;
                    workSheet.Cells[i + 4, "N"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[14].Value;
                    workSheet.Cells[i + 4, "O"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[15].Value;
                    workSheet.Cells[i + 4, "P"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[16].Value;
                    workSheet.Cells[i + 4, "Q"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[17].Value;
                    workSheet.Cells[i + 4, "R"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[18].Value;
                    workSheet.Cells[i + 4, "S"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[19].Value;
                    workSheet.Cells[i + 4, "T"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[20].Value;
                    workSheet.Cells[i + 4, "U"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[21].Value;
                    workSheet.Cells[i + 4, "V"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[22].Value;
                    workSheet.Cells[i + 4, "W"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[23].Value;
                    workSheet.Cells[i + 4, "X"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[30].Value;
                    workSheet.Cells[i + 4, "Y"] = datagrid_renovacion_marca_porano_viejaley.Rows[i].Cells[40].Value;

                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "Y" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
                workSheet.Range["A3", "Y" + (row + 4)].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                workSheet.Range["A3", "Y3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            }
            catch (Exception E)
            {
                Console.Write("Se canceló la exportación");
            }
        }

        private void button40_Click(object sender, EventArgs e)
        {
            try
            {
                if (cbRenovmarcaviejaley.Checked && tbPruebaMailMarcasporano.Text == "")
                {
                    MessageBox.Show("Para actualizar un caso de prueba debe ingresar un correo de prueba.");
                    return;                
                }
                    //contamos el numero de marcas seleccionadas
                    int contador = 0;
                for (int z = 0; z < datagrid_renovacion_marca_porano_viejaley.Rows.Count; z++)
                {
                    bool valor = (bool)datagrid_renovacion_marca_porano_viejaley.Rows[z].Cells[1].Value;
                    if (valor)
                    {
                        contador++;
                    }
                }
                //hacemos una confimacion para saber si realmente quiere enviar al numero de marcas seleccionadas
                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + " correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;
                    //definimos la prueba como falso a menos de que tenga capturado el correo de prueba
                    Boolean bCorreodepeuba = false;
                    if (tbPruebaMailMarcasporano.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//bandera para no mandar copias de correo
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbPruebaMailMarcasporano.Text);
                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }

                    String sCorreodestino = "";

                    

                    if (cbRenovmarcaviejaley.Checked && tbPruebaMailMarcasporano.Text != "")
                    {//si esta checado el checbox de prueba actualizamos 
                        oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + "correos seleccionados a: " + tbPruebaMailMarcasporano.Text + "\n y actualizar" +
                                                    " en el sistema casos king?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                        if (oDlgRes == DialogResult.Yes)
                        {
                            //se enviara el correo de prueba 
                            bCorreodepeuba = false;
                        }
                        else
                        {//salimos del intento de envio
                            return;
                        }

                    }

                    for (int y = 0; y < datagrid_renovacion_marca_porano_viejaley.Rows.Count; y++)
                    {
                        bool valor = (bool)datagrid_renovacion_marca_porano_viejaley.Rows[y].Cells[1].Value;
                        if (valor)
                        {
                            //obtenemos el objeto de marcasin novedad seleccionada del datagridview por medio de la busqueda de su casoid
                            String scasoid = datagrid_renovacion_marca_porano_viejaley.Rows[y].Cells[0].Value.ToString();
                            objMP_seleccionada Obj_renovacionmarcaporanoviejaley = renovacionmarcaporanoviejaley.Find(x => x.sCasoId == scasoid);
                            //#CasoId 4
                            //#ContactoEmail 38
                            //#IdiomaClave 41
                            //#Subject 42
                            String sDays = "-10000";
                            String sTipoPlazoId = Obj_renovacionmarcaporanoviejaley.stipoplazoid;
                            String sPlazoId = Obj_renovacionmarcaporanoviejaley.sPlazoId;
                            String sEstatusPlazoId = Obj_renovacionmarcaporanoviejaley.sEstatusPlazoId;
                            String sUID_Jobconfig = "";
                            String sCasoId = Obj_renovacionmarcaporanoviejaley.sCasoId;
                            String sTiposolicitudid = Obj_renovacionmarcaporanoviejaley.sTipoSolicitudId;
                            String sDocumentoid = Obj_renovacionmarcaporanoviejaley.sDocumentoId;
                            String sCasoNumero = Obj_renovacionmarcaporanoviejaley.sCasoNumero;
                            String sContactoEmail = Obj_renovacionmarcaporanoviejaley.sContactoEmail;// "eramiref92@gmail.com";//´Para pruebas
                            String sIdiomaClave = Obj_renovacionmarcaporanoviejaley.sIdiomaClave;
                            String sSubject = Obj_renovacionmarcaporanoviejaley.sSubject;
                            int REC = 0;// Get_Rec(Convert.ToInt32(sPlazoId));
                            //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);


                            /*Aquí tomamos el valor del los richtextbox para marcas ya que si lo hacemos adelante estária fuera de contexto*/
                            sGlobalSmtpCC = rtBodymessage.Text;//rtBodymessage es para MARCAS
                            Action act = () =>
                            {
                                //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                                //por lo que generamos el siguiente query
                                conect_robot con = new conect_robot();
                                String datosconectjobconfig = con.getdatavalues();

                                String sUID_JobConfig = "a8b24705-ceab-11e8-869b-000c291862e7";
                                String FunctionName = "Get_Email_RenovacionMarca_20_34_2"; ;
                                String sViewName = "warning_renovacionmarca_20_34_2";

                                conect_robot valores = new conect_robot();
                                String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

                                //resps_UIDJobconfig.Close();
                                if (tbPruebaMailMarcasporano.Text!="")
                                {
                                    sCorreodestino = tbPruebaMailMarcasporano.Text;//Prueba de correo
                                }
                                else
                                {
                                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                                }

                                String[] correos = sCorreodestino.Split(',');
                                //if (correos.Length >= 1)
                                //{
                                //    sCorreodestino = correos[0];
                                //    for (int z = 1; z < correos.Length; z++)
                                //    {
                                //        sGlobalSmtpCC += "," + correos[z];
                                //    }

                                //}

                                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                                iContadorcorreossend += iresult;
                                //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
                                if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                                {
                                    int iCasoid = Int32.Parse(sCasoId);
                                    int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                                    int isDocumentoid;
                                    if (sDocumentoid == "")
                                    {
                                        isDocumentoid = 0;
                                    }
                                    else
                                    {
                                        isDocumentoid = Int32.Parse(sDocumentoid);
                                    }

                                    int iDays = Int32.Parse("-10000");
                                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                    int iPlazoId = Int32.Parse(sPlazoId);
                                    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid,  isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                                }
                            };
                            using (Waitforsendmail obj = new Waitforsendmail(act))
                            {
                                obj.ShowDialog();
                            }
                            tbMporanoenviados.Text = iContadorcorreossend + "";
                            tbMporanoactualizados.Text = iContadorcorreosupdates + "";
                        }
                    }

                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates);// + iContadorcorreosupdates + " Registros en la base de datos King");
                }
            }
            catch (Exception ex)
            {

            }
        }
        public void ordenandocolumns()
        {
            int count_orden = 0;
            conect_robot con_citapago_orden = new conect_robot();
            MySqlDataReader resp_consulta = con_citapago_orden.getdatareader("select * from  jobconfig.orden_vistas_robot where habilitado = 1 order by orden asc;");
            String[] sArraycampos = new String[100];
            while (resp_consulta.Read())
            {
                String sCampo = validareader("campo", "campo", resp_consulta);
                String sTitulo = validareader("titulo", "titulo", resp_consulta);
                String sorden = validareader("orden", "orden", resp_consulta);
                String shabilitado = validareader("habilitado", "habilitado", resp_consulta);
                //.Dispose();
                if (count_orden != 1000)
                {
                    int iResult = 0;
                    if (sleccionar_c_pago_G.Text == sTitulo)
                    {
                        iResult = sleccionar_c_pago_G.Index;
                    }
                    if (ultimocorreoenviado_c_pago_G.Text == sTitulo)
                    {
                        iResult = ultimocorreoenviado_c_pago_G.Index;
                    }
                    if (cooreos_enviados_c_pago_G.Text == sTitulo)
                    {
                        iResult = cooreos_enviados_c_pago_G.Index;
                    }
                    if (plazoid_c_pago_G.Text == sTitulo)
                    {
                        iResult = plazoid_c_pago_G.Index;
                    }
                    if (Casoid_c_pago_G.Text == sTitulo)
                    {
                        iResult = Casoid_c_pago_G.Index;
                    }
                    if (CasoNumero_c_pago_G.Text == sTitulo)
                    {
                        iResult = CasoNumero_c_pago_G.Index;
                    }
                    if (CCasonumconcedida.Text == sTitulo)
                    {
                        iResult = CCasonumconcedida.Index;
                    }
                    if (documentoid_c_pago_G.Text == sTitulo)
                    {
                        iResult = documentoid_c_pago_G.Index;
                    }
                    if (tipoplazodescrip_c_pago_G.Text == sTitulo)
                    {
                        iResult = tipoplazodescrip_c_pago_G.Index;
                    }
                    if (clienteNombre_C_pago_G.Text == sTitulo)
                    {
                        iResult = clienteNombre_C_pago_G.Index;
                    }
                    if (interesado_nombre_c_pago_G.Text == sTitulo)
                    {
                        iResult = interesado_nombre_c_pago_G.Index;
                    }
                    if (tiposolicituddescrip_c_pago_G.Text == sTitulo)
                    {
                        iResult = tiposolicituddescrip_c_pago_G.Index;
                    }
                    if (subtiposolicitudDescrip_c_pago_G.Text == sTitulo)
                    {
                        iResult = subtiposolicitudDescrip_c_pago_G.Index;
                    }
                    if (invento_c_pago_G.Text == sTitulo)
                    {
                        iResult = invento_c_pago_G.Index;
                    }
                    if (casoNumeroexpedientelargo_c_pago_G.Text == sTitulo)
                    {
                        iResult = casoNumeroexpedientelargo_c_pago_G.Index;
                    }
                    if (casoproductoclase_c_pago_G.Text == sTitulo)
                    {
                        iResult = casoproductoclase_c_pago_G.Index;
                    }
                    if (ReferenciaNombre_c_pago_G.Text == sTitulo)
                    {
                        iResult = ReferenciaNombre_c_pago_G.Index;
                    }
                    if (casoFechaVigencia_c_pago_G.Text == sTitulo)
                    {
                        iResult = casoFechaVigencia_c_pago_G.Index;
                    }
                    if (Casofechainicio_C_pago_G.Text == sTitulo)
                    {
                        iResult = Casofechainicio_C_pago_G.Index;
                    }
                    if (casofechafin_c_pago_G.Text == sTitulo)
                    {
                        iResult = casofechafin_c_pago_G.Index;
                    }
                    if (diasproximosemail_c_pago_G.Text == sTitulo)
                    {
                        iResult = diasproximosemail_c_pago_G.Index;
                    }
                    if (fechaproximoemail_c_pago_G.Text == sTitulo)
                    {
                        iResult = fechaproximoemail_c_pago_G.Index;
                    }
                    if (docuemtnosfecharecepcion_c_pago_G.Text == sTitulo)
                    {
                        iResult = docuemtnosfecharecepcion_c_pago_G.Index;
                    }
                    if (Docuemntofecharecepcion2meses_c_pagp_G.Text == sTitulo)
                    {
                        iResult = Docuemntofecharecepcion2meses_c_pagp_G.Index;
                    }
                    if (documentofecharecepcion4mesesc_pago_G.Text == sTitulo)
                    {
                        iResult = documentofecharecepcion4mesesc_pago_G.Index;
                    }
                    if (anualidades_c_pago_G.Text == sTitulo)
                    {
                        iResult = anualidades_c_pago_G.Index;
                    }
                    if (paisnombre_c_pago_G.Text == sTitulo)
                    {
                        iResult = paisnombre_c_pago_G.Index;
                    }
                    if (casofecharecepcion_C_pago_G.Text == sTitulo)
                    {
                        iResult = casofecharecepcion_C_pago_G.Index;
                    }
                    if (casofechafillingcliente_c_pago_G.Text == sTitulo)
                    {
                        iResult = casofechafillingcliente_c_pago_G.Index;
                    }
                    if (docuemntofecha_C_pago_G.Text == sTitulo)
                    {
                        iResult = docuemntofecha_C_pago_G.Index;
                    }
                    if (documentofechavencimiento_c_pago_G.Text == sTitulo)
                    {
                        iResult = documentofechavencimiento_c_pago_G.Index;
                    }
                    if (estatus_caso_c_pago_G.Text == sTitulo)
                    {
                        iResult = estatus_caso_c_pago_G.Index;
                    }
                    if (tipoplazoid_C_pago_G.Text == sTitulo)
                    {
                        iResult = tipoplazoid_C_pago_G.Index;
                    }
                    if (estatusplazoid_c_pago_G.Text == sTitulo)
                    {
                        iResult = estatusplazoid_c_pago_G.Index;
                    }
                    if (estatusplazodescrip_c_pago_G.Text == sTitulo)
                    {
                        iResult = estatusplazodescrip_c_pago_G.Index;
                    }
                    if (plazofechaatencion_C_pago_G.Text == sTitulo)
                    {
                        iResult = plazofechaatencion_C_pago_G.Index;
                    }
                    if (contactonombre_c_pago_G.Text == sTitulo)
                    {
                        iResult = contactonombre_c_pago_G.Index;
                    }
                    if (contactoemail_c_pago_G.Text == sTitulo)
                    {
                        iResult = contactoemail_c_pago_G.Index;
                    }
                    if (idiomaoriginaloid_c_pago_G.Text == sTitulo)
                    {
                        iResult = idiomaoriginaloid_c_pago_G.Index;
                    }
                    if (idiomaid_c_pago_G.Text == sTitulo)
                    {
                        iResult = idiomaid_c_pago_G.Index;
                    }
                    if (idiomaclave_c_pago_G.Text == sTitulo)
                    {
                        iResult = idiomaclave_c_pago_G.Index;
                    }
                    if (subject_c_pago_G.Text == sTitulo)
                    {
                        iResult = subject_c_pago_G.Index;
                    }
                    //int valorkey = lvCitaapago.Columns.IndexOfKey(sTitulo);//nofunciona
                    if (estatuscasodescrip_C_pago_G.Text == sTitulo)
                    {
                        iResult = estatuscasodescrip_C_pago_G.Index;
                    }
                    if (cMesesdep_c_pago.Text == sTitulo)
                    {
                        iResult = cMesesdep_c_pago.Index;
                    }

                    //mostramos el titulo para cachar cuales columnas no estaban
                    /*if(iResult==0){
                        MessageBox.Show("El titulo es: "+sTitulo);
                    }*/

                    int iOrden = Int32.Parse(sorden);
                    ColumnHeader column = lvCitaapago.Columns[iResult];
                    column.DisplayIndex = count_orden;
                    //sArraycampos[iOrden] = sCampo;
                    //sArraycampos[iResult] = sCampo;

                    //lvCitaapago.Columns[count_orden].Text = sTitulo;
                }
                count_orden++;
            }
            resp_consulta.Close();
            con_citapago_orden.Cerrarconexion();
        }
        private void button24_Click(object sender, EventArgs e)
        {
            labelLoadingcitaapago.Text = "Cargando registros ...";
            System.Threading.Thread.Sleep(1000);
            conect_robot con1 = new conect_robot();
            String sPlazoid = "";
            String sSend = "";
            String sSendnow = "";
            if (true)
            {
                tbCountcitaapago.Text = "";
                List<ListViewItem> myItems = new List<ListViewItem>();
                int contador = 0;
                String queryinsert = " use jobconfig; SELECT " +
                                     " war.PlazoId, " +
                                     " war.CasoId, " +
                                     " war.TipoSolicitudId, " +
                                     " war.DocumentoId, " +
                                     " war.Invento, " +
                                     " war.TipoPlazoDescrip, " +
                                     " war.ClienteNombre, " +
                                     " war.InteresadoNombre, " +
                                     " war.TipoSolicitudDescrip, " +
                                     " war.SubTipoSolicitudDescripcion, " +
                                     " war.CasoNumeroExpedienteLargo, " +
                                     " war.CasoNumero, " +
                                     " war.ReferenciaNombre, " +
                                     " war.CasoFechaVigencia, " +
                                     " war.anualidades, " +
                                     " war.PaisNombre, " +
                                     " war.CasoFechaRecepcion, " +
                                     " war.CasoFechaFilingCliente, " +
                                     " war.CasoNumConcedida, " +
                                     " war.DocumentoFecha, " +
                                     " war.DocumentoFechaRecepcion, " +
                                     " war.DocumentoFechaRecepcion2meses, " +
                                     " war.DocumentoFechaRecepcion4meses, " +
                                     " war.DocumentoFechaVencimiento, " +
                                     " war.Meses_transcurridos, " +
                                     " war.EstatusCasoId, " +
                                     " war.EstatusCasoDescrip, " +
                                     " war.tipoplazoid, " +
                                     " war.EstatusPlazoId, " +
                                     " war.EstatusPlazoDescrip, " +
                                     " war.PlazoFechaAtencion13, " +
                                     " war.ContactoNombre, " +
                                     " war.ContactoEmail, " +
                                     " war.IdiomaOriginalID, " +
                                     " war.IdiomaId, " +
                                     " war.IdiomaClave, " +
                                     " war.Subject, " +
                                     " '' AsSendNow, " +
                                     " war.CasoFechaIni as CasoFechaIni, " +
                                     " war.CasoFechaFin as CasoFechaFin, " +
                                     " (TO_DAYS(CURDATE()) - TO_DAYS(war.FechaSended)) AS diasdiferencia, " +
                                     " war.FechaSended AS `FechaSended`, " +
                                     " war.`numenviados` AS `numenviados` " +
                                     "FROM jobconfig.warning_citaapago_erf_2022 as war; ";
                if (citapago != null)
                {
                    citapago.Clear();
                }

                datagrid_cita_pago.Rows.Clear();
                Action act = () =>
                {
                    MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);

                    while (respuestastringinsert.Read())
                    {
                        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
                        try
                        {
                            int dias = 0;
                            if (validareader("diasdiferencia", "CasoId", respuestastringinsert) != "")
                            {
                                dias = Convert.ToInt32(validareader("diasdiferencia", "CasoId", respuestastringinsert));
                            }
                            int diasdiferenciasemanas = dias / 7;
                            int diasdiferenciames = dias / 30;
                            String sPlazoId = validareader("PlazoId", "PlazoId", respuestastringinsert);
                            String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                            String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);
                            
                            String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                            String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                            String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                            String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                            String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                            String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                            String sMarca = validareader("Marca", "Marca", respuestastringinsert);
                            String sFechadiferencia = "" + diasdiferenciasemanas;
                            String sFechaLimite = validareader("Meses_transcurridos", "Meses_transcurridos", respuestastringinsert);
                            String sInvento = validareader("Invento", "Invento", respuestastringinsert);
                            String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                            String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                            String sCasoProductosClase = validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                            String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                            String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);

                            String sCasoFechaConcesion = validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);


                            String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                            String sCasoFechaInidos = validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                            String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                            String sDocumentoFechaRecepcion = validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                            String sDocumentoFechaRecepcion2meses = validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                            String sDocumentoFechaRecepcion4meses = validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                            String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                            String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                            String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                            String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                            String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                            String sDocumentoFecha = validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                            String sDocumentoFechaVencimiento = validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                            String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                            String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                            String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                            String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                            String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                            String sPlazoFechaAtencion = validareader("PlazoFechaAtencion13", "PlazoFechaAtencion13", respuestastringinsert);
                            String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                            String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                            String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                            String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                            String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                            String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                            String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                            String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                            String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);

                            int REC = 0;
                            String sUID_JobConfig = "653071e9-ceaa-11e8-869b-000c291862e7";
                            String FunctionName = "Get_Email_CitaPago_135_13_2";
                            String sViewName = "warning_citaapago_erf_2022";

                            DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                            DateTime dFechaLimite = validafechavacia(sFechaLimite);
                            DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                            DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                            DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                            DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                            DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                            DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                            DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                            DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);

                            DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                            DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                            DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                            DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                            DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                            DateTime dFechaSended = validafechavacia(sFechaSended);


                            objMP_seleccionada cita_pago = new objMP_seleccionada(sPlazoId,
                                                                                  sCasoId,
                                                                                sDocumentoId,
                                                                                sTipoPlazoDescrip,
                                                                                sClienteNombre,
                                                                                sInteresadoNombre,
                                                                                sTipoSolicitudDescrip,
                                                                                sSubTipoSolicitudDescripcion,
                                                                                sMarca,
                                                                                sInvento,
                                                                                sFechadiferencia,
                                                                                dFechaLimite,
                                                                                sCasoNumeroExpedienteLargo,
                                                                                sCasoNumero,
                                                                                sCasoProductosClase,
                                                                                sReferenciaNombre,
                                                                                dCasoFechaConcesion,
                                                                                dCasoFechaVigencia,
                                                                                dCasoFechaIni,
                                                                                dCasoFechaInidos,
                                                                                dCasoFechaFin,
                                                                                dDocumentoFechaRecepcion,
                                                                                dDocumentoFechaRecepcion2meses,
                                                                                dDocumentoFechaRecepcion4meses,
                                                                                sanualidades,
                                                                                sPaisNombre,
                                                                                dCasoFechaRecepcion,
                                                                                dCasoFechaFilingCliente,
                                                                                sCasoNumConcedida,
                                                                                dDocumentoFecha,
                                                                                dDocumentoFechaVencimiento,
                                                                                sEstatusCasoId,
                                                                                sEstatusCasoDescrip,
                                                                                stipoplazoid,
                                                                                sEstatusPlazoId,
                                                                                sEstatusPlazoDescrip,
                                                                                dPlazoFechaAtencion,
                                                                                sContactoNombre,
                                                                                sContactoEmail,
                                                                                sIdiomaOriginalID,
                                                                                sIdiomaId,
                                                                                sIdiomaClave,
                                                                                sSubject,
                                                                                sSendNow,
                                                                                dFechaSended,
                                                                                snumenviados,
                                                                                REC,
                                                                                tbCorreodepruebas.Text,
                                                                                sUID_JobConfig,
                                                                                FunctionName,
                                                                                sViewName,
                                                                                sTipoSolicitudId
                                                                                );
                            citapago.Add(cita_pago);
                        }
                        catch (Exception Ex)
                        {
                            MessageBox.Show("Mensaje " + Ex.Message);
                        }
                        contador++;
                    }
                    respuestastringinsert.Close();
                    con1.Cerrarconexion();
                };
                using (Waitforcases form = new Waitforcases(act))
                {
                    form.ShowDialog();
                }

                foreach (var Obj_cita_pago in citapago)
                {
                    /*1*/
                    CheckBox checkboxcell = new CheckBox();
                    datagrid_cita_pago.Rows.Add(Obj_cita_pago.sCasoId, false,
                    /*2*/        Obj_cita_pago.sFechaSended,
                    /*3*/        Obj_cita_pago.snumenviados,
                    /*4*/        Obj_cita_pago.sPlazoId,
                    /*5*/        Obj_cita_pago.sCasoId,
                    /*6*/        Obj_cita_pago.sCasoNumero,
                    /*7*/        Obj_cita_pago.sFechadiferencia,
                    /*8*/        Obj_cita_pago.sFechaLimite,
                    /*9*/        Obj_cita_pago.sInteresadoNombre,
                    /*10*/       Obj_cita_pago.sSubTipoSolicitudDescripcion,
                    /*11*/       Obj_cita_pago.sInvento,
                    /*12*/       Obj_cita_pago.sCasoNumeroExpedienteLargo,
                    /*13*/       Obj_cita_pago.sCasoFechaVigencia,
                    /*14*/       Obj_cita_pago.sClienteNombre,
                    /*15*/       Obj_cita_pago.sCasoFechaIni,
                    /*16*/       Obj_cita_pago.sTipoPlazoDescrip,
                    /*17*/       Obj_cita_pago.sCasoFechaFin,
                    /*18*/       "",
                    /*19*/       Obj_cita_pago.sDocumentoFechaRecepcion,
                    /*20*/       Obj_cita_pago.sDocumentoFechaRecepcion2meses,
                    /*21*/       Obj_cita_pago.sDocumentoFechaRecepcion4meses,
                    /*22*/       Obj_cita_pago.sanualidades,
                    /*23*/       Obj_cita_pago.sTipoSolicitudDescrip,
                    /*24*/       Obj_cita_pago.sPaisNombre,
                    /*25*/       Obj_cita_pago.sCasoFechaRecepcion,
                    /*26*/       Obj_cita_pago.sCasoFechaFilingCliente,
                    /*27*/       Obj_cita_pago.sDocumentoFecha,
                    /*28*/       Obj_cita_pago.sReferenciaNombre,
                    /*29*/       Obj_cita_pago.sCasoProductosClase,
                    /*30*/       Obj_cita_pago.sEstatusCasoId,
                    /*31*/       Obj_cita_pago.sEstatusCasoDescrip,
                    /*32*/       "",
                    /*33*/       Obj_cita_pago.stipoplazoid,
                    /*34*/       Obj_cita_pago.sDocumentoFechaVencimiento,
                    /*35*/       Obj_cita_pago.sDocumentoId,
                    /*36*/       Obj_cita_pago.sEstatusPlazoId,
                    /*37*/       Obj_cita_pago.sEstatusPlazoDescrip,
                    /*38*/       Obj_cita_pago.sPlazoFechaAtencion,
                    /*39*/       Obj_cita_pago.sContactoNombre,
                    /*40*/       Obj_cita_pago.sContactoEmail,
                    /*41*/       Obj_cita_pago.sIdiomaOriginalID,
                    /*42*/       Obj_cita_pago.sIdiomaId,
                    /*43*/       Obj_cita_pago.sIdiomaClave,
                    /*44*/       Obj_cita_pago.sSubject,
                    /*45*/       Obj_cita_pago.sTipoSolicitudId);

                }
                lipiafechas(datagrid_cita_pago);
                AdjustColumnOrder_CAP();
                tbCountcitaapago.Text = contador + "";
                labelLoadingcitaapago.Text = "";
            }
            else
            {
                labelLoadingcitaapago.Text = "";
            }
            //labelLoadingcitaapago.Text = "Cargando registros ...";
            //tbEnviadoscitapago.Text = "";
            //tbactualizadoscitapago.Text = "";
            ////bool bSeleccionar = true;
            //MySqlDataReader respuestastringinsert;
            //int conuntpatentes = 0;
            //try
            //{
            //    ////codigo para ordenar inicio
            //    ///*Obtenemos los campos para el orden de la consulta */
            //    //int count_orden = 0;
            //    //conect con_citapago_orden = new conect_robot();
            //    //MySqlDataReader resp_consulta = con_citapago_orden.getdatareader("select * from  jobconfig.orden_vistas_robot order by orden asc;");
            //    //String[] sArraycampos = new String [100];
            //    //while (resp_consulta.Read())
            //    //{
            //    //    String sCampo = validareader("campo", "campo", resp_consulta);
            //    //    String sTitulo = validareader("titulo", "titulo", resp_consulta);
            //    //    String sorden = validareader("orden", "orden", resp_consulta);
            //    //    String shabilitado = validareader("habilitado", "habilitado", resp_consulta);
            //    //    //.Dispose();
            //    //    if (count_orden != 1000)
            //    //    {
            //    //        int iResult = 0;
            //    //        if (sleccionar_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = sleccionar_c_pago_G.Index;
            //    //        }
            //    //        if (ultimocorreoenviado_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = ultimocorreoenviado_c_pago_G.Index;
            //    //        }
            //    //        if (cooreos_enviados_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = cooreos_enviados_c_pago_G.Index;
            //    //        }
            //    //        if (plazoid_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = plazoid_c_pago_G.Index;
            //    //        }
            //    //        if (Casoid_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = Casoid_c_pago_G.Index;
            //    //        }
            //    //        if (CasoNumero_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = CasoNumero_c_pago_G.Index;
            //    //        }
            //    //        if (CCasonumconcedida.Text == sTitulo)
            //    //        {
            //    //            iResult = CCasonumconcedida.Index;
            //    //        }
            //    //        if (documentoid_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = documentoid_c_pago_G.Index;
            //    //        }
            //    //        if (tipoplazodescrip_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = tipoplazodescrip_c_pago_G.Index;
            //    //        }
            //    //        if (clienteNombre_C_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = clienteNombre_C_pago_G.Index;
            //    //        }
            //    //        if (interesado_nombre_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = interesado_nombre_c_pago_G.Index;
            //    //        }
            //    //        if (tiposolicituddescrip_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = tiposolicituddescrip_c_pago_G.Index;
            //    //        }
            //    //        if (subtiposolicitudDescrip_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = subtiposolicitudDescrip_c_pago_G.Index;
            //    //        }
            //    //        if (invento_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = invento_c_pago_G.Index;
            //    //        }
            //    //        if (casoNumeroexpedientelargo_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = casoNumeroexpedientelargo_c_pago_G.Index;
            //    //        }
            //    //        if (casoproductoclase_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = casoproductoclase_c_pago_G.Index;
            //    //        }
            //    //        if (ReferenciaNombre_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = ReferenciaNombre_c_pago_G.Index;
            //    //        }
            //    //        if (casoFechaVigencia_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = casoFechaVigencia_c_pago_G.Index;
            //    //        }
            //    //        if (Casofechainicio_C_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = Casofechainicio_C_pago_G.Index;
            //    //        }
            //    //        if (casofechafin_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = casofechafin_c_pago_G.Index;
            //    //        }
            //    //        if (diasproximosemail_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = diasproximosemail_c_pago_G.Index;
            //    //        }
            //    //        if (fechaproximoemail_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = fechaproximoemail_c_pago_G.Index;
            //    //        }
            //    //        if (docuemtnosfecharecepcion_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = docuemtnosfecharecepcion_c_pago_G.Index;
            //    //        }
            //    //        if (Docuemntofecharecepcion2meses_c_pagp_G.Text == sTitulo)
            //    //        {
            //    //            iResult = Docuemntofecharecepcion2meses_c_pagp_G.Index;
            //    //        }
            //    //        if (documentofecharecepcion4mesesc_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = documentofecharecepcion4mesesc_pago_G.Index;
            //    //        }
            //    //        if (anualidades_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = anualidades_c_pago_G.Index;
            //    //        }
            //    //        if (paisnombre_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = paisnombre_c_pago_G.Index;
            //    //        }
            //    //        if (casofecharecepcion_C_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = casofecharecepcion_C_pago_G.Index;
            //    //        }
            //    //        if (casofechafillingcliente_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = casofechafillingcliente_c_pago_G.Index;
            //    //        }
            //    //        if (docuemntofecha_C_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = docuemntofecha_C_pago_G.Index;
            //    //        }
            //    //        if (documentofechavencimiento_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = documentofechavencimiento_c_pago_G.Index;
            //    //        }
            //    //        if (estatus_caso_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = estatus_caso_c_pago_G.Index;
            //    //        }
            //    //        if (tipoplazoid_C_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = tipoplazoid_C_pago_G.Index;
            //    //        }
            //    //        if (estatusplazoid_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = estatusplazoid_c_pago_G.Index;
            //    //        }
            //    //        if (estatusplazodescrip_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = estatusplazodescrip_c_pago_G.Index;
            //    //        }
            //    //        if (plazofechaatencion_C_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = plazofechaatencion_C_pago_G.Index;
            //    //        }
            //    //        if (contactonombre_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = contactonombre_c_pago_G.Index;
            //    //        }
            //    //        if (contactoemail_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = contactoemail_c_pago_G.Index;
            //    //        }
            //    //        if (idiomaoriginaloid_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = idiomaoriginaloid_c_pago_G.Index;
            //    //        }
            //    //        if (idiomaid_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = idiomaid_c_pago_G.Index;
            //    //        }
            //    //        if (idiomaclave_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = idiomaclave_c_pago_G.Index;
            //    //        }
            //    //        if (subject_c_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = subject_c_pago_G.Index;
            //    //        }
            //    //        //int valorkey = lvCitaapago.Columns.IndexOfKey(sTitulo);//nofunciona
            //    //        if(estatuscasodescrip_C_pago_G.Text == sTitulo)
            //    //        {
            //    //            iResult = estatuscasodescrip_C_pago_G.Index;
            //    //        }
            //    //        if (cMesesdep_c_pago.Text == sTitulo)
            //    //        {
            //    //            iResult = cMesesdep_c_pago.DisplayIndex;
            //    //        }

            //    //        //mostramos el titulo para cachar cuales columnas no estaban
            //    //        /*if(iResult==0){
            //    //            MessageBox.Show("El titulo es: "+sTitulo);
            //    //        }*/
            //    //        int iOrden = Int32.Parse(sorden);
            //    //        ColumnHeader column = lvCitaapago.Columns[iResult];
            //    //        if(shabilitado=="0"){
            //    //            column.Dispose();
            //    //        }
            //    //        //column.DisplayIndex = iOrden;
            //    //        sArraycampos[iResult] = sCampo;
            //    //        //sArraycampos[iResult] = sCampo;
            //    //        bSeleccionar = false;
            //    //        //lvCitaapago.Columns[count_orden].Text = sTitulo;
            //    //    }
            //    //    count_orden++;
            //    //}
            //    //resp_consulta.Close();
            //    //con_citapago_orden.Cerrarconexion();
            //    ///*FIN Obtenemos los campos para el orden de la consulta */
            //    ////codigo ordenar FIN
            //    //if (tbFechainiciopatentes.Text != "" && tbFechafinpatentes.Text != "")
            //    //{
            //    //String sFechainicio = tbFechainicio.Text;
            //    //String sFechafin = tbFechafin.Text;
            //    //sFechainicio = cambiaformatofecha(sFechainicio);
            //    //sFechafin = cambiaformatofecha(sFechafin);
            //    tbCountcitaapago.Text = "";
            //    lvCitaapago.Items.Clear();
            //    conect_robot con1 = new conect_robot();
            //    String sPlazoid = "";
            //    String sSend = "";
            //    String sSendnow = "";
            //    //
            //    List<ListViewItem> myItems = new List<ListViewItem>();
            //    //String sFechauno = cambiaformatofecha(tbFechainiciopatentes.Text);
            //    //String sFechados = cambiaformatofecha(tbFechafinpatentes.Text);
            //    //String queryinsert = "SELECT * FROM jobconfig.warning_citapago_135_13_2";
            //    String queryinsert = " use jobconfig; SELECT "+
            //                            " war.PlazoId, " +
            //                            " war.CasoId, " +
            //                            " war.DocumentoId, " +
            //                            " war.TipoPlazoDescrip, " +
            //                            " war.ClienteNombre, " +
            //                            " war.InteresadoNombre, " +
            //                            " war.TipoSolicitudDescrip, " +
            //                            " war.SubTipoSolicitudDescripcion, " +
            //                            " war.CasoNumeroExpedienteLargo, " +
            //                            " war.CasoNumero, " +
            //                            " war.ReferenciaNombre, " +
            //                            " war.CasoFechaVigencia, " +
            //                            " war.anualidades, " +
            //                            " war.PaisNombre, " +
            //                            " war.CasoFechaRecepcion, " +
            //                            " war.CasoFechaFilingCliente, " +
            //                            " war.CasoNumConcedida, " +
            //                            " war.DocumentoFecha, " +
            //                            " war.DocumentoFechaVencimiento, " +
            //                            " war.EstatusCasoId, " +
            //                            " war.EstatusCasoDescrip, " +
            //                            " war.tipoplazoid, " +
            //                            " war.EstatusPlazoId, " +
            //                            " war.EstatusPlazoDescrip, " +
            //                            " war.PlazoFechaAtencion, " +
            //                            " war.ContactoNombre, " +
            //                            " war.ContactoEmail, " +
            //                            " war.IdiomaOriginalID, " +
            //                            " war.IdiomaId, " +
            //                            " war.IdiomaClave, " +
            //                            " war.Subject, " +
            //                            " war.SendNow, " +
            //                            " war.CasoFechaIni as CasoFechaIni, " +
            //                            " war.CasoFechaFin as CasoFechaFin, " +
            //                            " (TO_DAYS(CURDATE()) - TO_DAYS(GET_FECHAULTIMO(war.CasoId, 'warning_citapago_135_13_2'))) AS diasdiferencia, " +
            //                            " Get_Fechaultimo(war.CasoId, 'warning_citapago_135_13_2') AS `FechaSended`, " +
            //                            " Get_countenviados(war.CasoId, " +
            //                            " 'warning_citapago_135_13_2') AS `numenviados` "+
            //                            "FROM jobconfig.warning_citapago_135_13_2 as war; ";// where CasoFechaVigencia >= '"+sFechauno+"' AND CasoFechaVigencia <= '"+sFechados+"' ;";
            //    //String queryinsert = "SELECT * FROM jobconfig.warning_pagoanualidad_6_33_2 limit 25;";// where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
            //    //String queryinsert = "SELECT * FROM jobconfig.warning_renovacionmarca_20_34_2 where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";

            //    Action act = () =>
            //        {
            //            try
            //            {
            //                respuestastringinsert = con1.getdatareader(queryinsert);
            //                String ruta_log = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\casoskingMail\\";
            //                if (!Directory.Exists(ruta_log))
            //                {
            //                    System.IO.Directory.CreateDirectory(ruta_log);
            //                }
            //                String fechalog = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
            //                StringBuilder sb_log = new StringBuilder();
            //                sb_log.Append(fechalog + ": logmail:" + " Error:antes del query" + "\n");

            //                while (respuestastringinsert.Read())
            //                {
            //                    CheckBox obje = new CheckBox();
            //                    String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
            //                    ListViewItem listaagregar = new ListViewItem("", 0);
            //                    ListViewItem checks = new ListViewItem();
            //                    sb_log.Append(fechalog + ": logmail:" + " Error:dentro del while del query" + "\n");
            //                    int dias = 0;
            //                    if (validareader("diasdiferencia", "CasoId", respuestastringinsert) != "")
            //                    {
            //                        dias = Convert.ToInt32(validareader("diasdiferencia", "CasoId", respuestastringinsert));
            //                    }
            //                    int diasdiferenciasemanas = dias / 7;
            //                    int diasdiferenciames = dias / 30;

            //                    sb_log.Append(fechalog + ": logmail:" + " Error:pasando las diviciones" + "\n");
            //                    //Para warning_documentosprioridad
            //                    listaagregar.SubItems.Add(validareader("FechaSended", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("numenviados", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("PlazoId", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("CasoNumero", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add("" + diasdiferenciasemanas);
            //                    listaagregar.SubItems.Add("" + diasdiferenciames);

            //                    listaagregar.SubItems.Add(validareader("DocumentoId", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("TipoPlazoDescrip", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("ClienteNombre", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("InteresadoNombre", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));

            //                    listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("ReferenciaNombre", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("CasoFechaVigencia", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("CasoFechaIni", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("CasoFechaFin", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));

            //                    listaagregar.SubItems.Add("");
            //                    listaagregar.SubItems.Add("");
            //                    listaagregar.SubItems.Add(validareader("anualidades", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("PaisNombre", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("CasoFechaFilingCliente", "CasoId", respuestastringinsert));

            //                    listaagregar.SubItems.Add(validareader("DocumentoFecha", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("DocumentoFechaVencimiento", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("EstatusCasoId", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("tipoplazoid", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("EstatusPlazoId", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("EstatusPlazoDescrip", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("PlazoFechaAtencion", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("ContactoNombre", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("ContactoEmail", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("IdiomaOriginalID", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("IdiomaId", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("IdiomaClave", "CasoId", respuestastringinsert));
            //                    listaagregar.SubItems.Add(validareader("Subject", "CasoId", respuestastringinsert));
            //                    //String[] SOrdencitapago = {"",//seleccionar
            //                    //                            "FechaSended",
            //                    //                            "numenviados",
            //                    //                            "PlazoId",
            //                    //                            "CasoId",
            //                    //                            "CasoNumero",
            //                    //                            "",//diasdiferenciasemanas
            //                    //                            "",//diasdiferenciames
            //                    //                            "DocumentoId",
            //                    //                            "TipoPlazoDescrip",
            //                    //                            "ClienteNombre",
            //                    //                            "InteresadoNombre",
            //                    //                            "TipoSolicitudDescrip",
            //                    //                            "SubTipoSolicitudDescripcion",
            //                    //                            "Invento",
            //                    //                            "CasoNumeroExpedienteLargo",
            //                    //                            "CasoId",
            //                    //                            "ReferenciaNombre",
            //                    //                            "CasoFechaVigencia",
            //                    //                            "CasoFechaIni",
            //                    //                            "CasoFechaFin",
            //                    //                            "DocumentoFechaRecepcion",
            //                    //                            "DocumentoFechaRecepcion",
            //                    //                            "DocumentoFechaRecepcion",
            //                    //                            "DocumentoFechaRecepcion",//vacío
            //                    //                            "DocumentoFechaRecepcion",//vacío
            //                    //                            "anualidades",
            //                    //                            "PaisNombre",
            //                    //                            "CasoFechaRecepcion",
            //                    //                            "CasoFechaFilingCliente",
            //                    //                            "DocumentoFecha",
            //                    //                            "DocumentoFechaVencimiento",
            //                    //                            "EstatusCasoId",
            //                    //                            "EstatusCasoDescrip",
            //                    //                            "tipoplazoid",
            //                    //                            "EstatusPlazoId",
            //                    //                            "EstatusPlazoDescrip",
            //                    //                            "PlazoFechaAtencion",
            //                    //                            "ContactoNombre",
            //                    //                            "ContactoEmail",
            //                    //                            "IdiomaOriginalID",
            //                    //                            "IdiomaId",
            //                    //                            "IdiomaClave",
            //                    //                            "Subject"};
            //                    //ListViewItem listaagregar_nueva = new ListViewItem("", 0);
            //                    /*listaagregar.SubItems.Add(validareader("SendNow", "CasoId", respuestastringinsert));*/
            //                    //for (int y = 0; y < count_orden; y++)
            //                    //{
            //                    //    if(y!=0){
            //                    //        if (sArraycampos[y]!=null)
            //                    //        {
            //                    //            listaagregar_nueva.SubItems.Add(validareader(sArraycampos[y], "CasoId", respuestastringinsert));
            //                    //        }

            //                    //    }
            //                    //}
            //                    myItems.Add(listaagregar);
            //                    //lwpatentetes.Items.Add(listaagregar);
            //                    //lwpatentetes.FullRowSelect = true;
            //                    conuntpatentes++;
            //                }
            //                sb_log.Append(fechalog + ": logmail:" + " Error:fuera del while" + "\n");
            //                respuestastringinsert.Close();
            //                con1.Cerrarconexion();

            //                System.IO.File.AppendAllText(ruta_log + "sistema_casosking.log", sb_log.ToString());
            //                sb_log.Clear();
            //            }catch(Exception E){
            //                String ruta_log = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\casoskingMail\\";
            //                if (!Directory.Exists(ruta_log))
            //                {
            //                    System.IO.Directory.CreateDirectory(ruta_log);
            //                }
            //                String fechalog = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
            //                StringBuilder sb_log = new StringBuilder();
            //                sb_log.Append(fechalog + ": logmail:" + " Error:" + E + "\n");
            //                System.IO.File.AppendAllText(ruta_log + "sistema_casosking.log", sb_log.ToString());
            //                sb_log.Clear();
            //            }
            //        };
            //    using (Waitforcases form = new Waitforcases(act))
            //    {
            //        form.ShowDialog();
            //    }
            //    for (int x = 0; x < myItems.Count; x++)
            //    {
            //        lvCitaapago.Items.Add(myItems[x]);
            //    }
            //    labelLoadingcitaapago.Text = "";
            //    tbCountcitaapago.Text = conuntpatentes + "";

            //    ordenandocolumns();
            //    //}
            //    //else{
            //    //MessageBox.Show("Debe ingresar fechas para poder consultar");
            //    //}
            //}
            //catch (Exception E)
            //{
            //    labelLoadingcitaapago.Text = "";
            //    tbCountcitaapago.Text = conuntpatentes + "";
            //    //respuestastringinsert.Close();
            //    String ruta_log = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\casoskingMail\\";
            //    if (!Directory.Exists(ruta_log))
            //    {
            //        System.IO.Directory.CreateDirectory(ruta_log);
            //    }
            //    String fechalog = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
            //    StringBuilder sb_log = new StringBuilder();
            //    sb_log.Append(fechalog + ": logmail:" + " Error:" + E + "\n");
            //    System.IO.File.AppendAllText(ruta_log + "sistema_casosking.log", sb_log.ToString());
            //    sb_log.Clear();
            //}
        }


        private void AdjustColumnOrder_CAP()
        {
            datagrid_cita_pago.Columns["CAP_casoid"].DisplayIndex = 0;
            datagrid_cita_pago.Columns["CAP_seleccionar"].DisplayIndex = 1;
            datagrid_cita_pago.Columns["CAP_Ultimi_correo"].DisplayIndex = 2;
            datagrid_cita_pago.Columns["CAP_Correos_enviados"].DisplayIndex = 3;
            datagrid_cita_pago.Columns["CAP_plazoid"].DisplayIndex = 4;
            datagrid_cita_pago.Columns["CAP_casoid_view"].DisplayIndex = 5;
            datagrid_cita_pago.Columns["CAP_casonumero"].DisplayIndex = 6;
            datagrid_cita_pago.Columns["CAP_fecha_diferencia"].DisplayIndex = 7;
            datagrid_cita_pago.Columns["CAP_fecha_limite"].DisplayIndex = 8;
            datagrid_cita_pago.Columns["CAP_interesado_nombre"].DisplayIndex = 9;
            datagrid_cita_pago.Columns["CAP_subtiposoldesc"].DisplayIndex = 10;
            datagrid_cita_pago.Columns["CAP_invento"].DisplayIndex = 11;
            datagrid_cita_pago.Columns["CAP_nexp"].DisplayIndex = 12;
            datagrid_cita_pago.Columns["CAP_casofecahvigencia"].DisplayIndex = 13;
            datagrid_cita_pago.Columns["CAP_clientenombre"].DisplayIndex = 14;
            datagrid_cita_pago.Columns["CAP_casofecha_inicio"].DisplayIndex = 15;
            datagrid_cita_pago.Columns["CAP_tipoplazodescrip"].DisplayIndex = 16;
            datagrid_cita_pago.Columns["CAP_casofecha_fin"].DisplayIndex = 17;
            datagrid_cita_pago.Columns["CAP_fechaproximo_email"].DisplayIndex = 18;
            datagrid_cita_pago.Columns["CAP_documento_fecha_recepcion"].DisplayIndex = 19;
            datagrid_cita_pago.Columns["CAP_documento_fecha_recepcion_2"].DisplayIndex = 20;
            datagrid_cita_pago.Columns["CAP_documento_fecha_recepcion_4"].DisplayIndex = 21;
            datagrid_cita_pago.Columns["CAP_anualidades"].DisplayIndex = 22;
            datagrid_cita_pago.Columns["CAP_tiposoldescrip"].DisplayIndex = 23;
            datagrid_cita_pago.Columns["CAP_paisnombre"].DisplayIndex = 24;
            datagrid_cita_pago.Columns["CAP_casofecha_recepcion"].DisplayIndex = 25;
            datagrid_cita_pago.Columns["CAP_casofecha_filingcliente"].DisplayIndex = 26;
            datagrid_cita_pago.Columns["CAP_docuemntofecha"].DisplayIndex = 27;
            datagrid_cita_pago.Columns["CAP_referencianombre"].DisplayIndex = 28;
            datagrid_cita_pago.Columns["CAP_clase"].DisplayIndex = 29;
            datagrid_cita_pago.Columns["CAP_estatudcaso"].DisplayIndex = 30;
            datagrid_cita_pago.Columns["CAP_estatuscaso_decrip"].DisplayIndex = 31;
            datagrid_cita_pago.Columns["CAP_diasproximo_email"].DisplayIndex = 32;
            datagrid_cita_pago.Columns["CAP_tipoplazoid"].DisplayIndex = 33;
            datagrid_cita_pago.Columns["CAP_documentofecha_vencimiento"].DisplayIndex = 34;
            datagrid_cita_pago.Columns["CAP_documentoid"].DisplayIndex = 35;
            datagrid_cita_pago.Columns["CAP_estatusplazoid"].DisplayIndex = 36;
            datagrid_cita_pago.Columns["CAP_estatusplazo_descrip"].DisplayIndex = 37;
            datagrid_cita_pago.Columns["CAP_plazofecha_atencion"].DisplayIndex = 38;
            datagrid_cita_pago.Columns["CAP_contactonombre"].DisplayIndex = 39;
            datagrid_cita_pago.Columns["CAP_contactoemail"].DisplayIndex = 40;
            datagrid_cita_pago.Columns["CAP_idiomaoriginalid"].DisplayIndex = 41;
            datagrid_cita_pago.Columns["CAP_idiomaid"].DisplayIndex = 42;
            datagrid_cita_pago.Columns["CAP_idiomaclave"].DisplayIndex = 43;
            datagrid_cita_pago.Columns["CAP_subject"].DisplayIndex = 44;


        }

        private void button23_Click(object sender, EventArgs e)
        {
            try
            {
                if (cbActualizacitaapagoprueba.Checked && tbCorreocitaapago.Text == "")
                {
                    MessageBox.Show("Para actualizar un caso de prueba debe ingresar un correo de prueba.");
                    return;
                }
                //cbActualizacitaapagoprueba
                //contamos el numero de marcas seleccionadas
                int contador = 0;
                for (int z = 0; z < datagrid_cita_pago.Rows.Count; z++)
                {
                    bool valor = (bool)datagrid_cita_pago.Rows[z].Cells[1].Value;
                    if (valor)
                    {
                        contador++;
                    }
                }
                //hacemos una confimacion para saber si realmente quiere enviar al numero de marcas seleccionadas
                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + " correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;
                    //definimos la prueba como falso a menos de que tenga capturado el correo de prueba
                    Boolean bCorreodepeuba = false;
                    if (tbCorreocitaapago.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//bandera para no mandar copias de correo
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbCorreocitaapago.Text);

                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }

                    if (cbActualizacitaapagoprueba.Checked && tbCorreocitaapago.Text != "")
                    {//si esta checado el checbox de prueba actualizamos 
                        oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + "correos seleccionados a: " + tbCorreocitaapago.Text + " y actualizar" +
                                                    "en el sistema casos king?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                        if (oDlgRes == DialogResult.Yes)
                        {
                            //se enviara el correo de prueba 
                            bCorreodepeuba = false;
                        }
                        else
                        {//salimos del caso
                            return;
                        }

                    }

                    for (int y = 0; y < datagrid_cita_pago.Rows.Count; y++)
                    {
                        bool valor = (bool)datagrid_cita_pago.Rows[y].Cells[1].Value;
                        if (valor)
                        {
                            //obtenemos el objeto de marcasin novedad seleccionada del datagridview por medio de la busqueda de su casoid
                            String scasoid = datagrid_cita_pago.Rows[y].Cells[0].Value.ToString();
                            objMP_seleccionada obj_citapagoseleccionada = citapago.Find(x => x.sCasoId == scasoid);



                            //#CasoId 4
                            //#ContactoEmail 38
                            //#IdiomaClave 41
                            //#Subject 42
                            String sDays = "-10000";
                            String sTipoPlazoId = obj_citapagoseleccionada.stipoplazoid;
                            String sPlazoId = obj_citapagoseleccionada.sPlazoId;
                            String sEstatusPlazoId = obj_citapagoseleccionada.sEstatusPlazoId;
                            String sUID_Jobconfig = "";
                            String sCasoId = obj_citapagoseleccionada.sCasoId;
                            String sTiposolicitudid = obj_citapagoseleccionada.sTipoSolicitudId;
                            String sDocumentoid = obj_citapagoseleccionada.sDocumentoId;
                            String sCasoNumero = obj_citapagoseleccionada.sCasoNumero;
                            String sContactoEmail = obj_citapagoseleccionada.sContactoEmail;// "eramiref92@gmail.com";//´Para pruebas
                            String sIdiomaClave = obj_citapagoseleccionada.sIdiomaClave;
                            String sSubject = obj_citapagoseleccionada.sSubject;
                            int REC = 0;// Get_Rec(Convert.ToInt32(sPlazoId));
                            //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);
                            /*Aquí tomamos el valor del los rtBodymessage_patentes para Patentes ya que si lo hacemos adelante estária fuera de contexto*/
                            sGlobalSmtpCC = rtBodymessage_patentes.Text;//para patentes
                            Action act = () =>
                            {
                                //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                                //por lo que generamos el siguiente query
                                conect_robot con = new conect_robot();
                                String datosconectjobconfig = con.getdatavalues();
                                //String sQuerygetUidjobconfig = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
                                //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
                                String sUID_JobConfig = "653071e9-ceaa-11e8-869b-000c291862e7";
                                String FunctionName = "Get_Email_CitaPago_135_13_2";
                                String sViewName = "warning_citaapago_erf_2022";
                                //while (resps_UIDJobconfig.Read())
                                //{
                                //    sUID_JobConfig = validareader("UID_JobConfig", "UID_JobConfig", resps_UIDJobconfig);
                                //    FunctionName = validareader("FunctionName", "UID_JobConfig", resps_UIDJobconfig);
                                //    sViewName = validareader("ViewName", "UID_JobConfig", resps_UIDJobconfig);
                                //}
                                conect_robot valores = new conect_robot();
                                String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);


                                //resps_UIDJobconfig.Close();
                                String sCorreodestino = "";

                                if (tbCorreocitaapago.Text!="")
                                {
                                    sCorreodestino = tbCorreocitaapago.Text;//Prueba de correo

                                }
                                else
                                {
                                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                                }
                                String[] correos = sCorreodestino.Split(',');
                                //if (correos.Length > 1)
                                //{
                                //    sCorreodestino = correos[0];
                                //    for (int z = 1; z < correos.Length; z++)
                                //    {
                                //        sGlobalSmtpCC += "," + correos[z];
                                //    }

                                //}
                                
                                //String sAsunto = listView1.CheckedItems[x].SubItems[42].Text;
                                //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                                iContadorcorreossend += iresult;
                                //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
                                if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                                {
                                    int iCasoid = Int32.Parse(sCasoId);
                                    int iTiposolicitudoid = Int32.Parse(sTiposolicitudid);
                                    int isDocumentoid;
                                    if (sDocumentoid == "")
                                    {
                                        isDocumentoid = 0;
                                    }
                                    else
                                    {
                                        isDocumentoid = Int32.Parse(sDocumentoid);
                                    }

                                    int iDays = Int32.Parse("-10000");
                                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                    int iPlazoId = Int32.Parse(sPlazoId);
                                    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudoid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                                }

                            };
                            using (Waitforsendmail obj = new Waitforsendmail(act))
                            {
                                obj.ShowDialog();
                            }
                            tbEnviadoscitapago.Text = iContadorcorreossend + "";
                            tbactualizadoscitapago.Text = iContadorcorreosupdates + "";
                        }
                    }

                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates);// + iContadorcorreosupdates + " Registros en la base de datos King");

                }
            }
            catch (Exception ex)
            {

            }
            //try { 
            //    //tbCorreocitaapago
            //    //Aquí enviaremos los seleccionados
            //    int iNumerodechecados = lvCitaapago.CheckedItems.Count;
            //    DialogResult oDlgRes;
            //    oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + iNumerodechecados + "correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
            //    if (oDlgRes == DialogResult.Yes)
            //    {
            //        int iContadorcorreossend = 0;
            //        int iContadorcorreosupdates = 0;
            //        Boolean bCorreodepeuba = false;
            //        if (tbCorreocitaapago.Text != "")
            //        {
            //            bCorreodepeuba = true;
            //            bPruebadecorreo = true;
            //            MessageBox.Show("Se enviarán los correos seleccionados a:" + tbCorreocitaapago.Text);
            //        }
            //        else
            //        {
            //            bPruebadecorreo = false;
            //        }
            //        for (int x = 0; x < iNumerodechecados; x++)
            //        {
            //            //#CasoId 4
            //            //#ContactoEmail 38
            //            //#IdiomaClave 41
            //            //#Subject 42

            //            String sDays = "-10000";
            //            String sTipoPlazoId = lvCitaapago.CheckedItems[x].SubItems[34].Text;//
            //            String sPlazoId = lvCitaapago.CheckedItems[x].SubItems[3].Text;
            //            String sEstatusPlazoId = lvCitaapago.CheckedItems[x].SubItems[35].Text;
            //            String sUID_Jobconfig = "";
            //            String sCasoId = lvCitaapago.CheckedItems[x].SubItems[4].Text;
            //            String sDocumentoid = lvCitaapago.CheckedItems[x].SubItems[8].Text;
            //            String sCasoNumero = lvCitaapago.CheckedItems[x].SubItems[5].Text;
            //            String sContactoEmail = lvCitaapago.CheckedItems[x].SubItems[39].Text;
            //            String sIdiomaClave = lvCitaapago.CheckedItems[x].SubItems[42].Text;
            //            String sSubject = lvCitaapago.CheckedItems[x].SubItems[43].Text;


            //            String sTipoPlazoId_c_pago_G = lvCitaapago.CheckedItems[x].SubItems[tipoplazoid_C_pago_G.Index].Text;
            //            String sPlazoId_c_pago_G = lvCitaapago.CheckedItems[x].SubItems[plazoid_c_pago_G.Index].Text;
            //            String sEstatusPlazoId_c_pago_G = lvCitaapago.CheckedItems[x].SubItems[estatusplazoid_c_pago_G.Index].Text;
            //            String sCasoId_c_pago_G = lvCitaapago.CheckedItems[x].SubItems[Casoid_c_pago_G.Index].Text;
            //            String sDocumentoid_c_pago_G = lvCitaapago.CheckedItems[x].SubItems[documentoid_c_pago_G.Index].Text;
            //            String sCasoNumero_c_pago_G = lvCitaapago.CheckedItems[x].SubItems[CasoNumero_c_pago_G.Index].Text;
            //            String sContactoEmail_c_pago_G = lvCitaapago.CheckedItems[x].SubItems[contactoemail_c_pago_G.Index].Text;
            //            String sIdiomaClave_c_pago_G = lvCitaapago.CheckedItems[x].SubItems[idiomaclave_c_pago_G.Index].Text;
            //            String sSubject_c_pago_G = lvCitaapago.CheckedItems[x].SubItems[subject_c_pago_G.Index].Text;

            //            String ruta_log = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\casoskingMail\\";
            //            if (!Directory.Exists(ruta_log))
            //            {
            //                System.IO.Directory.CreateDirectory(ruta_log);
            //            }
            //            String fechalog = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
            //            StringBuilder sb_log = new StringBuilder();
            //            sb_log.Append(fechalog + ": sTipoPlazoId: " + sTipoPlazoId+" Error:" + "\n");
            //            sb_log.Append(fechalog + ": sPlazoId:" +sPlazoId +" Error:" + "\n");
            //            sb_log.Append(fechalog + ": sEstatusPlazoId:" +sEstatusPlazoId+ " Error:" + "\n");
            //            sb_log.Append(fechalog + ": sCasoId:" + sCasoId+" Error:" + "\n");
            //            sb_log.Append(fechalog + ": sDocumentoid:" + sDocumentoid+" Error:" + "\n");
            //            sb_log.Append(fechalog + ": sCasoNumero:" + sCasoNumero+" Error:" + "\n");
            //            sb_log.Append(fechalog + ": sContactoEmail:" +sContactoEmail+ " Error:" + "\n");
            //            sb_log.Append(fechalog + ": sIdiomaClave:" +sIdiomaClave+ " Error:" + "\n");
            //            sb_log.Append(fechalog + ": sSubject:" + sSubject+" Error:" + "\n");

            //            int REC = Get_Rec(Convert.ToInt32(sPlazoId));

            //            //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);
            //            //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
            //            //por lo que generamos el siguiente query
            //            conect_robot con = new conect_robot();
            //            String datosconectjobconfig = con.getdatavalues();
            //            //String  = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
            //            //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
            //            String sUID_JobConfig = "653071e9-ceaa-11e8-869b-000c291862e7";
            //            String FunctionName = "Get_Email_CitaPago_135_13_2";
            //            String sViewName = "warning_citapago_135_13_2";
            //            //while (resps_UIDJobconfig.Read())
            //            //{
            //            //    sUID_JobConfig = validareader("UID_JobConfig", "UID_JobConfig", resps_UIDJobconfig);
            //            //    FunctionName = validareader("FunctionName", "UID_JobConfig", resps_UIDJobconfig);
            //            //    sViewName = validareader("ViewName", "UID_JobConfig", resps_UIDJobconfig);
            //            //}
            //            String copiacorreocliente = "";
            //            Action act = () =>
            //                {
            //                    conect_robot valores = new conect_robot();
            //                    String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

            //                    //resps_UIDJobconfig.Close();
            //                    String sCorreodestino = "";

            //                    if (bCorreodepeuba)
            //                    {
            //                        sCorreodestino = tbCorreocitaapago.Text;//Prueba de correo
            //                    }
            //                    else
            //                    {
            //                        sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
            //                    }
            //                    String[] correos = sCorreodestino.Split(',');
            //                    if (correos.Length > 1)
            //                    {
            //                        sCorreodestino = correos[0];
            //                        for (int z = 1; z < correos.Length; z++)
            //                        {
            //                            copiacorreocliente += correos[z] + ",";
            //                        }
            //                    }
            //                    //copiacorreocliente = "";
            //                    //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
            //                    sb_log.Append(fechalog + ": sCasoId:" + sCasoId + " Error:" + "\n");
            //                    sb_log.Append(fechalog + ": copiacorreocliente:" + copiacorreocliente + " Error:" + "\n");
            //                    sb_log.Append(fechalog + ": sBodymail:" + sBodymail + " Error:" + "\n");
            //                    sb_log.Append(fechalog + ": sSubject:" + sSubject + " Error:" + "\n");
            //                    sb_log.Append(fechalog + ": sCorreodestino:" + sCorreodestino + " Error:" + "\n");
            //                    int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, copiacorreocliente);
            //                    sb_log.Append(fechalog + ": iresult:" + iresult + " Error:" + "\n");
            //                    iContadorcorreossend += iresult;
            //                    //bCorreodepeuba = false;//solo para probar IMPORTANTE QUITAR
            //                    if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
            //                    {
            //                        int iCasoid = Int32.Parse(sCasoId);
            //                        int isDocumentoid;
            //                        if (sDocumentoid == "")
            //                        {
            //                            isDocumentoid = 0;
            //                        }
            //                        else
            //                        {
            //                            isDocumentoid = Int32.Parse(sDocumentoid);
            //                        }

            //                        int iDays = Int32.Parse("-10000");
            //                        int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
            //                        int iPlazoId = Int32.Parse(sPlazoId);
            //                        iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
            //                    }
            //                };
            //            using (Waitforsendmail obj = new Waitforsendmail(act))
            //            {
            //                obj.ShowDialog();
            //            }
            //            tbEnviadoscitapago.Text = iContadorcorreossend + "";
            //            tbactualizadoscitapago.Text = iContadorcorreosupdates + "";
            //            System.IO.File.AppendAllText(ruta_log + "sistema_casosking.log", sb_log.ToString());
            //            sb_log.Clear();
            //        }
            //        MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates + " Registros en la base de datos King");
            //    }
            //    else
            //    {
            //        //no hacemos nada por que cancelo
            //    }	

            //}catch(Exception E){
            //    String ruta_log = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\casoskingMail\\";
            //    if (!Directory.Exists(ruta_log))
            //    {
            //        System.IO.Directory.CreateDirectory(ruta_log);
            //    }
            //    String fechalog = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
            //    StringBuilder sb_log = new StringBuilder();
            //    sb_log.Append(fechalog + ": logmail:" + " Error:" + E + "\n");
            //    System.IO.File.AppendAllText(ruta_log + "sistema_casosking.log", sb_log.ToString());
            //    sb_log.Clear();
            //}
        }

        private void button18_Click(object sender, EventArgs e)
        {

            int iNumeroreg = lvdocprioridad.Items.Count;
            for (int x = 0; x < iNumeroreg; x++)
            {
                lvdocprioridad.Items[x].Checked = true;
            }
        }

        private void button17_Click(object sender, EventArgs e)
        {
            int iNumeroreg = lvdocprioridad.Items.Count;
            for (int x = 0; x < iNumeroreg; x++)
            {
                lvdocprioridad.Items[x].Checked = false;
            }
        }

        private void button22_Click(object sender, EventArgs e)
        {

            foreach (DataGridViewRow row in datagrid_cita_pago.Rows)
            {

                row.Cells["CAP_seleccionar"].Value = true;

            }
        }

        private void button21_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_cita_pago.Rows)
            {

                row.Cells["CAP_seleccionar"].Value = false;

            }
        }

        private void button42_Click(object sender, EventArgs e)
        {
            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna

                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos ENviados";
                workSheet.Cells[3, "D"] = "Plazoid";
                workSheet.Cells[3, "E"] = "Casoid";
                workSheet.Cells[3, "F"] = "Casonumero";
                workSheet.Cells[3, "G"] = "Semanas";
                workSheet.Cells[3, "H"] = "Meses";
                workSheet.Cells[3, "I"] = "InteresadoNombre";
                workSheet.Cells[3, "J"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "K"] = "Invento";
                workSheet.Cells[3, "L"] = "No. de Expediente";
                workSheet.Cells[3, "M"] = "CasoFechaVigencia";
                workSheet.Cells[3, "N"] = "Cliente Nombre";
                workSheet.Cells[3, "O"] = "CasoFechaInicio";
                workSheet.Cells[3, "P"] = "TipoPlazodescrip";
                workSheet.Cells[3, "Q"] = "CasoFechaFin";
                workSheet.Cells[3, "R"] = "FechaProximoEmail";
                workSheet.Cells[3, "S"] = "DocumentoFecharecepción";
                workSheet.Cells[3, "T"] = "DocumentoFecharecepción 2 meses";
                workSheet.Cells[3, "U"] = "DocumentoFecharecepción 4 meses";
                workSheet.Cells[3, "V"] = "Anualidades";
                workSheet.Cells[3, "W"] = "Tiposolicituddescrip";
                workSheet.Cells[3, "X"] = "Pais Nombre";
                workSheet.Cells[3, "Y"] = "FechaPresentación";
                workSheet.Cells[3, "Z"] = "CasoFechafillingcliente";
                workSheet.Cells[3, "AA"] = "DocumentoFecha";
                workSheet.Cells[3, "AB"] = "ReferenciaCliente";
                workSheet.Cells[3, "AC"] = "Clase";
                workSheet.Cells[3, "AD"] = "Estatuscaso";
                workSheet.Cells[3, "AE"] = "EstatusCasoDescrip";
                workSheet.Cells[3, "AF"] = "DiasProximoEmail";
                workSheet.Cells[3, "AG"] = "Tipoplazoid";
                workSheet.Cells[3, "AH"] = "DocumentoFechavencimiento";
                workSheet.Cells[3, "AI"] = "Documentoid";
                workSheet.Cells[3, "AJ"] = "EstatusPlazoid";
                workSheet.Cells[3, "AK"] = "EstatusPlazoDescrip";
                workSheet.Cells[3, "AL"] = "PlazoFechaatención";
                workSheet.Cells[3, "AM"] = "ContactoNombre";
                workSheet.Cells[3, "AN"] = "ContactoEmail";
                workSheet.Cells[3, "AO"] = "IdiomaOriginalId";
                workSheet.Cells[3, "AP"] = "Idiomaid";
                workSheet.Cells[3, "AQ"] = "IdiomaClave";
                workSheet.Cells[3, "AR"] = "Subject";

                workSheet.Cells[1, "A"] = "Cita a Pago";
                workSheet.Range["A1", "F1"].Merge();
                workSheet.Range["A1", "F1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "F1"].Font.Bold = true;
                workSheet.Range["A1", "F1"].Font.Size = 20;
                var row = 3;


                for (int i = 0; i < datagrid_cita_pago.Rows.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = datagrid_cita_pago.Rows[i].Cells[1].Value;
                    workSheet.Cells[i + 4, "B"] = datagrid_cita_pago.Rows[i].Cells[2].Value;
                    workSheet.Cells[i + 4, "C"] = datagrid_cita_pago.Rows[i].Cells[3].Value;
                    workSheet.Cells[i + 4, "D"] = datagrid_cita_pago.Rows[i].Cells[4].Value;
                    workSheet.Cells[i + 4, "E"] = datagrid_cita_pago.Rows[i].Cells[5].Value;
                    workSheet.Cells[i + 4, "F"] = datagrid_cita_pago.Rows[i].Cells[6].Value;
                    workSheet.Cells[i + 4, "G"] = datagrid_cita_pago.Rows[i].Cells[7].Value;
                    workSheet.Cells[i + 4, "H"] = datagrid_cita_pago.Rows[i].Cells[8].Value;
                    workSheet.Cells[i + 4, "I"] = datagrid_cita_pago.Rows[i].Cells[9].Value;
                    workSheet.Cells[i + 4, "J"] = datagrid_cita_pago.Rows[i].Cells[10].Value;
                    workSheet.Cells[i + 4, "K"] = datagrid_cita_pago.Rows[i].Cells[11].Value;
                    workSheet.Cells[i + 4, "L"] = datagrid_cita_pago.Rows[i].Cells[12].Value;
                    workSheet.Cells[i + 4, "M"] = datagrid_cita_pago.Rows[i].Cells[13].Value;
                    workSheet.Cells[i + 4, "N"] = datagrid_cita_pago.Rows[i].Cells[14].Value;
                    workSheet.Cells[i + 4, "O"] = datagrid_cita_pago.Rows[i].Cells[15].Value;
                    workSheet.Cells[i + 4, "P"] = datagrid_cita_pago.Rows[i].Cells[16].Value;
                    workSheet.Cells[i + 4, "Q"] = datagrid_cita_pago.Rows[i].Cells[17].Value;
                    workSheet.Cells[i + 4, "R"] = datagrid_cita_pago.Rows[i].Cells[18].Value;
                    workSheet.Cells[i + 4, "S"] = datagrid_cita_pago.Rows[i].Cells[19].Value;
                    workSheet.Cells[i + 4, "T"] = datagrid_cita_pago.Rows[i].Cells[20].Value;
                    workSheet.Cells[i + 4, "U"] = datagrid_cita_pago.Rows[i].Cells[21].Value;
                    workSheet.Cells[i + 4, "V"] = datagrid_cita_pago.Rows[i].Cells[22].Value;
                    workSheet.Cells[i + 4, "W"] = datagrid_cita_pago.Rows[i].Cells[23].Value;
                    workSheet.Cells[i + 4, "X"] = datagrid_cita_pago.Rows[i].Cells[24].Value;
                    workSheet.Cells[i + 4, "Y"] = datagrid_cita_pago.Rows[i].Cells[25].Value;
                    workSheet.Cells[i + 4, "Z"] = datagrid_cita_pago.Rows[i].Cells[26].Value;
                    workSheet.Cells[i + 4, "AA"] = datagrid_cita_pago.Rows[i].Cells[27].Value;
                    workSheet.Cells[i + 4, "AB"] = datagrid_cita_pago.Rows[i].Cells[28].Value;
                    workSheet.Cells[i + 4, "AC"] = datagrid_cita_pago.Rows[i].Cells[29].Value;
                    workSheet.Cells[i + 4, "AD"] = datagrid_cita_pago.Rows[i].Cells[30].Value;
                    workSheet.Cells[i + 4, "AE"] = datagrid_cita_pago.Rows[i].Cells[31].Value;
                    workSheet.Cells[i + 4, "AF"] = datagrid_cita_pago.Rows[i].Cells[32].Value;
                    workSheet.Cells[i + 4, "AG"] = datagrid_cita_pago.Rows[i].Cells[33].Value;
                    workSheet.Cells[i + 4, "AH"] = datagrid_cita_pago.Rows[i].Cells[34].Value;
                    workSheet.Cells[i + 4, "AI"] = datagrid_cita_pago.Rows[i].Cells[35].Value;
                    workSheet.Cells[i + 4, "AJ"] = datagrid_cita_pago.Rows[i].Cells[36].Value;
                    workSheet.Cells[i + 4, "AK"] = datagrid_cita_pago.Rows[i].Cells[37].Value;
                    workSheet.Cells[i + 4, "AL"] = datagrid_cita_pago.Rows[i].Cells[38].Value;
                    workSheet.Cells[i + 4, "AM"] = datagrid_cita_pago.Rows[i].Cells[39].Value;
                    workSheet.Cells[i + 4, "AN"] = datagrid_cita_pago.Rows[i].Cells[40].Value;
                    workSheet.Cells[i + 4, "AO"] = datagrid_cita_pago.Rows[i].Cells[41].Value;
                    workSheet.Cells[i + 4, "AP"] = datagrid_cita_pago.Rows[i].Cells[42].Value;
                    workSheet.Cells[i + 4, "AQ"] = datagrid_cita_pago.Rows[i].Cells[43].Value;
                    workSheet.Cells[i + 4, "AR"] = datagrid_cita_pago.Rows[i].Cells[44].Value;

                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "AR" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
                workSheet.Range["A3", "AR" + (row + 4)].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                workSheet.Range["A3", "AR3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            }
            catch (Exception E)
            {
                //cancelaron la exportacion a excel error
            }
        }

        //private void button45_Click(object sender, EventArgs e)
        //{

        //    int iNumeroreg = lvPruebauso.Items.Count;
        //    for (int x = 0; x < iNumeroreg; x++)
        //    {
        //        lvPruebauso.Items[x].Checked = true;
        //    }
        //}

        //private void button44_Click(object sender, EventArgs e)
        //{
        //    int iNumeroreg = lvPruebauso.Items.Count;
        //    for (int x = 0; x < iNumeroreg; x++)
        //    {
        //        lvPruebauso.Items[x].Checked = false;
        //    }
        //}

        //private void button47_Click(object sender, EventArgs e)
        //{

        //    lpruebaUso.Text = "Cargando registros ...";
        //    System.Threading.Thread.Sleep(1000);
        //    //String sFechainicio = tbFechainicio.Text;
        //    //String sFechafin = tbFechafin.Text;
        //    //sFechainicio = cambiaformatofecha(sFechainicio);
        //    //sFechafin = cambiaformatofecha(sFechafin);

        //    listView1.Items.Clear();
        //    conect_robot con1 = new conect_robot();
        //    String sPlazoid = "";
        //    String sSend = "";
        //    String sSendnow = "";
        //    if (true)//no validamos la fecha a seleccionar
        //    {
        //        //String queryinsert = "SELECT * FROM jobconfig.warning_pagoanualidad_6_33_2 limit 10;";// where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
        //        String queryinsert = " SELECT * FROM jobconfig.warning_pruebauso;";
        //        MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);
        //        tbCountpruebauso.Text = "";
        //        List<ListViewItem> myItems = new List<ListViewItem>();
        //        int contador = 0;
        //        while (respuestastringinsert.Read())
        //        {

        //            //con el casoid obtendremos el valor del xUID_JobConfig para despues traer get body y enviar el mail en el momento con la funcion doble click
        //            String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
        //            String queryselectreviewbycasoid = "select * from jobconfig.job_review where casoid = " + sCasoid;
        //            conect_robot con2 = new conect_robot();
        //            MySqlDataReader respuestasselectbycasoid = con2.getdatareader(queryselectreviewbycasoid);
        //            while (respuestasselectbycasoid.Read())
        //            {
        //                sPlazoid = validareader("ViewName", "CasoId", respuestasselectbycasoid);
        //                sSend = validareader("Send", "CasoId", respuestasselectbycasoid);
        //                sSendnow = validareader("SendNow", "CasoId", respuestasselectbycasoid);
        //            }
        //            respuestasselectbycasoid.Close();
        //            con2.Cerrarconexion();
        //            ListViewItem listaagregar = new ListViewItem("", 0);
        //            ListViewItem checks = new ListViewItem();
        //            //validareader("ClienteId", "ClienteId", respuestastringinsert);//primer parametro es el texto, el segundo parametro es el id o valor y el tercer parametro es el mysqldatareader
        //            //if (sSend == "T")
        //            //{
        //            //    listaagregar.SubItems.Add(sSend);
        //            //}
        //            //else
        //            //{
        //            //    listaagregar.SubItems.Add(sSend);
        //            //}
        //            //listaagregar.SubItems.Add(sSendnow);
        //            //para marcas
        //            listaagregar.Checked = false;
        //            listaagregar.SubItems.Add(validareader("PlazoId", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));

        //            listaagregar.SubItems.Add(validareader("CasoNumero", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoNumConcedida", "CasoId", respuestastringinsert));

        //            listaagregar.SubItems.Add(validareader("DocumentoId", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("TipoPlazoDescrip", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("ClienteNombre", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("InteresadoNombre", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("Marca", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));

        //            listaagregar.SubItems.Add(validareader("CasoProductosClase", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("ReferenciaNombre", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoFechaVigencia", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoFechaIni", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoFechaFin", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion2meses", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion4meses", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add("");
        //            listaagregar.SubItems.Add("");
        //            listaagregar.SubItems.Add(validareader("anualidades", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("PaisNombre", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("CasoFechaFilingCliente", "CasoId", respuestastringinsert));

        //            listaagregar.SubItems.Add(validareader("DocumentoFecha", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("DocumentoFechaVencimiento", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("EstatusCasoId", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("tipoplazoid", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("EstatusPlazoId", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("EstatusPlazoDescrip", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("PlazoFechaAtencion", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("ContactoNombre", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("ContactoEmail", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("IdiomaOriginalID", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("IdiomaId", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("IdiomaClave", "CasoId", respuestastringinsert));
        //            listaagregar.SubItems.Add(validareader("Subject", "CasoId", respuestastringinsert));

        //            myItems.Add(listaagregar);
        //            contador++;
        //        }

        //        for (int x = 0; x < myItems.Count; x++)
        //        {
        //            lvPruebauso.Items.Add(myItems[x]);
        //            lvPruebauso.FullRowSelect = true;
        //        }

        //        tbCountpruebauso.Text = contador + "";
        //        lpruebaUso.Text = "";
        //        respuestastringinsert.Close();
        //        con1.Cerrarconexion();
        //    }
        //    else
        //    {
        //        tbLoading.Text = "";

        //        //debe verificarse que existan las fechas correctas            
        //    }
        //}

        private void button48_Click(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_renovacion_marcaatiempo_viejaley.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                if (datagrid_renovacion_marcaatiempo_viejaley.CurrentRow.Cells[2].Value.ToString() != "")

                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
            //try
            //{
            //    String sCasoid = listView1.SelectedItems[0].SubItems[4].Text;
            //    if (listView1.SelectedItems[0].SubItems[1].Text != "")
            //    {
            //        detalleenvio obj = new detalleenvio(sCasoid);
            //        obj.ShowDialog();
            //    }
            //    else {
            //        MessageBox.Show("No hay historial de correos para étse caso");
            //    }
            //    //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            //}catch(Exception E){
            //    MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            //}

        }

        private void button52_Click(object sender, EventArgs e)
        {

            foreach (DataGridViewRow row in datagrid_declaracion_uso3.Rows)
            {

                row.Cells["DU3_seleccionar"].Value = true;

            }
        }

        private void button51_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_declaracion_uso3.Rows)
            {

                row.Cells["DU3_seleccionar"].Value = false;

            }
        }

        private void button54_Click(object sender, EventArgs e)
        {
            labelDeclaraciodeuso.Text = "Cargando registros ...";
            String sAnodeclaracion = tbDeclaraciondeuso.Text;
            Lvdeclaraciondeuso.Items.Clear();
            conect_robot con1 = new conect_robot();
            String sPlazoid = "";
            String sSend = "";
            String sSendnow = "";
            if (cbMesdeclaracion.Text != "")//no validamos la fecha a seleccionar
            {
                tbDeclaraciondeuso.Text = "";
                List<ListViewItem> myItems = new List<ListViewItem>();
                int contador = 0;
                //String queryinsert = "use jobconfig; SELECT  " +
                //                      " war.PlazoId, " +
                //                      " war.CasoId, " +
                //                      " war.DocumentoId, " +
                //                      " war.TipoPlazoDescrip, " +
                //                      " war.ClienteNombre, " +
                //                      " war.InteresadoNombre, " +
                //                      " war.TipoSolicitudDescrip, " +
                //                      " war.Marca, " +
                //                      " war.SubTipoSolicitudDescripcion, " +
                //                      " war.CasoProductosClase, " +
                //                      " war.CasoNumeroExpedienteLargo, " +
                //                      " war.CasoNumero, " +
                //                      " war.ReferenciaNombre, " +
                //                      " DATE_FORMAT(war.CasoFechaVigencia,'%d-%m-%Y') as CasoFechaVigencia, " +
                //                      " war.anualidades, " +
                //                      " war.PaisNombre, " +
                //                      " DATE_FORMAT(war.CasoFechaRecepcion,'%d-%m-%Y') as CasoFechaRecepcion, " +
                //                      " war.CasoFechaFilingCliente, " +
                //                      " war.CasoNumConcedida, " +
                //                      " war.DocumentoFecha, " +
                //                      " war.DocumentoFechaVencimiento, " +
                //                      " war.EstatusCasoId, " +
                //                      " war.EstatusCasoDescrip, " +
                //                      " war.tipoplazoid, " +
                //                      " war.EstatusPlazoId, " +
                //                      " war.EstatusPlazoDescrip, " +
                //                      " war.PlazoFechaAtencion, " +
                //                      " war.ContactoNombre, " +
                //                      " war.ContactoEmail, " +
                //                      " war.IdiomaOriginalID, " +
                //                      " war.IdiomaId, " +
                //                      " war.IdiomaClave, " +
                //                      " war.Subject, " +
                //                      " war.SendNow, " +
                //                      " DATE_FORMAT(war.CasoFechaIni,'%d-%m-%Y') AS CasoFechaIni, " +
                //                      " DATE_FORMAT(war.CasoFechaInidos,'%d-%m-%Y') AS CasoFechaInidos, " +
                //                      " DATE_FORMAT(Get_Fechaultimo(war.CasoId, 'warning_declaraciondeuso_erf'),'%d-%m-%Y') AS `FechaSended`," +
                //                      "  Get_countenviados(war.CasoId, " +
                //                      "  'warning_declaraciondeuso_erf') AS `numenviados` " +
                //                    " FROM " +
                //                    "     jobconfig.warning_declaraciondeuso_erf as war where" +
                //                    "(curdate() between ((CasoFechaConcesion + interval 3 year)- interval " + cbMesdeclaracion.Text + " month) and ((CasoFechaConcesion + interval 3 year)+ interval 3 month))";// +
                String queryinsert = " use jobconfig; SELECT  " +
                                        "     war.*, " +
                                        
                                        "     DATE_FORMAT(war.CasoFechaVigencia, '%d-%m-%Y') AS CasoFechaVigencia " +
                                        
                                        " FROM " +
                                        "     jobconfig.warning_declaraciondeuso_erf_2022 AS war " +
                                    " WHERE (curdate() between ((CasoFechaConcesion + interval 3 year)- interval " + cbMesdeclaracion.Text + " month) and ((CasoFechaConcesion + interval 3 year)+ interval 3 month))";// +
                if (declaracionuso3 != null)
                {
                    declaracionuso3.Clear();
                }
                datagrid_declaracion_uso3.Rows.Clear();
                Action act = () =>
                {
                    MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);
                    while (respuestastringinsert.Read())
                    {
                        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
                        String sFechaultimoenviado = "";
                        //ListViewItem listaagregar = new ListViewItem("", 0);
                        //listaagregar.SubItems.Add(validareader("FechaSended", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("numenviados", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("PlazoId", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));

                        //listaagregar.SubItems.Add(validareader("CasoNumero", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("CasoNumConcedida", "CasoId", respuestastringinsert));

                        //listaagregar.SubItems.Add(validareader("DocumentoId", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("TipoPlazoDescrip", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("ClienteNombre", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("InteresadoNombre", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("Marca", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));

                        //listaagregar.SubItems.Add(validareader("CasoProductosClase", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("ReferenciaNombre", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("CasoFechaVigencia", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("CasoFechaIni", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("CasoFechaInidos", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion2meses", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion4meses", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add("");
                        //listaagregar.SubItems.Add("");
                        //listaagregar.SubItems.Add(validareader("anualidades", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("PaisNombre", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("CasoFechaFilingCliente", "CasoId", respuestastringinsert));

                        //listaagregar.SubItems.Add(validareader("DocumentoFecha", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("DocumentoFechaVencimiento", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("EstatusCasoId", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("tipoplazoid", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("EstatusPlazoId", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("EstatusPlazoDescrip", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("PlazoFechaAtencion", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("ContactoNombre", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("ContactoEmail", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("IdiomaOriginalID", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("IdiomaId", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("IdiomaClave", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("Subject", "CasoId", respuestastringinsert));
                        try
                        {
                            String sPlazoId = validareader("PlazosId", "PlazosId", respuestastringinsert);
                            String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                            String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);
                            String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                            String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                            String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                            String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                            String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                            String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                            String sMarca = validareader("Marca", "Marca", respuestastringinsert);
                            String sInvento = "";
                            String sFechadiferencia = "";
                            String sFechaLimite = "";
                            String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                            String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                            String sCasoProductosClase = validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                            String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                            String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);
                            String sCasoFechaConcesion = validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);
                            String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                            String sCasoFechaInidos = validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                            String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                            String sDocumentoFechaRecepcion = validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                            String sDocumentoFechaRecepcion2meses = validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                            String sDocumentoFechaRecepcion4meses = validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                            String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                            String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                            String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                            String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                            String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                            String sDocumentoFecha = validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                            String sDocumentoFechaVencimiento = validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                            String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                            String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                            String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                            String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                            String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                            String sPlazoFechaAtencion = validareader("PlazoFechaAtencion", "PlazoFechaAtencion", respuestastringinsert);
                            String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                            String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                            String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                            String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                            String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                            String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                            String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                            String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                            String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);

                            try {
                                sCasoFechaRecepcion = sCasoFechaRecepcion.Substring(0, 10);
                                sCasoFechaFilingCliente = sCasoFechaFilingCliente.Substring(0, 10);
                                sCasoFechaVigencia = sCasoFechaVigencia.Substring(0, 10);
                                sCasoFechaConcesion = sCasoFechaConcesion.Substring(0, 10);
                                sCasoFechaIni = sCasoFechaIni.Substring(0, 10);
                                sCasoFechaInidos = sCasoFechaInidos.Substring(0, 10);
                                sCasoFechaFin = sCasoFechaFin.Substring(0, 10);
                                sDocumentoFechaVencimiento = sDocumentoFechaVencimiento.Substring(0, 10);
                            }
                            catch (Exception exsp) {
                                new filelog("", ""+exsp.Message);
                            }
                            
                            int REC = 0;
                            String sUID_JobConfig = "a8050719-ceab-11e8-869b-000c2918erf9";
                            String FunctionName = "Get_Email_declaracionuso_erf";
                            String sViewName = "warning_declaraciondeuso_erf";

                            //para pruebas agregamos el correo de prueba   y si no comentamos la linea de código
                            //sContactoEmail = "eduarximo@gmail.com; eduardor@dicss.com.mx";

                            DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                            DateTime dFechaLimite = validafechavacia(sFechaLimite);
                            DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                            DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                            DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                            DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                            DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                            DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                            DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                            DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);

                            DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                            DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                            DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                            DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                            DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                            DateTime dFechaSended = validafechavacia(sFechaSended);

                            objMP_seleccionada declaracion_uso3 = new objMP_seleccionada(sPlazoId,
                                                                                         sCasoId,
                                                                                             sDocumentoId,
                                                                                             sTipoPlazoDescrip,
                                                                                             sClienteNombre,
                                                                                             sInteresadoNombre,
                                                                                             sTipoSolicitudDescrip,
                                                                                             sSubTipoSolicitudDescripcion,
                                                                                             sMarca,
                                                                                             sInvento,
                                                                                             sFechadiferencia,
                                                                                             dFechaLimite,
                                                                                             sCasoNumeroExpedienteLargo,
                                                                                             sCasoNumero,
                                                                                             sCasoProductosClase,
                                                                                             sReferenciaNombre,
                                                                                             dCasoFechaConcesion,
                                                                                             dCasoFechaVigencia,
                                                                                             dCasoFechaIni,
                                                                                             dCasoFechaInidos,
                                                                                             dCasoFechaFin,
                                                                                             dDocumentoFechaRecepcion,
                                                                                             dDocumentoFechaRecepcion2meses,
                                                                                             dDocumentoFechaRecepcion4meses,
                                                                                             sanualidades,
                                                                                             sPaisNombre,
                                                                                             dCasoFechaRecepcion,
                                                                                             dCasoFechaFilingCliente,
                                                                                             sCasoNumConcedida,
                                                                                             dDocumentoFecha,
                                                                                             dDocumentoFechaVencimiento,
                                                                                             sEstatusCasoId,
                                                                                             sEstatusCasoDescrip,
                                                                                             stipoplazoid,
                                                                                             sEstatusPlazoId,
                                                                                             sEstatusPlazoDescrip,
                                                                                             dPlazoFechaAtencion,
                                                                                             sContactoNombre,
                                                                                             sContactoEmail,
                                                                                             sIdiomaOriginalID,
                                                                                             sIdiomaId,
                                                                                             sIdiomaClave,
                                                                                             sSubject,
                                                                                             sSendNow,
                                                                                             dFechaSended,
                                                                                             snumenviados,
                                                                                            REC,
                                                                                            tbCorreodepruebas.Text,
                                                                                            sUID_JobConfig,
                                                                                            FunctionName,
                                                                                            sViewName,
                                                                                            sTipoSolicitudId
                                                                                            ); 
                            declaracionuso3.Add(declaracion_uso3);
                        }

                        catch (Exception Ex)
                        {
                            //MessageBox.Show("Mensaje "+Ex.Message);
                        }
                        //myItems.Add(listaagregar);
                        contador++;
                    }
                    respuestastringinsert.Close();
                    con1.Cerrarconexion();
                };
                using (Waitforcases form = new Waitforcases(act))
                {
                    form.ShowDialog();
                }
                //for (int x = 0; x < myItems.Count; x++)
                //{

                //    Lvdeclaraciondeuso.Items.Add(myItems[x]);
                //    Lvdeclaraciondeuso.FullRowSelect = true;
                //}
                foreach (var Obj_declaracion_uso3 in declaracionuso3)
                {



                    /*1*/
                    CheckBox checkboxcell = new CheckBox();

                    datagrid_declaracion_uso3.Rows.Add(Obj_declaracion_uso3.sCasoId, false,
              /*2*/        Obj_declaracion_uso3.sFechaSended,
              /*3*/        Obj_declaracion_uso3.snumenviados,
              /*4*/        Obj_declaracion_uso3.sPlazoId,
              /*5*/        Obj_declaracion_uso3.sCasoId,
              /*6*/        Obj_declaracion_uso3.sCasoNumero,
              /*7*/        Obj_declaracion_uso3.sCasoNumConcedida,//numero de registro
              /*8*/        Obj_declaracion_uso3.sMarca,
              /*9*/        Obj_declaracion_uso3.sTipoPlazoDescrip,
              /*10*/       Obj_declaracion_uso3.sClienteNombre,
              /*11*/       Obj_declaracion_uso3.sInteresadoNombre,
              /*12*/       Obj_declaracion_uso3.sContactoNombre,
              /*13*/       Obj_declaracion_uso3.sContactoEmail, //solicitante 
              /*14*/       Obj_declaracion_uso3.sSubject,
              /*15*/       Obj_declaracion_uso3.sTipoSolicitudDescrip,
              /*16*/       Obj_declaracion_uso3.sSubTipoSolicitudDescripcion,
              /*17*/       Obj_declaracion_uso3.sCasoNumeroExpedienteLargo,//No.expediente
              /*18*/       Obj_declaracion_uso3.sCasoProductosClase,//Clase
              /*19*/       Obj_declaracion_uso3.sReferenciaNombre,//referencia cliente 
              /*20*/       Obj_declaracion_uso3.sCasoFechaRecepcion, //fecha presentacion
              /*21*/       Obj_declaracion_uso3.sCasoFechaConcesion, //fecha concesion
              /*22*/       Obj_declaracion_uso3.sCasoFechaIni, //fecha declaracion 3 años
              /*23*/       Obj_declaracion_uso3.sCasoFechaInidos, //fecha declaracion 6 años
              /*24*/       "",
              /*25*/       "",
              /*26*/       Obj_declaracion_uso3.sDocumentoFechaRecepcion,
              /*27*/       Obj_declaracion_uso3.sDocumentoFechaRecepcion2meses,
              /*28*/       Obj_declaracion_uso3.sDocumentoFechaRecepcion4meses,
              /*29*/       Obj_declaracion_uso3.sanualidades,
              /*30*/       Obj_declaracion_uso3.sPaisNombre,
              /*31*/       Obj_declaracion_uso3.sCasoFechaFilingCliente,
              /*32*/       Obj_declaracion_uso3.sDocumentoFecha,
              /*33*/       Obj_declaracion_uso3.sDocumentoFechaVencimiento,
              /*34*/       Obj_declaracion_uso3.sEstatusCasoId,
              /*35*/       Obj_declaracion_uso3.stipoplazoid,
              /*36*/       Obj_declaracion_uso3.sEstatusPlazoId,
              /*37*/       Obj_declaracion_uso3.sPlazoFechaAtencion,
              /*38*/       Obj_declaracion_uso3.sIdiomaOriginalID,
              /*39*/       Obj_declaracion_uso3.sIdiomaId,
              /*40*/       Obj_declaracion_uso3.sIdiomaClave,
              /*41*/       Obj_declaracion_uso3.sEstatusCasoDescrip,
              /*42*/       Obj_declaracion_uso3.sEstatusPlazoDescrip,
              /*43*/       Obj_declaracion_uso3.sTipoSolicitudId);


                }
                lipiafechas(datagrid_declaracion_uso3);
                AdjustColumnOrder_DU3();
                tbDeclaraciondeuso.Text = contador + "";
                labelDeclaraciodeuso.Text = "";

            }
            else
            {
                tbLoading.Text = "";
                //debe verificarse que existan las fechas correctas 
                MessageBox.Show("Debe seleccionar un mes.");
            }
        }

        private void AdjustColumnOrder_DU3()
        {

            datagrid_declaracion_uso3.Columns["DU3_casoid"].DisplayIndex = 0;// DU3_casoid
            datagrid_declaracion_uso3.Columns["DU3_seleccionar"].DisplayIndex = 1;// DU3_seleccionar
            datagrid_declaracion_uso3.Columns["DU3_Ultimi_correo"].DisplayIndex = 2;// DU3_Ultimi_correo
            datagrid_declaracion_uso3.Columns["DU3_Correos_enviados"].DisplayIndex = 3;// DU3_Correos_enviados
            datagrid_declaracion_uso3.Columns["DU3_plazoid"].DisplayIndex = 4;// DU3_plazoid
            datagrid_declaracion_uso3.Columns["DU3_casoid_view"].DisplayIndex = 5;// DU3_casoid_view
            datagrid_declaracion_uso3.Columns["DU3_casonumero"].DisplayIndex = 6;// DU3_casonumero
            datagrid_declaracion_uso3.Columns["DU3_Numero_registro"].DisplayIndex = 7;// DU3_Numero_registro antes: caso numero concedida
            datagrid_declaracion_uso3.Columns["DU3_marca"].DisplayIndex = 8;// DU3_marca
            datagrid_declaracion_uso3.Columns["DU3_tipoplazodescrip"].DisplayIndex = 9;// DU3_tiposoldescrip
            datagrid_declaracion_uso3.Columns["DU3_clientenombre"].DisplayIndex = 10;// DU3_clientenombre
            datagrid_declaracion_uso3.Columns["DU3_solicitante"].DisplayIndex = 11;// DU3_solicitante
            datagrid_declaracion_uso3.Columns["DU3_contactonombre"].DisplayIndex = 12;// DU3_contactonombre
            datagrid_declaracion_uso3.Columns["DU3_contactomail"].DisplayIndex = 13;// DU3_contactomail
            datagrid_declaracion_uso3.Columns["DU3_subject"].DisplayIndex = 14;// DU3_subject
            datagrid_declaracion_uso3.Columns["DU3_tiposoldescrip"].DisplayIndex = 15;// DU3_tiposoldescrip
            datagrid_declaracion_uso3.Columns["DU3_subtiposoldesc"].DisplayIndex = 16;// DU3_subtiposoldesc
            datagrid_declaracion_uso3.Columns["DU3_nexp"].DisplayIndex = 17;// DU3_nexp
            datagrid_declaracion_uso3.Columns["DU3_clase"].DisplayIndex = 18;// DU3_clase
            datagrid_declaracion_uso3.Columns["DU3_Referencia_nombre"].DisplayIndex = 19;// DU3_Referencia_nombre
            datagrid_declaracion_uso3.Columns["DU3_fechapresentacion"].DisplayIndex = 20;// DU3_fechapresentacion
            datagrid_declaracion_uso3.Columns["DU3_fechaconcesion"].DisplayIndex = 21;// DU3_fechaconcesion
            datagrid_declaracion_uso3.Columns["DU3_fechadeclaracion_3"].DisplayIndex = 22;// DU3_fechadeclaracion_3
            datagrid_declaracion_uso3.Columns["DU3_fechadeclaracion_6"].DisplayIndex = 23;// DU3_fechadeclaracion_6
            datagrid_declaracion_uso3.Columns["DU3_dias_proximo_mail"].DisplayIndex = 24;// DU3_dias_proximo_mail
            datagrid_declaracion_uso3.Columns["DU3_fecha_proximo_mail"].DisplayIndex = 25;// DU3_fecha_proximo_mail
            datagrid_declaracion_uso3.Columns["DU3_documento_fecha_recepcion"].DisplayIndex = 26;// DU3_documento_fecha_recepcion
            datagrid_declaracion_uso3.Columns["DU3_documento_fecha_recepcion_2"].DisplayIndex = 27;// DU3_documento_fecha_recepcion_2
            datagrid_declaracion_uso3.Columns["DU3_documento_fecha_recepcion_4"].DisplayIndex = 28;// DU3_documento_fecha_recepcion_4
            datagrid_declaracion_uso3.Columns["DU3_anualidades"].DisplayIndex = 29;// DU3_anualidades
            datagrid_declaracion_uso3.Columns["DU3_paisnombre"].DisplayIndex = 30;// DU3_paisnombre
            datagrid_declaracion_uso3.Columns["DU3_fecha_filing_cliente"].DisplayIndex = 31;// DU3_fecha_filing_cliente
            datagrid_declaracion_uso3.Columns["DU3_documento_fecha"].DisplayIndex = 32;// DU3_documento_fecha
            datagrid_declaracion_uso3.Columns["DU3_documento_fecha_vencimiento"].DisplayIndex = 33;// DU3_documento_fecha_vencimiento
            datagrid_declaracion_uso3.Columns["DU3_estatus_caso"].DisplayIndex = 34;// DU3_estatus_caso
            datagrid_declaracion_uso3.Columns["DU3_tipo_plazo_id"].DisplayIndex = 35;// DU3_tipo_plazo_id
            datagrid_declaracion_uso3.Columns["DU3_estatus_plazo_id"].DisplayIndex = 36;// DU3_estatus_plazo_id
            datagrid_declaracion_uso3.Columns["DU3_plazo_fecha_atencion"].DisplayIndex = 37;// DU3_plazo_fecha_atencion
            datagrid_declaracion_uso3.Columns["DU3_idioma_original_id"].DisplayIndex = 38;// DU3_idioma_original_id
            datagrid_declaracion_uso3.Columns["DU3_idioma_id"].DisplayIndex = 39;// DU3_idioma_id
            datagrid_declaracion_uso3.Columns["DU3_indiomaclave"].DisplayIndex = 40;// DU3_indiomaclave
            datagrid_declaracion_uso3.Columns["DU3_estatuscasodescr"].DisplayIndex = 41;// DU3_estatuscasodescr
            datagrid_declaracion_uso3.Columns["DU3_estatusplazodescr"].DisplayIndex = 42;// DU3_estatusplazodescr
            datagrid_declaracion_uso3.Columns["DU3_Tiposolicitudid_view"].DisplayIndex = 43;





        }

        private void button53_Click(object sender, EventArgs e)
        {
            ////Aquí enviaremos los seleccionados 
            //int iNumerodechecados = Lvdeclaraciondeuso.CheckedItems.Count;
            //tbCactualizadosdeclaracio3anos.Text = "";
            //tbCenviadosDeclaracion3anos.Text = "";
            try
            {
                if (cbDeclaracionuso3anos.Checked && tbCorreopurebadeclaraciondeuso.Text == "")
                {
                    MessageBox.Show("Para actualizar un caso de prueba debe ingresar un correo de prueba.");
                    return;
                }
                    // contamos el numero de marcas seleccionadas
                    int contador = 0;
                for (int z = 0; z < datagrid_declaracion_uso3.Rows.Count; z++)
                {
                    bool valor = (bool)datagrid_declaracion_uso3.Rows[z].Cells[1].Value;
                    if (valor)
                    {
                        contador++;
                    }
                }

                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + "correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;
                    //definimos la prueba como falso a menos de que tenga capturado el correo de prueba
                    Boolean bCorreodepeuba = false;
                    if (tbCorreopurebadeclaraciondeuso.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//bandera para no mandar copias de correo
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbCorreopurebadeclaraciondeuso.Text);
                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }
                    String sCorreodestino = "";

                    

                    if (cbDeclaracionuso3anos.Checked && tbCorreopurebadeclaraciondeuso.Text != "") {//si esta checado el checbox de prueba actualizamos 
                        oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + "correos seleccionados a: "+ tbCorreopurebadeclaraciondeuso.Text + " y actualizar"+
                                                    "en el sistema casos king?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                        if (oDlgRes == DialogResult.Yes)
                        {
                            //se enviara el correo de prueba 
                            bCorreodepeuba = false;
                        }
                        else {//salimos del caso
                            return;
                        }
                            
                    }
                    for (int y = 0; y < datagrid_declaracion_uso3.Rows.Count; y++)
                    {
                        bool valor = (bool)datagrid_declaracion_uso3.Rows[y].Cells[1].Value;
                        if (valor)
                        {
                            //obtenemos el objeto de declaracion de uso 3 años seleccionada del datagridview por medio de la busqueda de su casoid
                            String scasoid = datagrid_declaracion_uso3.Rows[y].Cells[0].Value.ToString();
                            objMP_seleccionada obj_Declaraciondeuso3 = declaracionuso3.Find(x => x.sCasoId == scasoid);


                            String sDays = "-10000";
                            String sTipoPlazoId = obj_Declaraciondeuso3.stipoplazoid;
                            String sPlazoId = obj_Declaraciondeuso3.sPlazoId;
                            String sEstatusPlazoId = obj_Declaraciondeuso3.sEstatusPlazoId;
                            String sUID_Jobconfig = "";
                            String sCasoId = obj_Declaraciondeuso3.sCasoId;
                            String sTiposolicitudid = obj_Declaraciondeuso3.sTipoSolicitudId;
                            String sDocumentoid = obj_Declaraciondeuso3.sDocumentoId;
                            String sCasoNumero = obj_Declaraciondeuso3.sCasoNumero;
                            String sContactoEmail = obj_Declaraciondeuso3.sContactoEmail;// "eramiref92@gmail.com";//´Para pruebas
                            String sIdiomaClave = obj_Declaraciondeuso3.sIdiomaClave;
                            String sSubject = obj_Declaraciondeuso3.sSubject;
                            int REC = 0;

                            sGlobalSmtpCC = rtBodymessage.Text;//rtBodymessage es para MARCAS

                            Action act = () =>
                            {
                                //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                                //por lo que generamos el siguiente query
                                conect_robot con = new conect_robot();
                                String datosconectjobconfig = con.getdatavalues();
                                //String sUID_JobConfig = obj_Declaraciondeuso3.sobj_UID_JobConfig;
                                //String FunctionName = obj_Declaraciondeuso3.Fobj_unctionName;
                                //String sViewName = obj_Declaraciondeuso3.sobj_ViewName;
                                String sUID_JobConfig = "a8050719-ceab-11e8-869b-000c2918erf9";
                                String FunctionName = "Get_Email_declaracionuso_erf";
                                String sViewName = "warning_declaraciondeuso_erf_2022";
                                conect_robot valores = new conect_robot();
                                String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

                                //resps_UIDJobconfig.Close();
                                if (tbCorreopurebadeclaraciondeuso.Text!="")
                                {
                                    sCorreodestino = tbCorreopurebadeclaraciondeuso.Text;//Prueba de correo
                                }
                                else
                                {
                                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                                }

                                String[] correos = sCorreodestino.Split(',');
                                //if (correos.Length > 1)
                                //{
                                //    sCorreodestino = correos[0];
                                //    for (int z = 1; z < correos.Length; z++)
                                //    {
                                //        sGlobalSmtpCC += "," + correos[z];
                                //    }

                                //}
                                //String sAsunto = listView1.CheckedItems[x].SubItems[42].Text;
                                //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                                iContadorcorreossend += iresult;
                                //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
                                
                                if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                                {
                                    int iCasoid = Int32.Parse(sCasoId);
                                    int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                                    int isDocumentoid;
                                    if (sDocumentoid == "")
                                    {
                                        isDocumentoid = 0;
                                    }
                                    else
                                    {
                                        isDocumentoid = Int32.Parse(sDocumentoid);
                                    }

                                    int iDays = Int32.Parse("-10000");
                                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                    int iPlazoId = Int32.Parse(sPlazoId);
                                    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                                }
                            };
                            using (Waitforsendmail obj = new Waitforsendmail(act))
                            {
                                obj.ShowDialog();
                            }
                            tbCenviadosDeclaracion3anos.Text = iContadorcorreossend + "";
                            tbCactualizadosdeclaracio3anos.Text = iContadorcorreosupdates + "";

                        }
                    }
                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates);
                }
            }
            catch (Exception ex)
            {

            }

        }

        private void button50_Click(object sender, EventArgs e)
        {
            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Plazoid";
                workSheet.Cells[3, "E"] = "Casoid";
                workSheet.Cells[3, "F"] = "Casonumero";
                workSheet.Cells[3, "G"] = "No.de Registro";
                workSheet.Cells[3, "H"] = "Marca";
                workSheet.Cells[3, "I"] = "tipoplazadescrip";
                workSheet.Cells[3, "J"] = "clienteNombre";
                workSheet.Cells[3, "K"] = "InteresadoNombre";
                workSheet.Cells[3, "L"] = "ContactoNombre";
                workSheet.Cells[3, "M"] = "ContactoEmail";
                workSheet.Cells[3, "N"] = "Subject";
                workSheet.Cells[3, "O"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "P"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "Q"] = "No.de Expediente";
                workSheet.Cells[3, "R"] = "Clase";
                workSheet.Cells[3, "S"] = "Referencia Cliente";
                workSheet.Cells[3, "T"] = "Fecha de Presentación";
                workSheet.Cells[3, "U"] = "Fecha de Concesión";
                workSheet.Cells[3, "V"] = "Fecha declaración 3 años";
                workSheet.Cells[3, "W"] = "Fecha declaración 6 años";
                workSheet.Cells[3, "X"] = "Pais Nombre";
                workSheet.Cells[3, "Y"] = "IdiomaClave";


                workSheet.Cells[1, "A"] = "Declaración de Uso 3 años";
                workSheet.Range["A1", "G1"].Merge();
                workSheet.Range["A1", "G1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "G1"].Font.Bold = true;
                workSheet.Range["A1", "G1"].Font.Size = 20;
                var row = 3;

                for (int i = 1; i < datagrid_declaracion_uso3.Rows.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = datagrid_declaracion_uso3.Rows[i].Cells[1].Value;
                    workSheet.Cells[i + 4, "B"] = datagrid_declaracion_uso3.Rows[i].Cells[2].Value;
                    workSheet.Cells[i + 4, "C"] = datagrid_declaracion_uso3.Rows[i].Cells[3].Value;
                    workSheet.Cells[i + 4, "D"] = datagrid_declaracion_uso3.Rows[i].Cells[4].Value;
                    workSheet.Cells[i + 4, "E"] = datagrid_declaracion_uso3.Rows[i].Cells[5].Value;
                    workSheet.Cells[i + 4, "F"] = datagrid_declaracion_uso3.Rows[i].Cells[6].Value;
                    workSheet.Cells[i + 4, "G"] = datagrid_declaracion_uso3.Rows[i].Cells[7].Value;
                    workSheet.Cells[i + 4, "H"] = datagrid_declaracion_uso3.Rows[i].Cells[8].Value;
                    workSheet.Cells[i + 4, "I"] = datagrid_declaracion_uso3.Rows[i].Cells[9].Value;
                    workSheet.Cells[i + 4, "J"] = datagrid_declaracion_uso3.Rows[i].Cells[10].Value;
                    workSheet.Cells[i + 4, "K"] = datagrid_declaracion_uso3.Rows[i].Cells[11].Value;
                    workSheet.Cells[i + 4, "L"] = datagrid_declaracion_uso3.Rows[i].Cells[12].Value;
                    workSheet.Cells[i + 4, "M"] = datagrid_declaracion_uso3.Rows[i].Cells[13].Value;
                    workSheet.Cells[i + 4, "N"] = datagrid_declaracion_uso3.Rows[i].Cells[14].Value;
                    workSheet.Cells[i + 4, "O"] = datagrid_declaracion_uso3.Rows[i].Cells[15].Value;
                    workSheet.Cells[i + 4, "P"] = datagrid_declaracion_uso3.Rows[i].Cells[16].Value;
                    workSheet.Cells[i + 4, "Q"] = datagrid_declaracion_uso3.Rows[i].Cells[17].Value;
                    workSheet.Cells[i + 4, "R"] = datagrid_declaracion_uso3.Rows[i].Cells[18].Value;
                    workSheet.Cells[i + 4, "S"] = datagrid_declaracion_uso3.Rows[i].Cells[19].Value;
                    workSheet.Cells[i + 4, "T"] = datagrid_declaracion_uso3.Rows[i].Cells[20].Value;
                    workSheet.Cells[i + 4, "U"] = datagrid_declaracion_uso3.Rows[i].Cells[21].Value;
                    workSheet.Cells[i + 4, "V"] = datagrid_declaracion_uso3.Rows[i].Cells[22].Value;
                    workSheet.Cells[i + 4, "W"] = datagrid_declaracion_uso3.Rows[i].Cells[23].Value;
                    workSheet.Cells[i + 4, "X"] = datagrid_declaracion_uso3.Rows[i].Cells[30].Value;
                    workSheet.Cells[i + 4, "Y"] = datagrid_declaracion_uso3.Rows[i].Cells[40].Value;

                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "Y" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
                workSheet.Range["A3", "Y" + (row + 4)].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                workSheet.Range["A3", "Y3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            }
            catch (Exception E)
            {
                Console.Write("Se canceló la exportación");
            }
        }

        private void button49_Click(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_declaracion_uso3.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                if (datagrid_declaracion_uso3.CurrentRow.Cells[2].Value.ToString() != "")

                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void button28_Click(object sender, EventArgs e)
        {

            labelAccionOficial.Text = "Cargando registros ...";
            System.Threading.Thread.Sleep(1000);
            conect_robot con1 = new conect_robot();
            String sPlazoid = "";
            String sSend = "";
            String sSendnow = "";
            if (true)
            {
                tbaccionoficial.Text = "";
                List<ListViewItem> myItems = new List<ListViewItem>();
                int contador = 0;
                String queryinsert = "use jobconfig; SELECT  " +
                                            " war.PlazoId, " +
                                            " war.CasoId, " +
                                            " war.TipoSolicitudId, " +
                                            " war.DocumentoId, " +
                                            " war.TipoPlazoDescrip, " +
                                            " war.ClienteNombre, " +
                                            " war.InteresadoNombre, " +
                                            " war.TipoSolicitudDescrip, " +
                                            " war.SubTipoSolicitudDescripcion, " +
                                            " war.CasoNumeroExpedienteLargo, " +
                                            " war.CasoNumero, " +
                                            " war.Invento, " +
                                            " war.ReferenciaNombre, " +
                                            " war.CasoFechaVigencia, " +
                                            " war.PaisNombre, " +
                                            " war.Meses_transcurridos, " +
                                            " DATE_FORMAT(war.CasoFechaRecepcion,'%d-%m-%Y') as CasoFechaRecepcion, " +
                                            " war.CasoFechaFilingCliente, " +
                                            " war.CasoNumConcedida, " +
                                            " DATE_FORMAT(war.DocumentoFecha,'%d-%m-%Y') as DocumentoFecha, " +
                                            " DATE_FORMAT(war.DocumentoFechaVencimiento,'%d-%m-%Y') as DocumentoFechaVencimiento, " +
                                            " war.EstatusCasoId, " +
                                            " war.EstatusCasoDescrip, " +
                                            " war.tipoplazoid, " +
                                            " war.EstatusPlazoId, " +
                                            " war.EstatusPlazoDescrip, " +
                                            " war.PlazoFechaAtencion, " +
                                            " war.ContactoNombre, " +
                                            " war.ContactoEmail, " +
                                            " war.IdiomaOriginalID, " +
                                            " war.IdiomaId, " +
                                            " war.IdiomaClave, " +
                                            " war.Subject, " +
                                            //" war.SendNow, " +
                                            " war.DocumentoFechaRecepcion2meses," +
                                            " war.DocumentoFechaRecepcion, " +
                                            " war.DocumentoFechaRecepcion4meses, " +
                                            " war.CasoFechaIni as CasoFechaIni, " +
                                            " war.CasoFechaFin as CasoFechaFin, " +
                                            " war.FechaSended AS `FechaSended`, " +
                                            " war.numenviados AS `numenviados` " +
                                              " FROM " +
                                              "     jobconfig.warning_accionoficial_135_22_2_erf_2022 as war";// +
                if (accionoficialpatentes != null)
                {
                    accionoficialpatentes.Clear();
                }

                datagrid_accionoficial_patentes.Rows.Clear();
                Action act = () =>
                {
                    MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);

                    while (respuestastringinsert.Read())
                    {
                        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);

                        try
                        {
                            String sPlazoId = validareader("PlazoId", "PlazoId", respuestastringinsert);
                            String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                            String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);
                            
                            String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                            String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                            String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                            String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                            String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                            String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                            String sMarca = "";
                            String sInvento = validareader("Invento", "Invento", respuestastringinsert);
                            String sFechadiferencia = validareader("Meses_transcurridos", "Meses_transcurridos", respuestastringinsert);
                            String sFechaLimite = "";
                            String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                            String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                            String sCasoProductosClase = validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                            String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                            String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);

                            String sCasoFechaConcesion = validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);

                            String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                            String sCasoFechaInidos = validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                            String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                            String sDocumentoFechaRecepcion = validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                            String sDocumentoFechaRecepcion2meses = validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                            String sDocumentoFechaRecepcion4meses = validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                            String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                            String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                            String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                            String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                            String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                            String sDocumentoFecha = validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                            String sDocumentoFechaVencimiento = validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                            String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                            String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                            String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                            String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                            String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                            String sPlazoFechaAtencion = validareader("PlazoFechaAtencion", "PlazoFechaAtencion", respuestastringinsert);
                            String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                            String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                            String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                            String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                            String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                            String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                            String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                            String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                            String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);

                            //correo de prueba
                            //sContactoEmail = "eduarximo@gmail.com; eduardor@dicss.com.mx";

                            int REC = 0;
                            String sUID_JobConfig = "a5fab1ca-cea9-11e8-869b-000c291862e7";
                            String FunctionName = "Get_Email_AccionOficial_135_22_2";
                            String sViewName = "Warning_accionoficial_135_22_2";

                            DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                            DateTime dFechaLimite = validafechavacia(sFechaLimite);
                            DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                            DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                            DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                            DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                            DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                            DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                            DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                            DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);
                            DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                            DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                            DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                            DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                            DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                            DateTime dFechaSended = validafechavacia(sFechaSended);

                            objMP_seleccionada accionoficial_patentes = new objMP_seleccionada(sPlazoId,
                                                                                            sCasoId,
                                                                                            sDocumentoId,
                                                                                            sTipoPlazoDescrip,
                                                                                            sClienteNombre,
                                                                                            sInteresadoNombre,
                                                                                            sTipoSolicitudDescrip,
                                                                                            sSubTipoSolicitudDescripcion,
                                                                                            sMarca,
                                                                                            sInvento,
                                                                                            sFechadiferencia,
                                                                                            dFechaLimite,
                                                                                            sCasoNumeroExpedienteLargo,
                                                                                            sCasoNumero,
                                                                                            sCasoProductosClase,
                                                                                            sReferenciaNombre,
                                                                                            dCasoFechaConcesion,
                                                                                            dCasoFechaVigencia,
                                                                                            dCasoFechaIni,
                                                                                            dCasoFechaInidos,
                                                                                            dCasoFechaFin,
                                                                                            dDocumentoFechaRecepcion,
                                                                                            dDocumentoFechaRecepcion2meses,
                                                                                            dDocumentoFechaRecepcion4meses,
                                                                                            sanualidades,
                                                                                            sPaisNombre,
                                                                                            dCasoFechaRecepcion,
                                                                                            dCasoFechaFilingCliente,
                                                                                            sCasoNumConcedida,
                                                                                            dDocumentoFecha,
                                                                                            dDocumentoFechaVencimiento,
                                                                                            sEstatusCasoId,
                                                                                            sEstatusCasoDescrip,
                                                                                            stipoplazoid,
                                                                                            sEstatusPlazoId,
                                                                                            sEstatusPlazoDescrip,
                                                                                            dPlazoFechaAtencion,
                                                                                            sContactoNombre,
                                                                                            sContactoEmail,
                                                                                            sIdiomaOriginalID,
                                                                                            sIdiomaId,
                                                                                            sIdiomaClave,
                                                                                            sSubject,
                                                                                            sSendNow,
                                                                                            dFechaSended,
                                                                                            snumenviados,
                                                                                            REC,
                                                                                            tbCorreodepruebas.Text,
                                                                                            sUID_JobConfig,
                                                                                            FunctionName,
                                                                                            sViewName,
                                                                                            sTipoSolicitudId
                                                                                            );
                            accionoficialpatentes.Add(accionoficial_patentes);

                        }
                        catch (Exception Ex)
                        {

                        }
                        contador++;
                    }
                    respuestastringinsert.Close();
                    con1.Cerrarconexion();
                };
                using (Waitforcases form = new Waitforcases(act))
                {
                    form.ShowDialog();
                }
                foreach (var Obj_accionoficial_patentes in accionoficialpatentes)
                {
                    /*1*/
                    CheckBox checkboxcell = new CheckBox();

                    datagrid_accionoficial_patentes.Rows.Add(Obj_accionoficial_patentes.sCasoId, false,
                                 Obj_accionoficial_patentes.sFechaSended,
                   /*3*/        Obj_accionoficial_patentes.snumenviados,
                   /*4*/        Obj_accionoficial_patentes.sPlazoId,
                   /*5*/        Obj_accionoficial_patentes.sCasoId,
                   /*6*/        Obj_accionoficial_patentes.sCasoNumero,
                   /*7*/        Obj_accionoficial_patentes.sDocumentoId,
                   /*8*/        Obj_accionoficial_patentes.sInvento,
                   /*9*/        Obj_accionoficial_patentes.sEstatusCasoDescrip,
                   /*10*/        Obj_accionoficial_patentes.sTipoPlazoDescrip,
                   /*11*/       Obj_accionoficial_patentes.sClienteNombre,
                   /*12*/       Obj_accionoficial_patentes.sInteresadoNombre,
                   /*13*/       Obj_accionoficial_patentes.sContactoNombre,
                   /*14*/       Obj_accionoficial_patentes.sContactoEmail, //solicitante 
                   /*15*/       Obj_accionoficial_patentes.sSubject,
                   /*16*/       Obj_accionoficial_patentes.sTipoSolicitudDescrip,
                   /*17*/       Obj_accionoficial_patentes.sSubTipoSolicitudDescripcion,
                   /*18*/       Obj_accionoficial_patentes.sCasoNumeroExpedienteLargo,//No.expediente
                   /*19*/       Obj_accionoficial_patentes.sCasoProductosClase,//Clase
                   /*20*/       Obj_accionoficial_patentes.sReferenciaNombre,//referencia cliente 
                   /*21*/       Obj_accionoficial_patentes.sCasoFechaRecepcion, //fecha presentacion
                   /*22*/       Obj_accionoficial_patentes.sCasoFechaVigencia, //fecha vigencia
                   /*23*/       Obj_accionoficial_patentes.sCasoFechaIni, //caso fecha inicio
                   /*24*/       Obj_accionoficial_patentes.sCasoFechaFin, //caso fecha fin 
                   /*25*/       "",
                   /*26*/       "",
                   /*27*/       Obj_accionoficial_patentes.sDocumentoFechaRecepcion,
                   /*28*/       Obj_accionoficial_patentes.sDocumentoFechaRecepcion2meses,
                   /*29*/       Obj_accionoficial_patentes.sDocumentoFechaRecepcion4meses,
                   /*30*/       Obj_accionoficial_patentes.sanualidades,
                   /*31*/       Obj_accionoficial_patentes.sCasoFechaFilingCliente,
                   /*32*/       Obj_accionoficial_patentes.sDocumentoFecha,
                                Obj_accionoficial_patentes.sFechadiferencia,
                   /*33*/       Obj_accionoficial_patentes.sDocumentoFechaVencimiento,
                   /*34*/       Obj_accionoficial_patentes.sPaisNombre,
                   /*35*/       Obj_accionoficial_patentes.sEstatusCasoId,
                   /*36*/       Obj_accionoficial_patentes.stipoplazoid,
                   /*37*/       Obj_accionoficial_patentes.sEstatusPlazoId,
                   /*38*/       Obj_accionoficial_patentes.sPlazoFechaAtencion,
                   /*39*/       Obj_accionoficial_patentes.sIdiomaOriginalID,
                   /*40*/       Obj_accionoficial_patentes.sIdiomaId,
                   /*41*/       Obj_accionoficial_patentes.sIdiomaClave,
                   /*42*/       Obj_accionoficial_patentes.sEstatusPlazoDescrip,
                   /*43*/       Obj_accionoficial_patentes.sTipoSolicitudId);
                }
                lipiafechas(datagrid_accionoficial_patentes);
                AdjustColumnOrder_AOP();
                tbaccionoficial.Text = contador + "";
                labelAccionOficial.Text = "";
            }
            else
            {
                labelAccionOficial.Text = "";
            }
            //labelAccionOficial.Text = "Cargando registros ...";
            //System.Threading.Thread.Sleep(1000);
            //try
            //{
            //    lvaccionoficial.Items.Clear();
            //    conect_robot con1 = new conect_robot();
            //    String sPlazoid = "";
            //    String sSend = "";
            //    String sSendnow = "";
            //    if (true)//no validamos la fecha a seleccionar
            //    {
            //        tbaccionoficial.Text = "";
            //        List<ListViewItem> myItems = new List<ListViewItem>();
            //        int contador = 0;
            //        String queryinsert = "use jobconfig; SELECT  " +
            //                              " war.PlazoId, " +
            //                            " war.CasoId, " +
            //                            " war.DocumentoId, " +
            //                            " war.TipoPlazoDescrip, " +
            //                            " war.ClienteNombre, " +
            //                            " war.InteresadoNombre, " +
            //                            " war.TipoSolicitudDescrip, " +
            //                            " war.SubTipoSolicitudDescripcion, " +
            //                            " war.CasoNumeroExpedienteLargo, " +
            //                            " war.CasoNumero, " +
            //                            " war.ReferenciaNombre, " +
            //                            " war.CasoFechaVigencia, " +
            //                            " war.PaisNombre, " +
            //                            " war.CasoFechaRecepcion, " +
            //                            " war.CasoFechaFilingCliente, " +
            //                            " war.CasoNumConcedida, " +
            //                            " war.DocumentoFecha, " +
            //                            " war.DocumentoFechaVencimiento, " +
            //                            " war.EstatusCasoId, " +
            //                            " war.EstatusCasoDescrip, " +
            //                            " war.tipoplazoid, " +
            //                            " war.EstatusPlazoId, " +
            //                            " war.EstatusPlazoDescrip, " +
            //                            " war.PlazoFechaAtencion, " +
            //                            " war.ContactoNombre, " +
            //                            " war.ContactoEmail, " +
            //                            " war.IdiomaOriginalID, " +
            //                            " war.IdiomaId, " +
            //                            " war.IdiomaClave, " +
            //                            " war.Subject, " +
            //                            " war.SendNow, " +
            //                            " war.DocumentoFechaRecepcion2meses," +
            //                            " war.DocumentoFechaRecepcion, " +
            //                            " war.DocumentoFechaRecepcion4meses, " +
            //                            " war.CasoFechaIni as CasoFechaIni, " +
            //                            " war.CasoFechaFin as CasoFechaFin, " +
            //                            " Get_Fechaultimo(war.CasoId, " +
            //                            "  'warning_accionoficial_135_22_2') AS `FechaSended`, " +
            //                            "  Get_countenviados(war.CasoId, " +
            //                            "  'warning_accionoficial_135_22_2') AS `numenviados` " +
            //                              " FROM " +
            //                              "     jobconfig.warning_accionoficial_135_22_2 as war";// +

            //        Action act = () =>
            //        {
            //            MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);

            //            while (respuestastringinsert.Read())
            //            {
            //                String sCasoid = validareader2("CasoId", "CasoId", respuestastringinsert);
            //                ListViewItem listaagregar = new ListViewItem("", 0);
            //                ListViewItem checks = new ListViewItem();
            //                listaagregar.Checked = false;
            //                listaagregar.SubItems.Add(validareader2("FechaSended", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("numenviados", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("PlazoId", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("CasoId", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("CasoNumero", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("CasoNumConcedida", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("DocumentoId", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("TipoPlazoDescrip", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("ClienteNombre", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("InteresadoNombre", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("CasoId", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add("");
            //                listaagregar.SubItems.Add(validareader2("ReferenciaNombre", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("CasoFechaVigencia", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("CasoFechaIni", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("CasoFechaFin", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("DocumentoFechaRecepcion2meses", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("DocumentoFechaRecepcion4meses", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add("");
            //                listaagregar.SubItems.Add("");
            //                listaagregar.SubItems.Add("");
            //                listaagregar.SubItems.Add(validareader2("PaisNombre", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("CasoFechaRecepcion", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("CasoFechaFilingCliente", "CasoId", respuestastringinsert));

            //                listaagregar.SubItems.Add(validareader2("DocumentoFecha", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("DocumentoFechaVencimiento", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("EstatusCasoId", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("EstatusCasoDescrip", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("tipoplazoid", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("EstatusPlazoId", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("EstatusPlazoDescrip", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("PlazoFechaAtencion", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("ContactoNombre", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("ContactoEmail", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("IdiomaOriginalID", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("IdiomaId", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("IdiomaClave", "CasoId", respuestastringinsert));
            //                listaagregar.SubItems.Add(validareader2("Subject", "CasoId", respuestastringinsert));
            //                myItems.Add(listaagregar);
            //                contador++;
            //            }
            //            respuestastringinsert.Close();
            //            con1.Cerrarconexion();
            //        };
            //        using (Waitforcases form = new Waitforcases(act))
            //        {
            //            form.ShowDialog();
            //        }
            //        //MessageBox.Show("Termino de leer los datos");
            //        for (int x = 0; x < myItems.Count; x++)
            //        {
            //            lvaccionoficial.Items.Add(myItems[x]);
            //            lvaccionoficial.FullRowSelect = true;
            //        }

            //        tbaccionoficial.Text = contador + "";
            //        labelAccionOficial.Text = "";

            //    }
            //    else
            //    {
            //        labelAccionOficial.Text = "";
            //        //debe verificarse que existan las fechas correctas            
            //    }
            //}
            //catch (Exception E)
            //{
            //    MessageBox.Show("Error :" + E);
            //}
        }


        private void AdjustColumnOrder_AOP()
        {
            datagrid_accionoficial_patentes.Columns["AOP_casoid"].DisplayIndex = 0;// RMAnoVL_casoid
            datagrid_accionoficial_patentes.Columns["AOP_seleccionar"].DisplayIndex = 1;// RMAnoVL_seleccionar
            datagrid_accionoficial_patentes.Columns["AOP_Ultimi_correo"].DisplayIndex = 2;// RMAnoVL_Ultimi_correo
            datagrid_accionoficial_patentes.Columns["AOP_Correos_enviados"].DisplayIndex = 3;// RMAnoVL_Correos_enviados
            datagrid_accionoficial_patentes.Columns["AOP_plazoid"].DisplayIndex = 4;// RMAnoVL_plazoid
            datagrid_accionoficial_patentes.Columns["AOP_casoid_view"].DisplayIndex = 5;// RMAnoVL_casoid_view
            datagrid_accionoficial_patentes.Columns["AOP_casonumero"].DisplayIndex = 6;// RMAnoVL_casonumero
            datagrid_accionoficial_patentes.Columns["AOP_DocumentoId"].DisplayIndex = 7;// RMAnoVL_Numero_registro antes: caso numero concedida
            datagrid_accionoficial_patentes.Columns["AOP_invento"].DisplayIndex = 8;// RMAnoVL_marca
            datagrid_accionoficial_patentes.Columns["AOP_estatuscasodescr"].DisplayIndex = 9;// RMAnoVL_estatuscasodescr
            datagrid_accionoficial_patentes.Columns["AOP_tipoplazodescrip"].DisplayIndex = 10;// RMAnoVL_tiposoldescrip
            datagrid_accionoficial_patentes.Columns["AOP_clientenombre"].DisplayIndex = 11;// RMAnoVL_clientenombre
            datagrid_accionoficial_patentes.Columns["AOP_solicitante"].DisplayIndex = 12;// RMAnoVL_solicitante
            datagrid_accionoficial_patentes.Columns["AOP_contactonombre"].DisplayIndex = 13;// RMAnoVL_contactonombre
            datagrid_accionoficial_patentes.Columns["AOP_contactomail"].DisplayIndex = 14;// RMAnoVL_contactomail
            datagrid_accionoficial_patentes.Columns["AOP_subject"].DisplayIndex = 15;// RMAnoVL_subject
            datagrid_accionoficial_patentes.Columns["AOP_tiposoldescrip"].DisplayIndex = 16;// RMAnoVL_tiposoldescrip
            datagrid_accionoficial_patentes.Columns["AOP_subtiposoldesc"].DisplayIndex = 17;// RMAnoVL_subtiposoldesc
            datagrid_accionoficial_patentes.Columns["AOP_nexp"].DisplayIndex = 18;// RMAnoVL_nexp
            datagrid_accionoficial_patentes.Columns["AOP_clase"].DisplayIndex = 19;// RMAnoVL_clase
            datagrid_accionoficial_patentes.Columns["AOP_Referencia_nombre"].DisplayIndex = 20;// RMAnoVL_Referencia_nombre
            datagrid_accionoficial_patentes.Columns["AOP_fechapresentacion"].DisplayIndex = 21;// RMAnoVL_fechapresentacion
            datagrid_accionoficial_patentes.Columns["AOP_fechavigencia"].DisplayIndex = 22;// RMAnoVL_fechavigencia
            datagrid_accionoficial_patentes.Columns["AOP_fecha_inicio"].DisplayIndex = 23;// RMAnoVL_fecha_inicio
            datagrid_accionoficial_patentes.Columns["AOP_fecha_fin"].DisplayIndex = 24;// RMAnoVL_fecha_fin
            datagrid_accionoficial_patentes.Columns["AOP_dias_proximo_mail"].DisplayIndex = 25;// RMAnoVL_dias_proximo_mail
            datagrid_accionoficial_patentes.Columns["AOP_fecha_proximo_mail"].DisplayIndex = 26;// RMAnoVL_fecha_proximo_mail
            datagrid_accionoficial_patentes.Columns["AOP_documento_fecha_recepcion"].DisplayIndex = 27;// RMAnoVL_documento_fecha_recepcion
            datagrid_accionoficial_patentes.Columns["AOP_documento_fecha_recepcion_2"].DisplayIndex = 28;// RMAnoVL_documento_fecha_recepcion_2
            datagrid_accionoficial_patentes.Columns["AOP_documento_fecha_recepcion_4"].DisplayIndex = 29;// RMAnoVL_documento_fecha_recepcion_4
            datagrid_accionoficial_patentes.Columns["AOP_anualidades"].DisplayIndex = 30;// RMAnoVL_anualidades
            datagrid_accionoficial_patentes.Columns["AOP_fecha_filing_cliente"].DisplayIndex = 31;// RMAnoVL_fecha_filing_cliente
            datagrid_accionoficial_patentes.Columns["AOP_documento_fecha"].DisplayIndex = 32;// RMAnoVL_documento_fecha
            datagrid_accionoficial_patentes.Columns["AOP_fechadiferencia"].DisplayIndex = 33;// RMAnoVL_documento_fecha
            datagrid_accionoficial_patentes.Columns["AOP_documento_fecha_vencimiento"].DisplayIndex = 34;// RMAnoVL_documento_fecha_vencimiento
            datagrid_accionoficial_patentes.Columns["AOP_paisnombre"].DisplayIndex = 35;// RMAnoVL_paisnombre
            datagrid_accionoficial_patentes.Columns["AOP_estatus_caso"].DisplayIndex = 36;// RMAnoVL_estatus_caso
            datagrid_accionoficial_patentes.Columns["AOP_tipo_plazo_id"].DisplayIndex = 37;// RMAnoVL_tipo_plazo_id
            datagrid_accionoficial_patentes.Columns["AOP_estatus_plazo_id"].DisplayIndex = 38;// RMAnoVL_estatus_plazo_id
            datagrid_accionoficial_patentes.Columns["AOP_plazo_fecha_atencion"].DisplayIndex = 39;// RMAnoVL_plazo_fecha_atencion
            datagrid_accionoficial_patentes.Columns["AOP_idioma_original_id"].DisplayIndex = 40;// RMAnoVL_idioma_original_id
            datagrid_accionoficial_patentes.Columns["AOP_idioma_id"].DisplayIndex = 41;// RMAnVL_idioma_id
            datagrid_accionoficial_patentes.Columns["AOP_indiomaclave"].DisplayIndex = 42;// RMAnoVL_indiomaclave
            datagrid_accionoficial_patentes.Columns["AOP_estatusplazodescr"].DisplayIndex = 43;// RMAnoVL_estatusplazodescr
        }

        private void button43_Click(object sender, EventArgs e)
        {
            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Plazoid";
                workSheet.Cells[3, "E"] = "Casoid";
                workSheet.Cells[3, "F"] = "Casonumero";
                workSheet.Cells[3, "G"] = "Documento Id";
                workSheet.Cells[3, "H"] = "Invento";
                workSheet.Cells[3, "I"] = "Estatus Caso Descripción";
                workSheet.Cells[3, "J"] = "tipoplazadescrip";
                workSheet.Cells[3, "K"] = "clienteNombre";
                workSheet.Cells[3, "L"] = "InteresadoNombre";
                workSheet.Cells[3, "M"] = "ContactoNombre";
                workSheet.Cells[3, "N"] = "ContactoEmail";
                workSheet.Cells[3, "O"] = "Subject";
                workSheet.Cells[3, "P"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "Q"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "R"] = "No.de Expediente";
                workSheet.Cells[3, "S"] = "Referencia Cliente";
                workSheet.Cells[3, "T"] = "Fecha de Presentación";
                workSheet.Cells[3, "U"] = "Documanto Fecha";
                workSheet.Cells[3, "V"] = "Meses Transcurridos";
                workSheet.Cells[3, "W"] = "Documento Fecha Vencimiento";
                workSheet.Cells[3, "X"] = "Pais Nombre";
                workSheet.Cells[3, "Y"] = "IdiomaClave";


                workSheet.Cells[1, "A"] = "Acción Oficial (Patentes)";
                workSheet.Range["A1", "G1"].Merge();
                workSheet.Range["A1", "G1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "G1"].Font.Bold = true;
                workSheet.Range["A1", "G1"].Font.Size = 20;
                var row = 3;

                for (int i = 1; i < datagrid_accionoficial_patentes.Rows.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = datagrid_accionoficial_patentes.Rows[i].Cells[1].Value;
                    workSheet.Cells[i + 4, "B"] = datagrid_accionoficial_patentes.Rows[i].Cells[2].Value;
                    workSheet.Cells[i + 4, "C"] = datagrid_accionoficial_patentes.Rows[i].Cells[3].Value;
                    workSheet.Cells[i + 4, "D"] = datagrid_accionoficial_patentes.Rows[i].Cells[4].Value;
                    workSheet.Cells[i + 4, "E"] = datagrid_accionoficial_patentes.Rows[i].Cells[5].Value;
                    workSheet.Cells[i + 4, "F"] = datagrid_accionoficial_patentes.Rows[i].Cells[6].Value;
                    workSheet.Cells[i + 4, "G"] = datagrid_accionoficial_patentes.Rows[i].Cells[7].Value;
                    workSheet.Cells[i + 4, "H"] = datagrid_accionoficial_patentes.Rows[i].Cells[8].Value;
                    workSheet.Cells[i + 4, "I"] = datagrid_accionoficial_patentes.Rows[i].Cells[9].Value;
                    workSheet.Cells[i + 4, "J"] = datagrid_accionoficial_patentes.Rows[i].Cells[10].Value;
                    workSheet.Cells[i + 4, "K"] = datagrid_accionoficial_patentes.Rows[i].Cells[11].Value;
                    workSheet.Cells[i + 4, "L"] = datagrid_accionoficial_patentes.Rows[i].Cells[12].Value;
                    workSheet.Cells[i + 4, "M"] = datagrid_accionoficial_patentes.Rows[i].Cells[13].Value;
                    workSheet.Cells[i + 4, "N"] = datagrid_accionoficial_patentes.Rows[i].Cells[14].Value;
                    workSheet.Cells[i + 4, "O"] = datagrid_accionoficial_patentes.Rows[i].Cells[15].Value;
                    workSheet.Cells[i + 4, "P"] = datagrid_accionoficial_patentes.Rows[i].Cells[16].Value;
                    workSheet.Cells[i + 4, "Q"] = datagrid_accionoficial_patentes.Rows[i].Cells[17].Value;
                    workSheet.Cells[i + 4, "R"] = datagrid_accionoficial_patentes.Rows[i].Cells[18].Value;
                    workSheet.Cells[i + 4, "S"] = datagrid_accionoficial_patentes.Rows[i].Cells[20].Value;
                    workSheet.Cells[i + 4, "T"] = datagrid_accionoficial_patentes.Rows[i].Cells[21].Value;
                    workSheet.Cells[i + 4, "U"] = datagrid_accionoficial_patentes.Rows[i].Cells[32].Value;
                    workSheet.Cells[i + 4, "V"] = datagrid_accionoficial_patentes.Rows[i].Cells[33].Value;
                    workSheet.Cells[i + 4, "W"] = datagrid_accionoficial_patentes.Rows[i].Cells[34].Value;
                    workSheet.Cells[i + 4, "X"] = datagrid_accionoficial_patentes.Rows[i].Cells[35].Value;
                    workSheet.Cells[i + 4, "Y"] = datagrid_accionoficial_patentes.Rows[i].Cells[42].Value;


                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "Y" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
                workSheet.Range["A3", "Y" + (row + 4)].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                workSheet.Range["A3", "Y3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            }
            catch (Exception E)
            {
                Console.Write("Se canceló la exportación");
            }
        }

        private void button44_Click(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_accionoficial_patentes.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                if (datagrid_accionoficial_patentes.CurrentRow.Cells[2].Value.ToString() != "")

                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void button27_Click(object sender, EventArgs e)
        {
            
            try
            {
                if (CBpruebasaccionoficialpatentes.Checked && tbAccionoficialPatentescorreopureba.Text=="") {
                    MessageBox.Show("Para actualizar un caso de prueba debe ingresar un correo de prueba.");
                    return;
                }
                //contamos el numero de marcas seleccionadas
                int contador = 0;
                for (int z = 0; z < datagrid_accionoficial_patentes.Rows.Count; z++)
                {
                    bool valor = (bool)datagrid_accionoficial_patentes.Rows[z].Cells[1].Value;
                    if (valor)
                    {
                        contador++;
                    }
                }
                //hacemos una confimacion para saber si realmente quiere enviar al numero de marcas seleccionadas
                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + " correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;

                    //definimos la prueba como falso a menos de que tenga capturado el correo de prueba
                    Boolean bCorreodepeuba = false;
                    

                    if (tbAccionoficialPatentescorreopureba.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//bandera para no mandar copias de correo
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbAccionoficialPatentescorreopureba.Text);
                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }


                    if (CBpruebasaccionoficialpatentes.Checked && tbAccionoficialPatentescorreopureba.Text != "")
                    {//si esta checado el checbox de prueba actualizamos 
                        oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + "correos seleccionados a: " + tbAccionoficialPatentescorreopureba.Text + " y actualizar" +
                                                    "en el sistema casos king?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                        if (oDlgRes == DialogResult.Yes)
                        {
                            //se enviara el correo de prueba 
                            bCorreodepeuba = false;
                        }
                        else
                        {//salimos del caso
                            return;
                        }
                    }

                    for (int y = 0; y < datagrid_accionoficial_patentes.Rows.Count; y++)
                    {
                        bool valor = (bool)datagrid_accionoficial_patentes.Rows[y].Cells[1].Value;
                        if (valor)
                        {
                            //obtenemos el objeto de marcasin novedad seleccionada del datagridview por medio de la busqueda de su casoid
                            String scasoid = datagrid_accionoficial_patentes.Rows[y].Cells[0].Value.ToString();
                            objMP_seleccionada obj_AccionOficialPatentesseleccionada = accionoficialpatentes.Find(x => x.sCasoId == scasoid);



                            //#CasoId 4
                            //#ContactoEmail 38
                            //#IdiomaClave 41
                            //#Subject 42
                            String sDays = "-10000";
                            String sTipoPlazoId = obj_AccionOficialPatentesseleccionada.stipoplazoid;
                            String sPlazoId = obj_AccionOficialPatentesseleccionada.sPlazoId;
                            String sEstatusPlazoId = obj_AccionOficialPatentesseleccionada.sEstatusPlazoId;
                            String sUID_Jobconfig = "";
                            String sCasoId = obj_AccionOficialPatentesseleccionada.sCasoId;
                            String sTiposolicitudid = obj_AccionOficialPatentesseleccionada.sTipoSolicitudId;
                            String sDocumentoid = obj_AccionOficialPatentesseleccionada.sDocumentoId;
                            String sCasoNumero = obj_AccionOficialPatentesseleccionada.sCasoNumero;
                            String sContactoEmail = obj_AccionOficialPatentesseleccionada.sContactoEmail;// "eramiref92@gmail.com";//´Para pruebas
                            String sIdiomaClave = obj_AccionOficialPatentesseleccionada.sIdiomaClave;
                            String sSubject = obj_AccionOficialPatentesseleccionada.sSubject;
                            int REC = 0;// Get_Rec(Convert.ToInt32(sPlazoId));
                            //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);
                            /*Aquí tomamos el valor del los rtBodymessage_patentes para Patentes ya que si lo hacemos adelante estária fuera de contexto*/
                            sGlobalSmtpCC = rtBodymessage_patentes.Text;//para patentes
                            Action act = () =>
                            {
                                //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                                //por lo que generamos el siguiente query
                                conect_robot con = new conect_robot();
                                String datosconectjobconfig = con.getdatavalues();
                                //String sQuerygetUidjobconfig = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
                                //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
                                String sUID_JobConfig = "a5fab1ca-cea9-11e8-869b-000c291862e7";
                                String FunctionName = "Get_Email_AccionOficial_135_22_2";
                                String sViewName = "warning_accionoficial_135_22_2_erf_2022";
                                //while (resps_UIDJobconfig.Read())
                                //{
                                //    sUID_JobConfig = validareader("UID_JobConfig", "UID_JobConfig", resps_UIDJobconfig);
                                //    FunctionName = validareader("FunctionName", "UID_JobConfig", resps_UIDJobconfig);
                                //    sViewName = validareader("ViewName", "UID_JobConfig", resps_UIDJobconfig);
                                //}
                                conect_robot valores = new conect_robot();
                                String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

                                //resps_UIDJobconfig.Close();
                                String sCorreodestino = "";

                                if (tbAccionoficialPatentescorreopureba.Text !="")
                                {
                                    sCorreodestino = tbAccionoficialPatentescorreopureba.Text;//Prueba de correo
                                }
                                else
                                {
                                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                                }
                                String[] correos = sCorreodestino.Split(',');
                                //if (correos.Length > 1)
                                //{
                                //    sCorreodestino = correos[0];
                                //    for (int z = 1; z < correos.Length; z++)
                                //    {
                                //        sGlobalSmtpCC += "," + correos[z];
                                //    }

                                //}
                                //String sAsunto = listView1.CheckedItems[x].SubItems[42].Text;
                                //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                                iContadorcorreossend += iresult;
                                //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
                                if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                                {
                                    int iCasoid = Int32.Parse(sCasoId);
                                    int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                                    int isDocumentoid;
                                    if (sDocumentoid == "")
                                    {
                                        isDocumentoid = 0;
                                    }
                                    else
                                    {
                                        isDocumentoid = Int32.Parse(sDocumentoid);
                                    }

                                    int iDays = Int32.Parse("-10000");
                                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                    int iPlazoId = Int32.Parse(sPlazoId);
                                    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid,  isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                                }
                            };
                            using (Waitforsendmail obj = new Waitforsendmail(act))
                            {
                                obj.ShowDialog();
                            }
                            tbEnviadosaccionoficialPatentes.Text = iContadorcorreossend + "";
                            tbactualizadosaccionoficialPatentes.Text = iContadorcorreosupdates + "";
                        }
                    }

                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates);// + iContadorcorreosupdates + " Registros en la base de datos King");
                }

            }
            catch (Exception E)
            {
                //error al enviar correo
            }
        }

        private void button26_Click(object sender, EventArgs e)
        {

            foreach (DataGridViewRow row in datagrid_accionoficial_patentes.Rows)
            {

                row.Cells["AOP_seleccionar"].Value = true;

            }
        }

        private void button25_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_accionoficial_patentes.Rows)
            {

                row.Cells["AOP_seleccionar"].Value = false;

            }
        }

        private void button55_Click(object sender, EventArgs e)
        {

            foreach (DataGridViewRow row in datagrid_marcas_sinnovedades.Rows)
            {

                row.Cells["seleccionar"].Value = true;

            }
        }

        private void button47_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_marcas_sinnovedades.Rows)
            {

                row.Cells["seleccionar"].Value = false;

            }
        }

        private void button57_Click(object sender, EventArgs e)
        {
            labelMsinnovedades.Text = "Cargando registros ...";
            System.Threading.Thread.Sleep(1000);
            lvMsinnovedades.Items.Clear();
            conect_robot con1 = new conect_robot();
            String sPlazoid = "";
            String sSend = "";
            String sSendnow = "";
            if (true)//no validamos la fecha a seleccionar
            {
                tbSinnovedades.Text = "";
                List<ListViewItem> myItems = new List<ListViewItem>();
                int contador = 0;
                String queryinsert = "use jobconfig; SELECT  " +
                                        " war.PlazoId, " +
                                        " war.CasoId, " +
                                        " war.DocumentoId, " +
                                        " war.TipoPlazoDescrip, " +
                                        " war.ClienteNombre, " +
                                        " war.InteresadoNombre, " +
                                        " war.TipoSolicitudDescrip, " +
                                        " war.SubTipoSolicitudDescripcion, " +
                                        " war.Marca, " +
                                        " war.CasoNumeroExpedienteLargo, " +
                                        " war.CasoNumero, " +
                                        " war.CasoProductosClase, " +
                                        " war.ReferenciaNombre, " +
                                        " war.CasoFechaVigencia, " +
                                        " war.CasoFechaIni, " +
                                        " war.CasoFechaFin, " +
                                        " Meses_transcurridos, " +
                                        " DATE_FORMAT(war.CasoFechaRecepcion,'%d-%m-%Y') as CasoFechaRecepcion, " +
                                        " war.DocumentoFechaRecepcion2meses, " +
                                        " war.DocumentoFechaRecepcion4meses, " +
                                        " war.anualidades, " +
                                        " war.PaisNombre, " +
                                        " war.CasoFechaRecepcion, " +
                                        " war.CasoFechaFilingCliente, " +
                                        " war.CasoNumConcedida, " +
                                        " war.DocumentoFecha, " +
                                        " war.DocumentoFechaVencimiento, " +
                                        " war.EstatusCasoId, " +
                                        " war.EstatusCasoDescrip, " +
                                        " war.tipoplazoid, " +
                                        " war.EstatusPlazoId, " +
                                        " war.EstatusPlazoDescrip, " +
                                        " war.PlazoFechaAtencion, " +
                                        " war.ContactoNombre, " +
                                        " war.ContactoEmail, " +
                                        " war.IdiomaOriginalID, " +
                                        " war.IdiomaId, " +
                                        " war.IdiomaClave, " +
                                        " war.Subject, " +
                                        " war.SendNow, " +
                                        " DATE_FORMAT(Get_Fechaultimo(war.CasoId, " +
                                      "  'warning_marcassinovedades_erf'),'%d-%m-%Y') AS `FechaSended`," +
                                        " Get_countenviados(war.CasoId, 'warning_marcassinovedades_erf') AS `numenviados` " +
                                      " FROM " +
                                      "     jobconfig.warning_marcassinovedades_erf as war";
                if (marcassinnovedades != null)
                {
                    marcassinnovedades.Clear();
                }

                datagrid_marcas_sinnovedades.Rows.Clear();
                Action act = () =>
                {
                    MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);


                    while (respuestastringinsert.Read())
                    {
                        //con el casoid obtendremos el valor del xUID_JobConfig para despues traer get body y enviar el mail en el momento con la funcion doble click
                        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
                        //String queryselectreviewbycasoid = "select * from jobconfig.job_review where casoid = " + sCasoid;
                        //conect con2 = new conect_robot();
                        //MySqlDataReader respuestasselectbycasoid = con2.getdatareader(queryselectreviewbycasoid);
                        //while (respuestasselectbycasoid.Read())
                        //{
                        //    sPlazoid = validareader("ViewName", "CasoId", respuestasselectbycasoid);
                        //    sSend = validareader("Send", "CasoId", respuestasselectbycasoid);
                        //    sSendnow = validareader("SendNow", "CasoId", respuestasselectbycasoid);
                        //}
                        //respuestasselectbycasoid.Close();
                        //con2.Cerrarconexion();

                        //String queryselectenviadoscasoid = "select * from jobconfig.job_sended where casoid = " + sCasoid + " order by FechaSended asc";
                        //conect con3 = new conect_robot();
                        //String sFechaultimoenviado = "";
                        //MySqlDataReader respuestasselecenviadotbycasoid = con3.getdatareader(queryselectenviadoscasoid);
                        //int inumcorreos = 0;
                        //while (respuestasselecenviadotbycasoid.Read())
                        //{
                        //    inumcorreos++;
                        //    sFechaultimoenviado = validareader("FechaSended", "CasoId", respuestasselecenviadotbycasoid);
                        //}
                        //respuestasselecenviadotbycasoid.Close();
                        //con3.Cerrarconexion();


                        try
                        {
                            //fatagrid_marcas_sinnovedades.Rows.Add("id", "columna uno", "columnados", "columna3");
                            /*string sPlazoId_select = validareader("PlazoId", "CasoId", respuestastringinsert);
                            string sEstatusPlazoId_select = validareader("EstatusPlazoId", "CasoId", respuestastringinsert);
                            string sCasoId_select = validareader("CasoId", "CasoId", respuestastringinsert);
                            string sDocumentoid_select = validareader("Documentoid", "CasoId", respuestastringinsert);
                            string sCasoNumero_select = validareader("CasoNumero", "CasoId", respuestastringinsert);
                            string sContactoEmail_select = validareader("ContactoEmail", "CasoId", respuestastringinsert);
                            string sIdiomaClave_select = validareader("IdiomaClave", "CasoId", respuestastringinsert);
                            string sSubject_select = validareader("Subject", "CasoId", respuestastringinsert);*/

                            String sPlazoId = validareader("PlazoId", "PlazoId", respuestastringinsert);
                            String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                            String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);


                            String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                            String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                            String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                            String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                            String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                            String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                            String sMarca = validareader("Marca", "Marca", respuestastringinsert);
                            String sFechadiferencia = validareader("Meses_transcurridos", "Meses_transcurridos", respuestastringinsert);
                            String sFechaLimite = "";
                            String sInvento = validareader("Invento", "Invento", respuestastringinsert);
                            String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                            String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                            String sCasoProductosClase = validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                            String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                            String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);
                            String sCasoFechaConcesion = validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);

                            
                            String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                            String sCasoFechaInidos = validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                            String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                            String sDocumentoFechaRecepcion = validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                            String sDocumentoFechaRecepcion2meses = validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                            String sDocumentoFechaRecepcion4meses = validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                            String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                            String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                            String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                            String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                            String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                            String sDocumentoFecha = validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                            String sDocumentoFechaVencimiento = validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                            String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                            String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                            String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                            String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                            String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                            String sPlazoFechaAtencion = validareader("PlazoFechaAtencion", "PlazoFechaAtencion", respuestastringinsert);
                            String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                            String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                            String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                            String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                            String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                            String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                            String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                            String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                            String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);

                            int REC = 0;
                            String sUID_JobConfig = "a8b24705-ceab-11e8-869b-sinnovedad";
                            String FunctionName = "Get_Email_Marca_sinnovedad";
                            String sViewName = "warning_marcassinovedades_erf";

                            DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                            DateTime dFechaLimite = validafechavacia(sFechaLimite);
                            DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                            DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                            DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                            DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                            DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                            DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                            DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                            DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);
                            DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                            DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                            DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                            DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                            DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                            DateTime dFechaSended = validafechavacia(sFechaSended);

                            objMP_seleccionada marca_sinnovedad = new objMP_seleccionada(sPlazoId,
                                                                                        sCasoId,
                                                                                        sDocumentoId,
                                                                                        sTipoPlazoDescrip,
                                                                                        sClienteNombre,
                                                                                        sInteresadoNombre,
                                                                                        sTipoSolicitudDescrip,
                                                                                        sSubTipoSolicitudDescripcion,
                                                                                        sMarca,
                                                                                        sInvento,
                                                                                        sFechadiferencia,
                                                                                        dFechaLimite,
                                                                                        sCasoNumeroExpedienteLargo,
                                                                                        sCasoNumero,
                                                                                        sCasoProductosClase,
                                                                                        sReferenciaNombre,
                                                                                        dCasoFechaConcesion,
                                                                                        dCasoFechaVigencia,
                                                                                        dCasoFechaIni,
                                                                                        dCasoFechaInidos,
                                                                                        dCasoFechaFin,
                                                                                        dDocumentoFechaRecepcion,
                                                                                        dDocumentoFechaRecepcion2meses,
                                                                                        dDocumentoFechaRecepcion4meses,
                                                                                        sanualidades,
                                                                                        sPaisNombre,
                                                                                        dCasoFechaRecepcion,
                                                                                        dCasoFechaFilingCliente,
                                                                                        sCasoNumConcedida,
                                                                                        dDocumentoFecha,
                                                                                        dDocumentoFechaVencimiento,
                                                                                        sEstatusCasoId,
                                                                                        sEstatusCasoDescrip,
                                                                                        stipoplazoid,
                                                                                        sEstatusPlazoId,
                                                                                        sEstatusPlazoDescrip,
                                                                                        dPlazoFechaAtencion,
                                                                                        sContactoNombre,
                                                                                        sContactoEmail,
                                                                                        sIdiomaOriginalID,
                                                                                        sIdiomaId,
                                                                                        sIdiomaClave,
                                                                                        sSubject,
                                                                                        sSendNow,
                                                                                        dFechaSended,
                                                                                        snumenviados,
                                                                                        REC,
                                                                                        tbCorreodepruebas.Text,
                                                                                        sUID_JobConfig,
                                                                                        FunctionName,
                                                                                        sViewName,
                                                                                        sTipoSolicitudId
                                                                                        );
                            marcassinnovedades.Add(marca_sinnovedad);


                            //datagrid_marcas_sinnovedades.Rows.Add(
                            //    "",
                            //    "",
                            //    validareader("FechaSended", "CasoId", respuestastringinsert),
                            //    validareader("numenviados", "CasoId", respuestastringinsert),                                    
                            //    validareader("CasoId", "CasoId", respuestastringinsert),
                            //    validareader("CasoNumero", "CasoId", respuestastringinsert),
                            //    validareader("Marca", "CasoId", respuestastringinsert),
                            //    validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert),
                            //    validareader("ClienteNombre", "CasoId", respuestastringinsert),
                            //    validareader("InteresadoNombre", "CasoId", respuestastringinsert),
                            //    validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert),
                            //    validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert),
                            //    validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert),
                            //    validareader("CasoProductosClase", "CasoId", respuestastringinsert),
                            //    validareader("ReferenciaNombre", "CasoId", respuestastringinsert),
                            //    validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert),
                            //    validareader("PaisNombre", "CasoId", respuestastringinsert),
                            //    validareader("ContactoNombre", "CasoId", respuestastringinsert),
                            //    validareader("ContactoEmail", "CasoId", respuestastringinsert),
                            //    validareader("IdiomaClave", "CasoId", respuestastringinsert),
                            //    validareader("Subject", "CasoId", respuestastringinsert)
                            //    );
                        }
                        catch (Exception Ex)
                        {
                            //MessageBox.Show("Mensaje "+Ex.Message);
                        }


                        //ListViewItem listaagregar = new ListViewItem("", 0);

                        ////para marcas
                        //listaagregar.Checked = false;
                        //listaagregar.SubItems.Add(validareader("FechaSended", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("numenviados", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("PlazoId", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));

                        //listaagregar.SubItems.Add(validareader("CasoNumero", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("Marca", "CasoId", respuestastringinsert));

                        //listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("ClienteNombre", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("InteresadoNombre", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("TipoPlazoDescrip", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("CasoProductosClase", "CasoId", respuestastringinsert));

                        //listaagregar.SubItems.Add(validareader("ReferenciaNombre", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion2meses", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion4meses", "CasoId", respuestastringinsert));                          

                        //listaagregar.SubItems.Add(validareader("DocumentoFecha", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("CasoFechaFilingCliente", "CasoId", respuestastringinsert));

                        //listaagregar.SubItems.Add(validareader("PaisNombre", "CasoId", respuestastringinsert));                        
                        //listaagregar.SubItems.Add(validareader("ContactoNombre", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("ContactoEmail", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("IdiomaClave", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("Subject", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("tipoplazoid", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("EstatusPlazoId", "CasoId", respuestastringinsert));
                        //listaagregar.SubItems.Add(validareader("DocumentoId", "CasoId", respuestastringinsert));
                        //myItems.Add(listaagregar);
                        contador++;
                    }
                    respuestastringinsert.Close();
                    con1.Cerrarconexion();
                };
                using (Waitforcases form = new Waitforcases(act))
                {
                    form.ShowDialog();
                }


                //DataGridViewCheckBoxColumn dgvCmb = new DataGridViewCheckBoxColumn();
                //    dgvCmb.ValueType = typeof(bool);
                //    dgvCmb.Name = "Seleccionar";
                //    dgvCmb.HeaderText = "Seleccionar";
                //    datagrid_marcas_sinnovedades.Columns.Add(dgvCmb); 


                foreach (var Obj_marca_sinnovedad in marcassinnovedades)
                {
                    //datagrid_marcas_sinnovedades.Row[0];
                    //DataGridViewCheckBoxCell chk = (DataGridViewCheckBoxCell)datagrid_marcas_sinnovedades.Rows[0].Cells[1];
                    //DataGridViewCheckBoxColumn columncheckbox = new DataGridViewCheckBoxColumn();
                    //columncheckbox.HeaderText = "Seleccionar";
                    //columncheckbox.FalseValue = "0";
                    //columncheckbox.TrueValue = "1";
                    //datagrid_marcas_sinnovedades.DataSource = Obj_marca_sinnovedad;
                    //DataGridViewCheckBoxCell obj = new DataGridViewCheckBoxCell();
                    //obj.Value = true;
                    CheckBox checkboxcell = new CheckBox();

                    datagrid_marcas_sinnovedades.Rows.Add(Obj_marca_sinnovedad.sCasoId, false,
                        Obj_marca_sinnovedad.sFechaSended,
                        Obj_marca_sinnovedad.snumenviados,
                        Obj_marca_sinnovedad.sCasoId,
                        Obj_marca_sinnovedad.sCasoNumero,
                        Obj_marca_sinnovedad.sMarca,
                        Obj_marca_sinnovedad.sEstatusCasoDescrip,
                        Obj_marca_sinnovedad.sClienteNombre,
                        Obj_marca_sinnovedad.sInteresadoNombre,
                        Obj_marca_sinnovedad.sTipoSolicitudDescrip,
                        Obj_marca_sinnovedad.sSubTipoSolicitudDescripcion,
                        Obj_marca_sinnovedad.sCasoNumeroExpedienteLargo,
                        Obj_marca_sinnovedad.sCasoProductosClase,
                        Obj_marca_sinnovedad.sReferenciaNombre,
                        Obj_marca_sinnovedad.sCasoFechaRecepcion,
                        Obj_marca_sinnovedad.sFechadiferencia,
                        Obj_marca_sinnovedad.sPaisNombre,
                        Obj_marca_sinnovedad.sContactoNombre,
                        Obj_marca_sinnovedad.sContactoEmail,
                        Obj_marca_sinnovedad.sIdiomaClave,
                        Obj_marca_sinnovedad.sSubject);

                }
                //for (int x = 0; x < myItems.Count; x++)
                //{
                //    lvMsinnovedades.Items.Add(myItems[x]);
                //    lvMsinnovedades.FullRowSelect = true;
                //}

                //ordenamos por usuario
                AdjustColumnOrder();
                tbSinnovedades.Text = contador + "";
                labelMsinnovedades.Text = "";
            }
            else
            {
                labelMsinnovedades.Text = "";
            }
        }

        private void AdjustColumnOrder()
        {
            datagrid_marcas_sinnovedades.Columns["MSN_casoid"].DisplayIndex = 0;// MSN_casoid
            datagrid_marcas_sinnovedades.Columns["MSN_Ultimi_correo"].DisplayIndex = 2;// MSN_Ultimi_correo
            datagrid_marcas_sinnovedades.Columns["MSN_Correos_enviados"].DisplayIndex = 3;// MSN_Correos_enviados
            datagrid_marcas_sinnovedades.Columns["MSN_casoid_view"].DisplayIndex = 4;// MSN_casoid_view
            datagrid_marcas_sinnovedades.Columns["MSN_casonumero"].DisplayIndex = 5;// MSN_casonumero
            datagrid_marcas_sinnovedades.Columns["MSN_marca"].DisplayIndex = 6;// MSN_marca
            datagrid_marcas_sinnovedades.Columns["MSN_estatuscasodescr"].DisplayIndex = 7;// MSN_estatuscasodescr
            datagrid_marcas_sinnovedades.Columns["MSN_clientenombre"].DisplayIndex = 8;// MSN_clientenombre
            datagrid_marcas_sinnovedades.Columns["MSN_solicitante"].DisplayIndex = 9;// MSN_solicitante
            datagrid_marcas_sinnovedades.Columns["MSN_tiposoldescrip"].DisplayIndex = 10;// MSN_tiposoldescrip
            datagrid_marcas_sinnovedades.Columns["MSN_subtiposoldesc"].DisplayIndex = 11;// MSN_subtiposoldesc
            datagrid_marcas_sinnovedades.Columns["MSN_nexp"].DisplayIndex = 12;// MSN_nexp
            datagrid_marcas_sinnovedades.Columns["MSN_clase"].DisplayIndex = 13;// MSN_clase
            datagrid_marcas_sinnovedades.Columns["MSN_Referencia_nombre"].DisplayIndex = 14;// MSN_Referencia_nombre
            datagrid_marcas_sinnovedades.Columns["MSN_fechapresentacion"].DisplayIndex = 15;// MSN_fechapresentacion
            datagrid_marcas_sinnovedades.Columns["MSN_fechadiferencia"].DisplayIndex = 16;// MSN_fechapresentacion
            datagrid_marcas_sinnovedades.Columns["MSN_paisreg"].DisplayIndex = 17;// MSN_paisreg
            datagrid_marcas_sinnovedades.Columns["MSN_contactonombre"].DisplayIndex = 18;// MSN_contactonombre
            datagrid_marcas_sinnovedades.Columns["MSN_contactomail"].DisplayIndex = 19;// MSN_contactomail
            datagrid_marcas_sinnovedades.Columns["MSN_indiomaclave"].DisplayIndex = 20;// MSN_indiomaclave
            datagrid_marcas_sinnovedades.Columns["MSN_subject"].DisplayIndex = 21;// MSN_subject
            datagrid_marcas_sinnovedades.Columns["seleccionar"].DisplayIndex = 1;// seleccionar
        }

        private void button46_Click(object sender, EventArgs e)
        {
            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Casoid";
                workSheet.Cells[3, "E"] = "Casonumero";
                workSheet.Cells[3, "F"] = "Marca";
                workSheet.Cells[3, "G"] = "EstatusCasodescrip";
                workSheet.Cells[3, "H"] = "clienteNombre";
                workSheet.Cells[3, "I"] = "Solicitante";
                workSheet.Cells[3, "J"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "K"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "L"] = "No.de Expediente";
                workSheet.Cells[3, "M"] = "Clase";
                workSheet.Cells[3, "N"] = "Referencia Cliente";
                workSheet.Cells[3, "O"] = "Fecha de Presentación";
                workSheet.Cells[3, "P"] = "Meses Transcurridos";
                workSheet.Cells[3, "Q"] = "País de Registro";
                workSheet.Cells[3, "R"] = "Contacto Nombre";
                workSheet.Cells[3, "S"] = "Contacto Email";
                workSheet.Cells[3, "T"] = "IdiomaClave";
                workSheet.Cells[3, "U"] = "Subject";



                workSheet.Cells[1, "A"] = "Marcas sin novedades";
                workSheet.Range["A1", "G1"].Merge();
                workSheet.Range["A1", "G1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "G1"].Font.Bold = true;
                workSheet.Range["A1", "G1"].Font.Size = 20;
                var row = 3;

                for (int i = 1; i < datagrid_marcas_sinnovedades.Rows.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = datagrid_marcas_sinnovedades.Rows[i].Cells[1].Value;
                    workSheet.Cells[i + 4, "B"] = datagrid_marcas_sinnovedades.Rows[i].Cells[2].Value;
                    workSheet.Cells[i + 4, "C"] = datagrid_marcas_sinnovedades.Rows[i].Cells[3].Value;
                    workSheet.Cells[i + 4, "D"] = datagrid_marcas_sinnovedades.Rows[i].Cells[4].Value;
                    workSheet.Cells[i + 4, "E"] = datagrid_marcas_sinnovedades.Rows[i].Cells[5].Value;
                    workSheet.Cells[i + 4, "F"] = datagrid_marcas_sinnovedades.Rows[i].Cells[6].Value;
                    workSheet.Cells[i + 4, "G"] = datagrid_marcas_sinnovedades.Rows[i].Cells[7].Value;
                    workSheet.Cells[i + 4, "H"] = datagrid_marcas_sinnovedades.Rows[i].Cells[8].Value;
                    workSheet.Cells[i + 4, "I"] = datagrid_marcas_sinnovedades.Rows[i].Cells[9].Value;
                    workSheet.Cells[i + 4, "J"] = datagrid_marcas_sinnovedades.Rows[i].Cells[10].Value;
                    workSheet.Cells[i + 4, "K"] = datagrid_marcas_sinnovedades.Rows[i].Cells[11].Value;
                    workSheet.Cells[i + 4, "L"] = datagrid_marcas_sinnovedades.Rows[i].Cells[12].Value;
                    workSheet.Cells[i + 4, "M"] = datagrid_marcas_sinnovedades.Rows[i].Cells[13].Value;
                    workSheet.Cells[i + 4, "N"] = datagrid_marcas_sinnovedades.Rows[i].Cells[14].Value;
                    workSheet.Cells[i + 4, "O"] = datagrid_marcas_sinnovedades.Rows[i].Cells[15].Value;
                    workSheet.Cells[i + 4, "P"] = datagrid_marcas_sinnovedades.Rows[i].Cells[16].Value;
                    workSheet.Cells[i + 4, "Q"] = datagrid_marcas_sinnovedades.Rows[i].Cells[17].Value;
                    workSheet.Cells[i + 4, "R"] = datagrid_marcas_sinnovedades.Rows[i].Cells[18].Value;
                    workSheet.Cells[i + 4, "S"] = datagrid_marcas_sinnovedades.Rows[i].Cells[19].Value;
                    workSheet.Cells[i + 4, "T"] = datagrid_marcas_sinnovedades.Rows[i].Cells[20].Value;
                    workSheet.Cells[i + 4, "U"] = datagrid_marcas_sinnovedades.Rows[i].Cells[21].Value;


                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "U" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
                workSheet.Range["A3", "U" + (row + 4)].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                workSheet.Range["A3", "U3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            }
            catch (Exception E)
            {
                Console.Write("Se canceló la exportación");
            }
        }

        private void button45_Click(object sender, EventArgs e)
        {

            try
            {

                String sCasoid = datagrid_marcas_sinnovedades.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                if (datagrid_marcas_sinnovedades.CurrentRow.Cells[2].Value.ToString() != "")

                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }
        public int enviarcorreo(String sCasoid)
        {
            try
            {




            }
            catch (Exception Ex)
            {
                MessageBox.Show("Error al intentar enviar");
            }

            return 0;
        }

        private void button56_Click(object sender, EventArgs e)
        {
            try
            {

                //contamos el numero de marcas seleccionadas
                int contador = 0;
                for (int z = 0; z < datagrid_marcas_sinnovedades.Rows.Count; z++)
                {
                    bool valor = (bool)datagrid_marcas_sinnovedades.Rows[z].Cells[1].Value;
                    if (valor)
                    {
                        contador++;
                    }
                }
                //hacemos una confimacion para saber si realmente quiere enviar al numero de marcas seleccionadas
                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + " correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;
                    //definimos la prueba como falso a menos de que tenga capturado el correo de prueba
                    Boolean bCorreodepeuba = false;
                    if (tbMsinnovedadescorreoprueba.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//bandera para no mandar copias de correo
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbMsinnovedadescorreoprueba.Text);

                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }

                    for (int y = 0; y < datagrid_marcas_sinnovedades.Rows.Count; y++)
                    {
                        bool valor = (bool)datagrid_marcas_sinnovedades.Rows[y].Cells[1].Value;
                        if (valor)
                        {
                            //obtenemos el objeto de marcasin novedad seleccionada del datagridview por medio de la busqueda de su casoid
                            String scasoid = datagrid_marcas_sinnovedades.Rows[y].Cells[0].Value.ToString();
                            objMP_seleccionada obj_Marcaseleccionada = marcassinnovedades.Find(x => x.sCasoId == scasoid);



                            //#CasoId 4
                            //#ContactoEmail 38
                            //#IdiomaClave 41
                            //#Subject 42
                            String sDays = "-10000";
                            String sTipoPlazoId = obj_Marcaseleccionada.stipoplazoid;
                            String sPlazoId = obj_Marcaseleccionada.sPlazoId;
                            String sEstatusPlazoId = obj_Marcaseleccionada.sEstatusPlazoId;
                            String sUID_Jobconfig = "";
                            String sCasoId = obj_Marcaseleccionada.sCasoId;
                            String sTiposolicitudid = obj_Marcaseleccionada.sTipoSolicitudId;
                            String sDocumentoid = obj_Marcaseleccionada.sDocumentoId;
                            String sCasoNumero = obj_Marcaseleccionada.sCasoNumero;
                            String sContactoEmail = obj_Marcaseleccionada.sContactoEmail;// "eramiref92@gmail.com";//´Para pruebas
                            String sIdiomaClave = obj_Marcaseleccionada.sIdiomaClave;
                            String sSubject = obj_Marcaseleccionada.sSubject;
                            int REC = 0;// Get_Rec(Convert.ToInt32(sPlazoId));
                            //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);
                            Action act = () =>
                            {
                                //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                                //por lo que generamos el siguiente query
                                conect_robot con = new conect_robot();
                                String datosconectjobconfig = con.getdatavalues();
                                //String sQuerygetUidjobconfig = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
                                //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
                                String sUID_JobConfig = "a8b24705-ceab-11e8-869b-sinnovedad";
                                String FunctionName = "Get_Email_Marca_sinnovedad";
                                String sViewName = "warning_marcassinovedades_erf";//"warning_marcassinovedades_erf";
                                //while (resps_UIDJobconfig.Read())
                                //{
                                //    sUID_JobConfig = validareader("UID_JobConfig", "UID_JobConfig", resps_UIDJobconfig);
                                //    FunctionName = validareader("FunctionName", "UID_JobConfig", resps_UIDJobconfig);
                                //    sViewName = validareader("ViewName", "UID_JobConfig", resps_UIDJobconfig);
                                //}
                                conect_robot valores = new conect_robot();
                                String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);


                                //resps_UIDJobconfig.Close();
                                String sCorreodestino = "";

                                if (bCorreodepeuba)
                                {
                                    sCorreodestino = tbMsinnovedadescorreoprueba.Text;//Prueba de correo

                                }
                                else
                                {
                                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                                }
                                String[] correos = sCorreodestino.Split(',');
                                if (correos.Length > 1)
                                {
                                    sCorreodestino = correos[0];
                                    for (int z = 1; z < correos.Length; z++)
                                    {
                                        sGlobalSmtpCC += "," + correos[z];
                                    }

                                }
                                //String sAsunto = listView1.CheckedItems[x].SubItems[42].Text;
                                //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                                iContadorcorreossend += iresult;
                                //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
                                if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                                {
                                    int iCasoid = Int32.Parse(sCasoId);
                                    int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                                    int isDocumentoid;
                                    if (sDocumentoid == "")
                                    {
                                        isDocumentoid = 0;
                                    }
                                    else
                                    {
                                        isDocumentoid = Int32.Parse(sDocumentoid);
                                    }

                                    int iDays = Int32.Parse("-10000");
                                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                    int iPlazoId = Int32.Parse(sPlazoId);
                                    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid,isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                                }

                            };
                            using (Waitforsendmail obj = new Waitforsendmail(act))
                            {
                                obj.ShowDialog();
                            }
                            tbEnviadosMarcassinnovedad.Text = iContadorcorreossend + "";
                            tbactualizadosMsinnovedad.Text = iContadorcorreosupdates + "";
                        }
                    }

                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates);// + iContadorcorreosupdates + " Registros en la base de datos King");

                }
            }
            catch (Exception ex)
            {

            }
            //vamos a utilizar datagrid_marcas_sinnovedades que es global

            //    CheckBox isijoi = (datagrid_marcas_sinnovedades.Rows[x].Cells[1].Value as CheckBox);

            //    //object chkchecking = (datagrid_marcas_sinnovedades.Rows[x].Cells[1].P as DataGridViewCheckBoxCell).Value; //.Cells[0] as DataGridViewCheckBoxColumn;

            //    //if (Convert.ToBoolean(chkchecking.Value) == true)
            //    //{

            //    //}
            //    Object seleccionado = datagrid_marcas_sinnovedades.Rows[x].Cells[1].Value;
            //MessageBox.Show("El valor es " + valor);


            ////Aquí enviaremos los seleccionados 
            //int iNumerodechecados = lvMsinnovedades.CheckedItems.Count;

            //DialogResult oDlgRes;
            //oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + iNumerodechecados + "correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
            //if (oDlgRes == DialogResult.Yes)
            //{
            //    int iContadorcorreossend = 0;
            //    int iContadorcorreosupdates = 0;
            //    Boolean bCorreodepeuba = false;
            //    if (tbMsinnovedadescorreoprueba.Text != "")
            //    {
            //        bCorreodepeuba = true;
            //        bPruebadecorreo = true;//bandera para no mandar copias de correo
            //        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbMsinnovedadescorreoprueba.Text);
            //    }
            //    else
            //    {
            //        bPruebadecorreo = false;
            //    }
            //    tbEnviadosMarcassinnovedad.Text = "";
            //    tbactualizadosMsinnovedad.Text = "";
            //    for (int x = 0; x < iNumerodechecados; x++)
            //    {
            //        //#CasoId 4
            //        //#ContactoEmail 38
            //        //#IdiomaClave 41
            //        //#Subject 42
            //        String sDays = "-10000";
            //        String sTipoPlazoId = lvMsinnovedades.CheckedItems[x].SubItems[27].Text;
            //        String sPlazoId = lvMsinnovedades.CheckedItems[x].SubItems[3].Text;
            //        String sEstatusPlazoId = lvMsinnovedades.CheckedItems[x].SubItems[28].Text;
            //        String sUID_Jobconfig = "";
            //        String sCasoId = lvMsinnovedades.CheckedItems[x].SubItems[4].Text;
            //        String sDocumentoid = lvMsinnovedades.CheckedItems[x].SubItems[29].Text;
            //        String sCasoNumero = lvMsinnovedades.CheckedItems[x].SubItems[5].Text;
            //        String sContactoEmail = lvMsinnovedades.CheckedItems[x].SubItems[24].Text;
            //        String sIdiomaClave = lvMsinnovedades.CheckedItems[x].SubItems[25].Text;
            //        String sSubject = lvMsinnovedades.CheckedItems[x].SubItems[26].Text;
            //        int REC = 0;// Get_Rec(Convert.ToInt32(sPlazoId));
            //        //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);
            //        Action act = () =>
            //        {
            //        //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
            //        //por lo que generamos el siguiente query
            //        conect_robot con = new conect_robot();
            //        String datosconectjobconfig = con.getdatavalues();
            //        //String sQuerygetUidjobconfig = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
            //        //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
            //        String sUID_JobConfig = "a8b24705-ceab-11e8-869b-sinnovedad";
            //        String FunctionName = "Get_Email_Marca_sinnovedad";
            //        String sViewName = "warning_marcassinovedades_erf";
            //        //while (resps_UIDJobconfig.Read())
            //        //{
            //        //    sUID_JobConfig = validareader("UID_JobConfig", "UID_JobConfig", resps_UIDJobconfig);
            //        //    FunctionName = validareader("FunctionName", "UID_JobConfig", resps_UIDJobconfig);
            //        //    sViewName = validareader("ViewName", "UID_JobConfig", resps_UIDJobconfig);
            //        //}
            //        conect_robot valores = new conect_robot();
            //        String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

            //        //resps_UIDJobconfig.Close();
            //        String sCorreodestino = "";

            //        if (bCorreodepeuba)
            //        {
            //            sCorreodestino = tbMsinnovedadescorreoprueba.Text;//Prueba de correo
            //        }
            //        else
            //        {
            //            sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
            //        }
            //        String[] correos = sCorreodestino.Split(',');
            //        if (correos.Length > 1)
            //        {
            //            sCorreodestino = correos[0];
            //            for (int z = 1; z < correos.Length; z++)
            //            {
            //                sGlobalSmtpCC += "," + correos[z];
            //            }

            //        }
            //        //String sAsunto = listView1.CheckedItems[x].SubItems[42].Text;
            //        //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
            //        int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
            //        iContadorcorreossend += iresult;
            //        //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
            //        if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
            //        {
            //            int iCasoid = Int32.Parse(sCasoId);
            //            int isDocumentoid;
            //            if (sDocumentoid == "")
            //            {
            //                isDocumentoid = 0;
            //            }
            //            else
            //            {
            //                isDocumentoid = Int32.Parse(sDocumentoid);
            //            }

            //            int iDays = Int32.Parse("-10000");
            //            int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
            //            int iPlazoId = Int32.Parse(sPlazoId);
            //            iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
            //        }
            //        };
            //        using (Waitforsendmail obj = new Waitforsendmail(act))
            //        {
            //            obj.ShowDialog();
            //        }
            //        tbEnviadosMarcassinnovedad.Text = iContadorcorreossend+ "";
            //        tbactualizadosMsinnovedad.Text = iContadorcorreosupdates+ "";
            //    }
            //    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates + " Registros en la base de datos King");
            //}
            //else
            //{
            //    //no hacemos nada por que cancelo
            //}
        }

        private void button59_Click(object sender, EventArgs e)
        {
            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Casoid";
                workSheet.Cells[3, "E"] = "Casonumero";
                workSheet.Cells[3, "F"] = "EstatusCasodescrip";
                workSheet.Cells[3, "G"] = "clienteNombre";
                workSheet.Cells[3, "H"] = "Solicitante";
                workSheet.Cells[3, "I"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "J"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "K"] = "Nombre del Invento";
                workSheet.Cells[3, "L"] = "No.de Expediente";
                workSheet.Cells[3, "M"] = "Referencia Cliente";
                workSheet.Cells[3, "N"] = "Fecha de Presentación";
                workSheet.Cells[3, "O"] = "Meses Transcurridos";
                workSheet.Cells[3, "P"] = "País de Registro";
                workSheet.Cells[3, "Q"] = "Contacto Nombre";
                workSheet.Cells[3, "R"] = "Contacto Email";
                workSheet.Cells[3, "S"] = "IdiomaClave";
                workSheet.Cells[3, "T"] = "Titulo del Correo";



                workSheet.Cells[1, "A"] = "Patentes sin novedades";
                workSheet.Range["A1", "G1"].Merge();
                workSheet.Range["A1", "G1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "G1"].Font.Bold = true;
                workSheet.Range["A1", "G1"].Font.Size = 20;
                var row = 3;

                for (int i = 1; i < datagrid_patente_sinnovedades.Rows.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = datagrid_patente_sinnovedades.Rows[i].Cells[1].Value;
                    workSheet.Cells[i + 4, "B"] = datagrid_patente_sinnovedades.Rows[i].Cells[2].Value;
                    workSheet.Cells[i + 4, "C"] = datagrid_patente_sinnovedades.Rows[i].Cells[3].Value;
                    workSheet.Cells[i + 4, "D"] = datagrid_patente_sinnovedades.Rows[i].Cells[4].Value;
                    workSheet.Cells[i + 4, "E"] = datagrid_patente_sinnovedades.Rows[i].Cells[5].Value;
                    workSheet.Cells[i + 4, "F"] = datagrid_patente_sinnovedades.Rows[i].Cells[6].Value;
                    workSheet.Cells[i + 4, "G"] = datagrid_patente_sinnovedades.Rows[i].Cells[7].Value;
                    workSheet.Cells[i + 4, "H"] = datagrid_patente_sinnovedades.Rows[i].Cells[8].Value;
                    workSheet.Cells[i + 4, "I"] = datagrid_patente_sinnovedades.Rows[i].Cells[9].Value;
                    workSheet.Cells[i + 4, "J"] = datagrid_patente_sinnovedades.Rows[i].Cells[10].Value;
                    workSheet.Cells[i + 4, "K"] = datagrid_patente_sinnovedades.Rows[i].Cells[11].Value;
                    workSheet.Cells[i + 4, "L"] = datagrid_patente_sinnovedades.Rows[i].Cells[12].Value;
                    workSheet.Cells[i + 4, "M"] = datagrid_patente_sinnovedades.Rows[i].Cells[13].Value;
                    workSheet.Cells[i + 4, "N"] = datagrid_patente_sinnovedades.Rows[i].Cells[14].Value;
                    workSheet.Cells[i + 4, "O"] = datagrid_patente_sinnovedades.Rows[i].Cells[15].Value;
                    workSheet.Cells[i + 4, "P"] = datagrid_patente_sinnovedades.Rows[i].Cells[16].Value;
                    workSheet.Cells[i + 4, "Q"] = datagrid_patente_sinnovedades.Rows[i].Cells[17].Value;
                    workSheet.Cells[i + 4, "R"] = datagrid_patente_sinnovedades.Rows[i].Cells[18].Value;
                    workSheet.Cells[i + 4, "S"] = datagrid_patente_sinnovedades.Rows[i].Cells[19].Value;
                    workSheet.Cells[i + 4, "T"] = datagrid_patente_sinnovedades.Rows[i].Cells[20].Value;



                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "T" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
                workSheet.Range["A3", "T" + (row + 4)].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                workSheet.Range["A3", "T3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            }
            catch (Exception E)
            {
                Console.Write("Se canceló la exportación");
            }
        }

        public void muestradetalle(ListView lista)
        {
            try
            {
                String sCasoid = lista.SelectedItems[0].SubItems[4].Text;
                if (lista.SelectedItems[0].SubItems[1].Text != "")
                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }
        private void button64_Click(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_renovacion_marcatardia_viejaley.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                if (datagrid_renovacion_marcatardia_viejaley.CurrentRow.Cells[2].Value.ToString() != "")

                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void button72_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_declaracion_uso6.Rows)
            {

                row.Cells["DU6_seleccionar"].Value = true;

            }
        }

        private void button71_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_declaracion_uso6.Rows)
            {

                row.Cells["DU6_seleccionar"].Value = false;

            }
        }

        private void button74_Click(object sender, EventArgs e)
        {
            labelregistrosdeclaracion6anos.Text = "Cargando registros ...";
            String sAnodeclaracion = cbMesesanteconsulta6anos.Text;
            lvdeclaracionseisanos.Items.Clear();
            conect_robot con1 = new conect_robot();
            String sPlazoid = "";
            String sSend = "";
            String sSendnow = "";
            if (sAnodeclaracion != "")//no validamos la fecha a seleccionar
            {
                tbdelcarracion6anos.Text = "";
                List<ListViewItem> myItems = new List<ListViewItem>();
                int contador = 0;
                String queryinsert = "use jobconfig; SELECT  " +
                                       " war.PlazoId, " +
                                      " war.CasoId, " +
                                      " war.DocumentoId, " +
                                      " war.TipoPlazoDescrip, " +
                                      " war.ClienteNombre, " +
                                      " war.InteresadoNombre, " +
                                      " war.TipoSolicitudDescrip, " +
                                      " war.Marca, " +
                                      " war.SubTipoSolicitudDescripcion, " +
                                      " war.CasoProductosClase, " +
                                      " war.CasoNumeroExpedienteLargo, " +
                                      " war.CasoNumero, " +
                                      " war.ReferenciaNombre, " +
                                      " DATE_FORMAT(war.CasoFechaVigencia,'%d-%m-%Y') as CasoFechaVigencia, " +
                                      " war.anualidades, " +
                                      " war.PaisNombre, " +
                                      " DATE_FORMAT(war.CasoFechaRecepcion,'%d-%m-%Y') as CasoFechaRecepcion, " +
                                      " war.CasoFechaFilingCliente, " +
                                      " war.CasoNumConcedida, " +
                                      " war.DocumentoFecha, " +
                                      " war.DocumentoFechaVencimiento, " +
                                      " war.EstatusCasoId, " +
                                      " war.EstatusCasoDescrip, " +
                                      " war.tipoplazoid, " +
                                      " war.EstatusPlazoId, " +
                                      " war.EstatusPlazoDescrip, " +
                                      " war.PlazoFechaAtencion, " +
                                      " war.ContactoNombre, " +
                                      " war.ContactoEmail, " +
                                      " war.IdiomaOriginalID, " +
                                      " war.IdiomaId, " +
                                      " war.IdiomaClave, " +
                                      " war.Subject, " +
                                      " war.SendNow, " +
                                      " DATE_FORMAT(war.CasoFechaIni,'%d-%m-%Y') AS CasoFechaIni, " +
                                      " DATE_FORMAT(war.CasoFechaInidos,'%d-%m-%Y') AS CasoFechaInidos, " +
                                      " DATE_FORMAT(Get_Fechaultimo(war.CasoId, " +
                                      "  'warning_declaraciondeuso_erf'),'%d-%m-%Y') AS `FechaSended`, " +
                                      "  Get_countenviados(war.CasoId, " +
                                      "  'warning_declaraciondeuso_erf') AS `numenviados` " +
                                    " FROM " +
                                    "     jobconfig.warning_declaraciondeuso_erf as war where" +
                                    "(curdate() between ((CasoFechaConcesion + interval 6 year)- interval " + sAnodeclaracion + " month) and (CasoFechaConcesion + interval 6 year)+ interval 3 month) order by CasoFechaIni asc;";// +
                if (declaracionuso6 != null)
                {
                    declaracionuso6.Clear();
                }
                datagrid_declaracion_uso6.Rows.Clear();
                Action act = () =>
                {
                    MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);
                    while (respuestastringinsert.Read())
                    {
                        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
                        String sFechaultimoenviado = "";
                        try
                        {

                            String sPlazoId = validareader("PlazoId", "PlazoId", respuestastringinsert);
                            String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                            String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);

                            String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                            String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                            String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                            String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                            String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                            String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                            String sMarca = validareader("Marca", "Marca", respuestastringinsert);
                            String sInvento = "";
                            String sFechadiferencia = "";
                            String sFechaLimite = "";
                            String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                            String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                            String sCasoProductosClase = validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                            String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                            String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);

                            String sCasoFechaConcesion = validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);

                            String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                            String sCasoFechaInidos = validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                            String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                            String sDocumentoFechaRecepcion = validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                            String sDocumentoFechaRecepcion2meses = validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                            String sDocumentoFechaRecepcion4meses = validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                            String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                            String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                            String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                            String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                            String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                            String sDocumentoFecha = validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                            String sDocumentoFechaVencimiento = validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                            String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                            String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                            String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                            String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                            String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                            String sPlazoFechaAtencion = validareader("PlazoFechaAtencion", "PlazoFechaAtencion", respuestastringinsert);
                            String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                            String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                            String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                            String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                            String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                            String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                            String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                            String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                            String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);

                            int REC = 0;
                            String sUID_JobConfig = "a8050719-ceab-11e8-869b-000c2918erf9";
                            String FunctionName = "Get_Email_declaracionuso_erf";
                            String sViewName = "warning_declaraciondeuso_erf";


                            DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                            DateTime dFechaLimite = validafechavacia(sFechaLimite);
                            DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                            DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                            DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                            DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                            DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                            DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                            DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                            DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);
                            DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                            DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                            DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                            DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                            DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                            DateTime dFechaSended = validafechavacia(sFechaSended);

                            objMP_seleccionada declaracion_uso6 = new objMP_seleccionada(sPlazoId,
                                                                                        sCasoId,
                                                                                        sDocumentoId,
                                                                                        sTipoPlazoDescrip,
                                                                                        sClienteNombre,
                                                                                        sInteresadoNombre,
                                                                                        sTipoSolicitudDescrip,
                                                                                        sSubTipoSolicitudDescripcion,
                                                                                        sMarca,
                                                                                        sInvento,
                                                                                        sFechadiferencia,
                                                                                        dFechaLimite,
                                                                                        sCasoNumeroExpedienteLargo,
                                                                                        sCasoNumero,
                                                                                        sCasoProductosClase,
                                                                                        sReferenciaNombre,
                                                                                        dCasoFechaConcesion,
                                                                                        dCasoFechaVigencia,
                                                                                        dCasoFechaIni,
                                                                                        dCasoFechaInidos,
                                                                                        dCasoFechaFin,
                                                                                        dDocumentoFechaRecepcion,
                                                                                        dDocumentoFechaRecepcion2meses,
                                                                                        dDocumentoFechaRecepcion4meses,
                                                                                        sanualidades,
                                                                                        sPaisNombre,
                                                                                        dCasoFechaRecepcion,
                                                                                        dCasoFechaFilingCliente,
                                                                                        sCasoNumConcedida,
                                                                                        dDocumentoFecha,
                                                                                        dDocumentoFechaVencimiento,
                                                                                        sEstatusCasoId,
                                                                                        sEstatusCasoDescrip,
                                                                                        stipoplazoid,
                                                                                        sEstatusPlazoId,
                                                                                        sEstatusPlazoDescrip,
                                                                                        dPlazoFechaAtencion,
                                                                                        sContactoNombre,
                                                                                        sContactoEmail,
                                                                                        sIdiomaOriginalID,
                                                                                        sIdiomaId,
                                                                                        sIdiomaClave,
                                                                                        sSubject,
                                                                                        sSendNow,
                                                                                        dFechaSended,
                                                                                        snumenviados,
                                                                                        REC,
                                                                                        tbCorreodepruebas.Text,
                                                                                        sUID_JobConfig,
                                                                                        FunctionName,
                                                                                        sViewName,
                                                                                        sTipoSolicitudId
                                                                                        );
                            declaracionuso6.Add(declaracion_uso6);




                        }

                        catch (Exception Ex)
                        {
                            //MessageBox.Show("Mensaje "+Ex.Message);
                        }
                        //myItems.Add(listaagregar);
                        contador++;
                    }
                    respuestastringinsert.Close();
                    con1.Cerrarconexion();
                };
                using (Waitforcases form = new Waitforcases(act))
                {
                    form.ShowDialog();
                }
                //for (int x = 0; x < myItems.Count; x++)
                //{

                //    Lvdeclaraciondeuso.Items.Add(myItems[x]);
                //    Lvdeclaraciondeuso.FullRowSelect = true;
                //}
                foreach (var Obj_declaracion_uso6 in declaracionuso6)
                {

                    /*1*/
                    CheckBox checkboxcell = new CheckBox();

                    datagrid_declaracion_uso6.Rows.Add(Obj_declaracion_uso6.sCasoId, false,
              /*2*/        Obj_declaracion_uso6.sFechaSended,
              /*3*/        Obj_declaracion_uso6.snumenviados,
              /*4*/        Obj_declaracion_uso6.sPlazoId,
              /*5*/        Obj_declaracion_uso6.sCasoId,
              /*6*/        Obj_declaracion_uso6.sCasoNumero,
              /*7*/        Obj_declaracion_uso6.sCasoNumConcedida,//numero de registro
              /*8*/        Obj_declaracion_uso6.sMarca,
              /*9*/        Obj_declaracion_uso6.sTipoPlazoDescrip,
              /*10*/       Obj_declaracion_uso6.sClienteNombre,
              /*11*/       Obj_declaracion_uso6.sInteresadoNombre,
              /*12*/       Obj_declaracion_uso6.sContactoNombre,
              /*13*/       Obj_declaracion_uso6.sContactoEmail, //solicitante 
              /*14*/       Obj_declaracion_uso6.sSubject,
              /*15*/       Obj_declaracion_uso6.sTipoSolicitudDescrip,
              /*16*/       Obj_declaracion_uso6.sSubTipoSolicitudDescripcion,
              /*17*/       Obj_declaracion_uso6.sCasoNumeroExpedienteLargo,//No.expediente
              /*18*/       Obj_declaracion_uso6.sCasoProductosClase,//Clase
              /*19*/       Obj_declaracion_uso6.sReferenciaNombre,//referencia cliente 
              /*20*/       Obj_declaracion_uso6.sCasoFechaRecepcion, //fecha presentacion
              /*21*/       Obj_declaracion_uso6.sCasoFechaVigencia, //fecha concesion
              /*22*/       Obj_declaracion_uso6.sCasoFechaIni, //fecha declaracion 3 años
              /*23*/       Obj_declaracion_uso6.sCasoFechaInidos, //fecha declaracion 6 años
              /*24*/       "",
              /*25*/       "",
              /*26*/       Obj_declaracion_uso6.sDocumentoFechaRecepcion,
              /*27*/       Obj_declaracion_uso6.sDocumentoFechaRecepcion2meses,
              /*28*/       Obj_declaracion_uso6.sDocumentoFechaRecepcion4meses,
              /*29*/       Obj_declaracion_uso6.sanualidades,
              /*30*/       Obj_declaracion_uso6.sPaisNombre,
              /*31*/       Obj_declaracion_uso6.sCasoFechaFilingCliente,
              /*32*/       Obj_declaracion_uso6.sDocumentoFecha,
              /*33*/       Obj_declaracion_uso6.sDocumentoFechaVencimiento,
              /*34*/       Obj_declaracion_uso6.sEstatusCasoId,
              /*35*/       Obj_declaracion_uso6.stipoplazoid,
              /*36*/       Obj_declaracion_uso6.sEstatusPlazoId,
              /*37*/       Obj_declaracion_uso6.sPlazoFechaAtencion,
              /*38*/       Obj_declaracion_uso6.sIdiomaOriginalID,
              /*39*/       Obj_declaracion_uso6.sIdiomaId,
              /*40*/       Obj_declaracion_uso6.sIdiomaClave,
              /*41*/       Obj_declaracion_uso6.sEstatusCasoDescrip,
              /*42*/       Obj_declaracion_uso6.sEstatusPlazoDescrip);

                }
                AdjustColumnOrder_DU6();
                tbdelcarracion6anos.Text = contador + "";
                labelregistrosdeclaracion6anos.Text = "";

            }
            else
            {
                tbLoading.Text = "";
                //debe verificarse que existan las fechas correctas 
                MessageBox.Show("Debe seleccionar un mes.");
            }
        }

        private void AdjustColumnOrder_DU6()
        {
            datagrid_declaracion_uso6.Columns["DU6_casoid"].DisplayIndex = 0;// DU6_casoid
            datagrid_declaracion_uso6.Columns["DU6_seleccionar"].DisplayIndex = 1;// DU6_seleccionar
            datagrid_declaracion_uso6.Columns["DU6_Ultimi_correo"].DisplayIndex = 2;// DU6_Ultimi_correo
            datagrid_declaracion_uso6.Columns["DU6_Correos_enviados"].DisplayIndex = 3;// DU6_Correos_enviados
            datagrid_declaracion_uso6.Columns["DU6_plazoid"].DisplayIndex = 4;// DU6_plazoid
            datagrid_declaracion_uso6.Columns["DU6_casoid_view"].DisplayIndex = 5;// DU6_casoid_view
            datagrid_declaracion_uso6.Columns["DU6_casonumero"].DisplayIndex = 6;// DU6_casonumero
            datagrid_declaracion_uso6.Columns["DU6_Numero_registro"].DisplayIndex = 7;// DU6_Numero_registro antes: caso numero concedida
            datagrid_declaracion_uso6.Columns["DU6_marca"].DisplayIndex = 8;// DU6_marca
            datagrid_declaracion_uso6.Columns["DU6_tipoplazodescrip"].DisplayIndex = 9;// DU6_tiposoldescrip
            datagrid_declaracion_uso6.Columns["DU6_clientenombre"].DisplayIndex = 10;// DU6_clientenombre
            datagrid_declaracion_uso6.Columns["DU6_solicitante"].DisplayIndex = 11;// DU6_solicitante
            datagrid_declaracion_uso6.Columns["DU6_contactonombre"].DisplayIndex = 12;// DU6_contactonombre
            datagrid_declaracion_uso6.Columns["DU6_contactomail"].DisplayIndex = 13;// DU6_contactomail
            datagrid_declaracion_uso6.Columns["DU6_subject"].DisplayIndex = 14;// DU6_subject
            datagrid_declaracion_uso6.Columns["DU6_tiposoldescrip"].DisplayIndex = 15;// DU6_tiposoldescrip
            datagrid_declaracion_uso6.Columns["DU6_subtiposoldesc"].DisplayIndex = 16;// DU6_subtiposoldesc
            datagrid_declaracion_uso6.Columns["DU6_nexp"].DisplayIndex = 17;// DU6_nexp
            datagrid_declaracion_uso6.Columns["DU6_clase"].DisplayIndex = 18;// DU6_clase
            datagrid_declaracion_uso6.Columns["DU6_Referencia_nombre"].DisplayIndex = 19;// DU6_Referencia_nombre
            datagrid_declaracion_uso6.Columns["DU6_fechapresentacion"].DisplayIndex = 20;// DU6_fechapresentacion
            datagrid_declaracion_uso6.Columns["DU6_fechaconcesion"].DisplayIndex = 21;// DU6_fechaconcesion
            datagrid_declaracion_uso6.Columns["DU6_fechadeclaracion_3"].DisplayIndex = 22;// DU6_fechadeclaracion_3
            datagrid_declaracion_uso6.Columns["DU6_fechadeclaracion_6"].DisplayIndex = 23;// DU6_fechadeclaracion_6
            datagrid_declaracion_uso6.Columns["DU6_dias_proximo_mail"].DisplayIndex = 24;// DU6_dias_proximo_mail
            datagrid_declaracion_uso6.Columns["DU6_fecha_proximo_mail"].DisplayIndex = 25;// DU6_fecha_proximo_mail
            datagrid_declaracion_uso6.Columns["DU6_documento_fecha_recepcion"].DisplayIndex = 26;// DU6_documento_fecha_recepcion
            datagrid_declaracion_uso6.Columns["DU6_documento_fecha_recepcion_2"].DisplayIndex = 27;// DU6_documento_fecha_recepcion_2
            datagrid_declaracion_uso6.Columns["DU6_documento_fecha_recepcion_4"].DisplayIndex = 28;// DU6_documento_fecha_recepcion_4
            datagrid_declaracion_uso6.Columns["DU6_anualidades"].DisplayIndex = 29;// DU6_anualidades
            datagrid_declaracion_uso6.Columns["DU6_paisnombre"].DisplayIndex = 30;// DU6_paisnombre
            datagrid_declaracion_uso6.Columns["DU6_fecha_filing_cliente"].DisplayIndex = 31;// DU6_fecha_filing_cliente
            datagrid_declaracion_uso6.Columns["DU6_documento_fecha"].DisplayIndex = 32;// DU6_documento_fecha
            datagrid_declaracion_uso6.Columns["DU6_documento_fecha_vencimiento"].DisplayIndex = 33;// DU6_documento_fecha_vencimiento
            datagrid_declaracion_uso6.Columns["DU6_estatus_caso"].DisplayIndex = 34;// DU6_estatus_caso
            datagrid_declaracion_uso6.Columns["DU6_tipo_plazo_id"].DisplayIndex = 35;// DU6_tipo_plazo_id
            datagrid_declaracion_uso6.Columns["DU6_estatus_plazo_id"].DisplayIndex = 36;// DU6_estatus_plazo_id
            datagrid_declaracion_uso6.Columns["DU6_plazo_fecha_atencion"].DisplayIndex = 37;// DU6_plazo_fecha_atencion
            datagrid_declaracion_uso6.Columns["DU6_idioma_original_id"].DisplayIndex = 38;// DU6_idioma_original_id
            datagrid_declaracion_uso6.Columns["DU6_idioma_id"].DisplayIndex = 39;// DU6_idioma_id
            datagrid_declaracion_uso6.Columns["DU6_indiomaclave"].DisplayIndex = 40;// DU6_indiomaclave
            datagrid_declaracion_uso6.Columns["DU6_estatuscasodescr"].DisplayIndex = 41;// DU6_estatuscasodescr
            datagrid_declaracion_uso6.Columns["DU6_estatusplazodescr"].DisplayIndex = 42;// DU6_estatusplazodescr




        }
        //        Action act = () =>
        //            {
        //                MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);
        //                while (respuestastringinsert.Read())
        //                {
        //                    //con el casoid obtendremos el valor del xUID_JobConfig para despues traer get body y enviar el mail en el momento con la funcion doble click
        //                    String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);

        //                    ListViewItem listaagregar = new ListViewItem("", 0);
        //                    ListViewItem checks = new ListViewItem();
        //                    //para marcas
        //                    listaagregar.Checked = false;
        //                    listaagregar.SubItems.Add(validareader("FechaSended", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("numenviados", "CasoId", respuestastringinsert));

        //                    listaagregar.SubItems.Add(validareader("PlazoId", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("CasoNumero", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("CasoNumConcedida", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("DocumentoId", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("TipoPlazoDescrip", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("ClienteNombre", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("InteresadoNombre", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("Marca", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("CasoProductosClase", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("ReferenciaNombre", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("CasoFechaVigencia", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("CasoFechaIni", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("CasoFechaInidos", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion2meses", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion4meses", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add("");
        //                    listaagregar.SubItems.Add("");
        //                    listaagregar.SubItems.Add(validareader("anualidades", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("PaisNombre", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("CasoFechaFilingCliente", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("DocumentoFecha", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("DocumentoFechaVencimiento", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("EstatusCasoId", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("tipoplazoid", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("EstatusPlazoId", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("EstatusPlazoDescrip", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("PlazoFechaAtencion", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("ContactoNombre", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("ContactoEmail", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("IdiomaOriginalID", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("IdiomaId", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("IdiomaClave", "CasoId", respuestastringinsert));
        //                    listaagregar.SubItems.Add(validareader("Subject", "CasoId", respuestastringinsert));
        //                    myItems.Add(listaagregar);
        //                    contador++;
        //                }
        //                respuestastringinsert.Close();
        //                con1.Cerrarconexion();
        //            };
        //        using (Waitforcases form = new Waitforcases(act))
        //        {
        //            form.ShowDialog();
        //        }
        //        for (int x = 0; x < myItems.Count; x++)
        //        {
        //            lvdeclaracionseisanos.Items.Add(myItems[x]);
        //            lvdeclaracionseisanos.FullRowSelect = true;
        //        }
        //        tbdelcarracion6anos.Text = contador + "";
        //        labelregistrosdeclaracion6anos.Text = "";

        //    }
        //    else
        //    {
        //        labelregistrosdeclaracion6anos.Text = "";
        //        //debe verificarse que existan las fechas correctas  
        //        MessageBox.Show("Debe seleccionar un mes.");

        //    }
        //}

        private void button73_Click(object sender, EventArgs e)
        {
            ///Aquí enviaremos los seleccionados 
            //int iNumerodechecados = Lvdeclaraciondeuso.CheckedItems.Count;
            //tbCactualizadosdeclaracio3anos.Text = "";
            //tbCenviadosDeclaracion3anos.Text = "";
            try
            {
                // contamos el numero de marcas seleccionadas
                int contador = 0;
                for (int z = 0; z < datagrid_declaracion_uso6.Rows.Count; z++)
                {
                    bool valor = (bool)datagrid_declaracion_uso6.Rows[z].Cells[1].Value;
                    if (valor)
                    {
                        contador++;
                    }
                }

                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + "correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;
                    //definimos la prueba como falso a menos de que tenga capturado el correo de prueba
                    Boolean bCorreodepeuba = false;
                    if (tbdeclaracion6anoscorreoprueba.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//bandera para no mandar copias de correo
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbdeclaracion6anoscorreoprueba.Text);
                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }
                    for (int y = 0; y < datagrid_declaracion_uso6.Rows.Count; y++)
                    {
                        bool valor = (bool)datagrid_declaracion_uso6.Rows[y].Cells[1].Value;
                        if (valor)
                        {
                            //obtenemos el objeto de declaracion de uso 3 años seleccionada del datagridview por medio de la busqueda de su casoid
                            String scasoid = datagrid_declaracion_uso6.Rows[y].Cells[0].Value.ToString();
                            objMP_seleccionada obj_Declaraciondeuso6 = declaracionuso6.Find(x => x.sCasoId == scasoid);
                            //declaracion_uso6


                            String sDays = "-10000";
                            String sTipoPlazoId = obj_Declaraciondeuso6.stipoplazoid;
                            String sPlazoId = obj_Declaraciondeuso6.sPlazoId;
                            String sEstatusPlazoId = obj_Declaraciondeuso6.sEstatusPlazoId;
                            String sUID_Jobconfig = "";
                            String sCasoId = obj_Declaraciondeuso6.sCasoId;
                            String sTiposolicitudid = obj_Declaraciondeuso6.sTipoSolicitudId;
                            String sDocumentoid = obj_Declaraciondeuso6.sDocumentoId;
                            String sCasoNumero = obj_Declaraciondeuso6.sCasoNumero;
                            String sContactoEmail = obj_Declaraciondeuso6.sContactoEmail;// "eramiref92@gmail.com";//´Para pruebas
                            String sIdiomaClave = obj_Declaraciondeuso6.sIdiomaClave;
                            String sSubject = obj_Declaraciondeuso6.sSubject;
                            int REC = 0;
                            Action act = () =>
                            {
                                //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                                //por lo que generamos el siguiente query
                                conect_robot con = new conect_robot();
                                String datosconectjobconfig = con.getdatavalues();
                                //String sUID_JobConfig = obj_Declaraciondeuso3.sobj_UID_JobConfig;
                                //String FunctionName = obj_Declaraciondeuso3.Fobj_unctionName;
                                //String sViewName = obj_Declaraciondeuso3.sobj_ViewName;
                                String sUID_JobConfig = "a8050719-ceab-11e8-869b-000c2918erf9";
                                String FunctionName = "Get_Email_declaracionuso_erf";
                                String sViewName = "warning_declaraciondeuso_erf";
                                conect_robot valores = new conect_robot();
                                String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

                                //resps_UIDJobconfig.Close();
                                String sCorreodestino = "";

                                if (bCorreodepeuba)
                                {
                                    sCorreodestino = tbdeclaracion6anoscorreoprueba.Text;//Prueba de correo
                                }
                                else
                                {
                                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                                }
                                String[] correos = sCorreodestino.Split(',');
                                if (correos.Length > 1)
                                {
                                    sCorreodestino = correos[0];
                                    for (int z = 1; z < correos.Length; z++)
                                    {
                                        sGlobalSmtpCC += "," + correos[z];
                                    }

                                }
                                //String sAsunto = listView1.CheckedItems[x].SubItems[42].Text;
                                //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                                iContadorcorreossend += iresult;
                                //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
                                if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                                {
                                    int iCasoid = Int32.Parse(sCasoId);
                                    int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                                    int isDocumentoid;
                                    if (sDocumentoid == "")
                                    {
                                        isDocumentoid = 0;
                                    }
                                    else
                                    {
                                        isDocumentoid = Int32.Parse(sDocumentoid);
                                    }

                                    int iDays = Int32.Parse("-10000");
                                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                    int iPlazoId = Int32.Parse(sPlazoId);
                                    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                                }
                            };
                            using (Waitforsendmail obj = new Waitforsendmail(act))
                            {
                                obj.ShowDialog();
                            }
                            tbCenviadosDeclaracion3anos.Text = iContadorcorreossend + "";
                            tbCactualizadosdeclaracio3anos.Text = iContadorcorreosupdates + "";

                        }
                    }
                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates);
                }
            }
            catch (Exception ex)
            {

            }
            ////Aquí enviaremos los seleccionados 
            //tbenviadosdeclaracion6anos.Text = "";
            //tbactualizadosdeclaracion6anos.Text = "";
            //int iNumerodechecados = lvdeclaracionseisanos.CheckedItems.Count;
            //DialogResult oDlgRes;
            //oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + iNumerodechecados + "correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
            //if (oDlgRes == DialogResult.Yes)
            //{
            //    int iContadorcorreossend = 0;
            //    int iContadorcorreosupdates = 0;
            //    Boolean bCorreodepeuba = false;

            //    if (tbdeclaracion6anoscorreoprueba.Text != "")
            //    {
            //        bCorreodepeuba = true;
            //        bPruebadecorreo = true;//bandera para no mandar copias de correo
            //        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbdeclaracion6anoscorreoprueba.Text);
            //    }
            //    else
            //    {
            //        bPruebadecorreo = false;
            //    }
            //    for (int x = 0; x < iNumerodechecados; x++)
            //    {
            //        String sDays = "-10001";
            //        String sTipoPlazoId = lvdeclaracionseisanos.CheckedItems[x].SubItems[33].Text;
            //        String sPlazoId = lvdeclaracionseisanos.CheckedItems[x].SubItems[3].Text;
            //        String sEstatusPlazoId = lvdeclaracionseisanos.CheckedItems[x].SubItems[34].Text;
            //        String sUID_Jobconfig = "";
            //        String sCasoId = lvdeclaracionseisanos.CheckedItems[x].SubItems[4].Text;
            //        String sDocumentoid = lvdeclaracionseisanos.CheckedItems[x].SubItems[7].Text;
            //        String sCasoNumero = lvdeclaracionseisanos.CheckedItems[x].SubItems[5].Text;
            //        String sContactoEmail = lvdeclaracionseisanos.CheckedItems[x].SubItems[38].Text;
            //        String sIdiomaClave = lvdeclaracionseisanos.CheckedItems[x].SubItems[41].Text;
            //        String sSubject = lvdeclaracionseisanos.CheckedItems[x].SubItems[42].Text;
            //        int REC = Get_Rec(Convert.ToInt32(sPlazoId));
            //        //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);

            //        //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
            //        //por lo que generamos el siguiente query
            //        conect_robot con = new conect_robot();
            //        String datosconectjobconfig = con.getdatavalues();
            //        //String sQuerygetUidjobconfig = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
            //        //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
            //        String sUID_JobConfig = "a8050719-ceab-11e8-869b-000c2918erf9";
            //        String FunctionName = "Get_Email_declaracionuso_erf";
            //        String sViewName = "warning_declaraciondeuso_erf";
            //        //while (resps_UIDJobconfig.Read())
            //        //{
            //        //    sUID_JobConfig = validareader("UID_JobConfig", "UID_JobConfig", resps_UIDJobconfig);
            //        //    FunctionName = validareader("FunctionName", "UID_JobConfig", resps_UIDJobconfig);
            //        //    sViewName = validareader("ViewName", "UID_JobConfig", resps_UIDJobconfig);
            //        //}
            //        Action act = () =>
            //        {
            //            conect_robot valores = new conect_robot();
            //            String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);
            //            String sCorreodestino = "";
            //            if (bCorreodepeuba)
            //            {
            //                sCorreodestino = tbdeclaracion6anoscorreoprueba.Text;//Prueba de correo
            //            }
            //            else
            //            {
            //                sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
            //            }
            //            String[] correos = sCorreodestino.Split(',');
            //            if (correos.Length > 1)
            //            {
            //                sCorreodestino = correos[0];
            //                for (int z = 1; z < correos.Length; z++)
            //                {
            //                    sGlobalSmtpCC += "," + correos[z];
            //                }
            //            }
            //            int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
            //            iContadorcorreossend += iresult;
            //            //bCorreodepeuba = false;//solo para probar IMPORTANTE QUITAR
            //            if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
            //            {
            //                int iCasoid = Int32.Parse(sCasoId);
            //                int isDocumentoid;
            //                if (sDocumentoid == "")
            //                {
            //                    isDocumentoid = 0;
            //                }
            //                else
            //                {
            //                    isDocumentoid = Int32.Parse(sDocumentoid);
            //                }

            //                int iDays = Int32.Parse("-10000");
            //                int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
            //                int iPlazoId = Int32.Parse(sPlazoId);
            //                iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
            //            }
            //        };
            //        using (Waitforsendmail obj = new Waitforsendmail(act))
            //        {
            //            obj.ShowDialog();
            //        }
            //        tbenviadosdeclaracion6anos.Text = iContadorcorreossend + "";
            //        tbactualizadosdeclaracion6anos.Text = iContadorcorreosupdates + "";
            //    }
            //    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates + " Registros en la base de datos King");
            //}
            //else
            //{
            //    //no hacemos nada por que cancelo
            //}
        }

        private void button70_Click(object sender, EventArgs e)
        {
            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Plazoid";
                workSheet.Cells[3, "E"] = "Casoid";
                workSheet.Cells[3, "F"] = "Casonumero";
                workSheet.Cells[3, "G"] = "No.de Registro";
                workSheet.Cells[3, "H"] = "Marca";
                workSheet.Cells[3, "I"] = "tipoplazadescrip";
                workSheet.Cells[3, "J"] = "clienteNombre";
                workSheet.Cells[3, "K"] = "InteresadoNombre";
                workSheet.Cells[3, "L"] = "ContactoNombre";
                workSheet.Cells[3, "M"] = "ContactoEmail";
                workSheet.Cells[3, "N"] = "Subject";
                workSheet.Cells[3, "O"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "P"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "Q"] = "No.de Expediente";
                workSheet.Cells[3, "R"] = "Clase";
                workSheet.Cells[3, "S"] = "Referencia Cliente";
                workSheet.Cells[3, "T"] = "Fecha de Presentación";
                workSheet.Cells[3, "U"] = "Fecha de Concesión";
                workSheet.Cells[3, "V"] = "Fecha declaración 3 años";
                workSheet.Cells[3, "W"] = "Fecha declaración 6 años";
                workSheet.Cells[3, "X"] = "Pais Nombre";
                workSheet.Cells[3, "Y"] = "IdiomaClave";


                workSheet.Cells[1, "A"] = "Declaración de Uso 6 años";
                workSheet.Range["A1", "G1"].Merge();
                workSheet.Range["A1", "G1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "G1"].Font.Bold = true;
                workSheet.Range["A1", "G1"].Font.Size = 20;
                var row = 3;

                for (int i = 1; i < datagrid_declaracion_uso6.Rows.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = datagrid_declaracion_uso6.Rows[i].Cells[1].Value;
                    workSheet.Cells[i + 4, "B"] = datagrid_declaracion_uso6.Rows[i].Cells[2].Value;
                    workSheet.Cells[i + 4, "C"] = datagrid_declaracion_uso6.Rows[i].Cells[3].Value;
                    workSheet.Cells[i + 4, "D"] = datagrid_declaracion_uso6.Rows[i].Cells[4].Value;
                    workSheet.Cells[i + 4, "E"] = datagrid_declaracion_uso6.Rows[i].Cells[5].Value;
                    workSheet.Cells[i + 4, "F"] = datagrid_declaracion_uso6.Rows[i].Cells[6].Value;
                    workSheet.Cells[i + 4, "G"] = datagrid_declaracion_uso6.Rows[i].Cells[7].Value;
                    workSheet.Cells[i + 4, "H"] = datagrid_declaracion_uso6.Rows[i].Cells[8].Value;
                    workSheet.Cells[i + 4, "I"] = datagrid_declaracion_uso6.Rows[i].Cells[9].Value;
                    workSheet.Cells[i + 4, "J"] = datagrid_declaracion_uso6.Rows[i].Cells[10].Value;
                    workSheet.Cells[i + 4, "K"] = datagrid_declaracion_uso6.Rows[i].Cells[11].Value;
                    workSheet.Cells[i + 4, "L"] = datagrid_declaracion_uso6.Rows[i].Cells[12].Value;
                    workSheet.Cells[i + 4, "M"] = datagrid_declaracion_uso6.Rows[i].Cells[13].Value;
                    workSheet.Cells[i + 4, "N"] = datagrid_declaracion_uso6.Rows[i].Cells[14].Value;
                    workSheet.Cells[i + 4, "O"] = datagrid_declaracion_uso6.Rows[i].Cells[15].Value;
                    workSheet.Cells[i + 4, "P"] = datagrid_declaracion_uso6.Rows[i].Cells[16].Value;
                    workSheet.Cells[i + 4, "Q"] = datagrid_declaracion_uso6.Rows[i].Cells[17].Value;
                    workSheet.Cells[i + 4, "R"] = datagrid_declaracion_uso6.Rows[i].Cells[18].Value;
                    workSheet.Cells[i + 4, "S"] = datagrid_declaracion_uso6.Rows[i].Cells[19].Value;
                    workSheet.Cells[i + 4, "T"] = datagrid_declaracion_uso6.Rows[i].Cells[20].Value;
                    workSheet.Cells[i + 4, "U"] = datagrid_declaracion_uso6.Rows[i].Cells[21].Value;
                    workSheet.Cells[i + 4, "V"] = datagrid_declaracion_uso6.Rows[i].Cells[22].Value;
                    workSheet.Cells[i + 4, "W"] = datagrid_declaracion_uso6.Rows[i].Cells[23].Value;
                    workSheet.Cells[i + 4, "X"] = datagrid_declaracion_uso6.Rows[i].Cells[30].Value;
                    workSheet.Cells[i + 4, "Y"] = datagrid_declaracion_uso6.Rows[i].Cells[40].Value;

                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "Y" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
                workSheet.Range["A3", "Y" + (row + 4)].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                workSheet.Range["A3", "Y3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            }
            catch (Exception E)
            {
                Console.Write("Se canceló la exportación");
            }
        }

        private void button69_Click(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_declaracion_uso6.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                if (datagrid_declaracion_uso6.CurrentRow.Cells[2].Value.ToString() != "")

                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void button65_Click(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_renovacion_marca_porano_viejaley.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                if (datagrid_renovacion_marca_porano_viejaley.CurrentRow.Cells[2].Value.ToString() != "")

                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void button66_Click(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_patentes_anualidades.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                if (datagrid_patentes_anualidades.CurrentRow.Cells[2].Value.ToString() != "")

                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            //fLogin.Close();
            this.Close();
        }

        private void button67_Click(object sender, EventArgs e)
        {
            muestradetalle(lvdocprioridad);
        }

        private void button68_Click(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_cita_pago.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                if (datagrid_cita_pago.CurrentRow.Cells[2].Value.ToString() != "")

                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void button58_Click(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_patente_sinnovedades.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                if (datagrid_patente_sinnovedades.CurrentRow.Cells[2].Value.ToString() != "")

                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void button79_Click(object sender, EventArgs e)
        {

            labelDisenosLoading.Text = "Cargando registros ...";
            tbcorreosenviadosdisenos.Text = "";
            tbCorreosactualizadosdisneos.Text = "";

            MySqlDataReader respuestastringinsert;
            int conuntpatentes = 0;
            try
            {
                tbcountDisenos.Text = "";
                lvDisneos.Items.Clear();
                conect_robot con1 = new conect_robot();
                String sPlazoid = "";
                String sSend = "";
                String sSendnow = "";
                //
                List<ListViewItem> myItems = new List<ListViewItem>();
                //String sFechauno = cambiaformatofecha(tbFechainiciopatentes.Text);
                //String sFechados = cambiaformatofecha(tbFechafinpatentes.Text);
                //String queryinsert = "SELECT * FROM jobconfig.warning_citapago_135_13_2";
                String queryinsert = " use jobconfig; SELECT " +
                                        " war.PlazoId, " +
                                        " war.CasoId, " +
                                        " war.DocumentoId, " +
                                        " war.TipoPlazoDescrip, " +
                                        " war.ClienteNombre, " +
                                        " war.InteresadoNombre, " +
                                        " war.TipoSolicitudDescrip, " +
                                        " war.SubTipoSolicitudDescripcion, " +
                                        " war.CasoNumeroExpedienteLargo, " +
                                        " war.CasoNumero, " +
                                        " war.ReferenciaNombre, " +
                                        " war.CasoFechaVigencia, " +
                                        " war.anualidades, " +
                                        " war.PaisNombre, " +
                                        " war.CasoFechaRecepcion, " +
                                        " war.CasoFechaFilingCliente, " +
                                        " war.CasoNumConcedida, " +
                                        " war.DocumentoFecha, " +
                                        " war.DocumentoFechaVencimiento, " +
                                        " war.EstatusCasoId, " +
                                        " war.EstatusCasoDescrip, " +
                                        " war.tipoplazoid, " +
                                        " war.EstatusPlazoId, " +
                                        " war.EstatusPlazoDescrip, " +
                                        " war.PlazoFechaAtencion, " +
                                        " war.ContactoNombre, " +
                                        " war.ContactoEmail, " +
                                        " war.IdiomaOriginalID, " +
                                        " war.IdiomaId, " +
                                        " war.IdiomaClave, " +
                                        " war.Subject, " +
                                        " war.SendNow, " +
                                        " war.CasoFechaIni as CasoFechaIni, " +
                                        " war.CasoFechaFin as CasoFechaFin, " +
                                        " Get_Fechaultimo(war.CasoId, " +
                                        "  'warning_citapago_3y4') AS `FechaSended`, " +
                                        "  Get_countenviados(war.CasoId, " +
                                        "  'warning_citapago_3y4') AS `numenviados` " +
                                        "FROM jobconfig.warning_citapago_3y4 as war where war.tipodiseño = 'c';";
                // where CasoFechaVigencia >= '"+sFechauno+"' AND CasoFechaVigencia <= '"+sFechados+"' ;";
                //String queryinsert = "SELECT * FROM jobconfig.warning_pagoanualidad_6_33_2 limit 25;";// where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
                //String queryinsert = "SELECT * FROM jobconfig.warning_renovacionmarca_20_34_2 where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";

                Action act = () =>
                {
                    respuestastringinsert = con1.getdatareader(queryinsert);
                    while (respuestastringinsert.Read())
                    {

                        CheckBox obje = new CheckBox();
                        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
                        ListViewItem listaagregar = new ListViewItem("", 0);
                        ListViewItem checks = new ListViewItem();

                        //Para warning_documentosprioridad
                        listaagregar.SubItems.Add(validareader("FechaSended", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("numenviados", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("PlazoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoNumero", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoNumConcedida", "CasoId", respuestastringinsert));

                        listaagregar.SubItems.Add(validareader("DocumentoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("TipoPlazoDescrip", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("ClienteNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("InteresadoNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));

                        listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("ReferenciaNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaVigencia", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaIni", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaFin", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));

                        listaagregar.SubItems.Add("");
                        listaagregar.SubItems.Add("");
                        listaagregar.SubItems.Add(validareader("anualidades", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("PaisNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaFilingCliente", "CasoId", respuestastringinsert));

                        listaagregar.SubItems.Add(validareader("DocumentoFecha", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("DocumentoFechaVencimiento", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("EstatusCasoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("tipoplazoid", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("EstatusPlazoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("EstatusPlazoDescrip", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("PlazoFechaAtencion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("ContactoNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("ContactoEmail", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("IdiomaOriginalID", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("IdiomaId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("IdiomaClave", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("Subject", "CasoId", respuestastringinsert));
                        /*listaagregar.SubItems.Add(validareader("SendNow", "CasoId", respuestastringinsert));*/
                        myItems.Add(listaagregar);
                        //lwpatentetes.Items.Add(listaagregar);
                        //lwpatentetes.FullRowSelect = true;
                        conuntpatentes++;
                    }
                    respuestastringinsert.Close();
                    con1.Cerrarconexion();
                };
                using (Waitforcases form = new Waitforcases(act))
                {
                    form.ShowDialog();
                }
                for (int x = 0; x < myItems.Count; x++)
                {
                    lvDisneos.Items.Add(myItems[x]);
                }
                labelDisenosLoading.Text = "";
                tbcountDisenos.Text = conuntpatentes + "";

                //}
                //else {
                //    MessageBox.Show("Debe ingresar fechas para poder consultar");
                //}
            }
            catch (Exception E)
            {
                labelDisenosLoading.Text = "";
                tbcountDisenos.Text = conuntpatentes + "";
                //respuestastringinsert.Close();
            }
        }

        private void button78_Click(object sender, EventArgs e)
        {
            int iNumerodechecados = lvDisneos.CheckedItems.Count;
            tbcorreosenviadosdisenos.Text = "";
            tbCorreosactualizadosdisneos.Text = "";
            DialogResult oDlgRes;
            oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + iNumerodechecados + "correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
            if (oDlgRes == DialogResult.Yes)
            {
                int iContadorcorreossend = 0;
                int iContadorcorreosupdates = 0;
                Boolean bCorreodepeuba = false;
                if (tbCorreopruebaDisenos.Text != "")
                {
                    bCorreodepeuba = true;
                    bPruebadecorreo = true;
                    MessageBox.Show("Se enviarán los correos seleccionados a:" + tbCorreopruebaDisenos.Text);
                }
                else
                {
                    bPruebadecorreo = false;
                }
                for (int x = 0; x < iNumerodechecados; x++)
                {
                    //#CasoId 4
                    //#ContactoEmail 38
                    //#IdiomaClave 41
                    //#Subject 42

                    String sDays = "-10000";
                    String sTipoPlazoId = lvDisneos.CheckedItems[x].SubItems[33].Text;
                    String sPlazoId = lvDisneos.CheckedItems[x].SubItems[3].Text;
                    String sEstatusPlazoId = lvDisneos.CheckedItems[x].SubItems[34].Text;
                    String sUID_Jobconfig = "";
                    String sCasoId = lvDisneos.CheckedItems[x].SubItems[4].Text;
                    String sTiposolicitudid = "1";//pendiente
                    String sDocumentoid = lvDisneos.CheckedItems[x].SubItems[7].Text;
                    String sCasoNumero = lvDisneos.CheckedItems[x].SubItems[5].Text;
                    String sContactoEmail = lvDisneos.CheckedItems[x].SubItems[38].Text;
                    String sIdiomaClave = lvDisneos.CheckedItems[x].SubItems[41].Text;
                    String sSubject = lvDisneos.CheckedItems[x].SubItems[42].Text;
                    int REC = Get_Rec(Convert.ToInt32(sPlazoId));

                    //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);
                    //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                    //por lo que generamos el siguiente query
                    conect_robot con = new conect_robot();
                    String datosconectjobconfig = con.getdatavalues();
                    //String  = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
                    //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
                    String sUID_JobConfig = "653071e9-ceaa-11e8-869b-disenostipoc";
                    String FunctionName = "Get_Email_CitaPago_3_4";
                    String sViewName = "warning_citapago_3y4";
                    //while (resps_UIDJobconfig.Read())
                    //{
                    //    sUID_JobConfig = validareader("UID_JobConfig", "UID_JobConfig", resps_UIDJobconfig);
                    //    FunctionName = validareader("FunctionName", "UID_JobConfig", resps_UIDJobconfig);
                    //    sViewName = validareader("ViewName", "UID_JobConfig", resps_UIDJobconfig);
                    //}
                    String copiacorreocliente = "";
                    Action act = () =>
                    {
                        conect_robot valores = new conect_robot();
                        sIdiomaClave = "EN";
                        String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

                        //resps_UIDJobconfig.Close();
                        String sCorreodestino = "";

                        if (bCorreodepeuba)
                        {
                            sCorreodestino = tbCorreopruebaDisenos.Text;//Prueba de correo
                        }
                        else
                        {
                            sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                        }
                        String[] correos = sCorreodestino.Split(',');
                        if (correos.Length > 1)
                        {
                            sCorreodestino = correos[0];
                            for (int z = 1; z < correos.Length; z++)
                            {
                                copiacorreocliente += correos[z] + ",";
                            }

                        }
                        //copiacorreocliente = "";
                        //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                        int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, copiacorreocliente);
                        iContadorcorreossend += iresult;
                        //bCorreodepeuba = false;//solo para probar IMPORTANTE QUITAR
                        if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                        {
                            int iCasoid = Int32.Parse(sCasoId);
                            int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                            int isDocumentoid;
                            if (sDocumentoid == "")
                            {
                                isDocumentoid = 0;
                            }
                            else
                            {
                                isDocumentoid = Int32.Parse(sDocumentoid);
                            }

                            int iDays = Int32.Parse("-10000");
                            int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                            int iPlazoId = Int32.Parse(sPlazoId);
                            iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                        }
                    };
                    using (Waitforsendmail obj = new Waitforsendmail(act))
                    {
                        obj.ShowDialog();
                    }

                    tbcorreosenviadosdisenos.Text = iContadorcorreossend + "";
                    tbCorreosactualizadosdisneos.Text = iContadorcorreosupdates + "";
                }
                MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates + " Registros en la base de datos King");
            }
            else
            {
                //no hacemos nada por que cancelo
            }
        }

        private void button85_Click(object sender, EventArgs e)
        {
            labelPsinnovedades.Text = "Cargando registros ...";
            tbcorreosenviadosdisenos.Text = "";
            tbCorreosactualizadosdisneos.Text = "";

            MySqlDataReader respuestastringinsert;
            int conuntpatentes = 0;
            try
            {

                tbCountdisenosabde.Text = "";

                lvDisenosabde.Items.Clear();
                conect_robot con1 = new conect_robot();
                String sPlazoid = "";
                String sSend = "";
                String sSendnow = "";
                //
                List<ListViewItem> myItems = new List<ListViewItem>();
                //String sFechauno = cambiaformatofecha(tbFechainiciopatentes.Text);
                //String sFechados = cambiaformatofecha(tbFechafinpatentes.Text);
                //String queryinsert = "SELECT * FROM jobconfig.warning_citapago_135_13_2";
                String queryinsert = " use jobconfig; SELECT " +
                                        " war.PlazoId, " +
                                        " war.CasoId, " +
                                        " war.DocumentoId, " +
                                        " war.TipoPlazoDescrip, " +
                                        " war.ClienteNombre, " +
                                        " war.InteresadoNombre, " +
                                        " war.TipoSolicitudDescrip, " +
                                        " war.SubTipoSolicitudDescripcion, " +
                                        " war.CasoNumeroExpedienteLargo, " +
                                        " war.CasoNumero, " +
                                        " war.ReferenciaNombre, " +
                                        " war.CasoFechaVigencia, " +
                                        " war.anualidades, " +
                                        " war.PaisNombre, " +
                                        " war.CasoFechaRecepcion, " +
                                        " war.CasoFechaFilingCliente, " +
                                        " war.CasoNumConcedida, " +
                                        " war.DocumentoFecha, " +
                                        " war.DocumentoFechaVencimiento, " +
                                        " war.EstatusCasoId, " +
                                        " war.EstatusCasoDescrip, " +
                                        " war.tipoplazoid, " +
                                        " war.EstatusPlazoId, " +
                                        " war.EstatusPlazoDescrip, " +
                                        " war.PlazoFechaAtencion, " +
                                        " war.ContactoNombre, " +
                                        " war.ContactoEmail, " +
                                        " war.IdiomaOriginalID, " +
                                        " war.IdiomaId, " +
                                        " war.IdiomaClave, " +
                                        " war.Subject, " +
                                        " war.SendNow, " +
                                        " war.CasoFechaIni as CasoFechaIni, " +
                                        " war.CasoFechaFin as CasoFechaFin, " +
                                        " Get_Fechaultimo(war.CasoId, " +
                                        "  'warning_citapago_3y4') AS `FechaSended`, " +
                                        "  Get_countenviados(war.CasoId, " +
                                        "  'warning_citapago_3y4') AS `numenviados` " +
                                        "FROM jobconfig.warning_citapago_3y4 as war where war.tipodiseño IN ('a' , 'b', 'd', 'e');";
                // where CasoFechaVigencia >= '"+sFechauno+"' AND CasoFechaVigencia <= '"+sFechados+"' ;";
                //String queryinsert = "SELECT * FROM jobconfig.warning_pagoanualidad_6_33_2 limit 25;";// where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
                //String queryinsert = "SELECT * FROM jobconfig.warning_renovacionmarca_20_34_2 where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";

                Action act = () =>
                {
                    respuestastringinsert = con1.getdatareader(queryinsert);
                    while (respuestastringinsert.Read())
                    {

                        CheckBox obje = new CheckBox();
                        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
                        ListViewItem listaagregar = new ListViewItem("", 0);
                        ListViewItem checks = new ListViewItem();

                        //Para warning_documentosprioridad
                        listaagregar.SubItems.Add(validareader("FechaSended", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("numenviados", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("PlazoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoNumero", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoNumConcedida", "CasoId", respuestastringinsert));

                        listaagregar.SubItems.Add(validareader("DocumentoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("TipoPlazoDescrip", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("ClienteNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("InteresadoNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));

                        listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("ReferenciaNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaVigencia", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaIni", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaFin", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));

                        listaagregar.SubItems.Add("");
                        listaagregar.SubItems.Add("");
                        listaagregar.SubItems.Add(validareader("anualidades", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("PaisNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("CasoFechaFilingCliente", "CasoId", respuestastringinsert));

                        listaagregar.SubItems.Add(validareader("DocumentoFecha", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("DocumentoFechaVencimiento", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("EstatusCasoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("tipoplazoid", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("EstatusPlazoId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("EstatusPlazoDescrip", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("PlazoFechaAtencion", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("ContactoNombre", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("ContactoEmail", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("IdiomaOriginalID", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("IdiomaId", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("IdiomaClave", "CasoId", respuestastringinsert));
                        listaagregar.SubItems.Add(validareader("Subject", "CasoId", respuestastringinsert));
                        /*listaagregar.SubItems.Add(validareader("SendNow", "CasoId", respuestastringinsert));*/
                        myItems.Add(listaagregar);
                        //lwpatentetes.Items.Add(listaagregar);
                        //lwpatentetes.FullRowSelect = true;
                        conuntpatentes++;
                    }
                    respuestastringinsert.Close();
                    con1.Cerrarconexion();
                };
                using (Waitforcases form = new Waitforcases(act))
                {
                    form.ShowDialog();
                }
                for (int x = 0; x < myItems.Count; x++)
                {
                    lvDisenosabde.Items.Add(myItems[x]);
                }
                labelPsinnovedades.Text = "";
                tbCountdisenosabde.Text = conuntpatentes + "";

                //}
                //else {
                //    MessageBox.Show("Debe ingresar fechas para poder consultar");
                //}
            }
            catch (Exception E)
            {
                labelDisenosLoading.Text = "";
                tbcountDisenos.Text = conuntpatentes + "";
                //respuestastringinsert.Close();
            }
        }

        private void button84_Click(object sender, EventArgs e)
        {
            int iNumerodechecados = lvDisenosabde.CheckedItems.Count;
            tbEnviadosdisenosdosabde.Text = "";
            tbActualizadosdisneosdosabde.Text = "";
            DialogResult oDlgRes;
            oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + iNumerodechecados + "correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
            if (oDlgRes == DialogResult.Yes)
            {
                int iContadorcorreossend = 0;
                int iContadorcorreosupdates = 0;
                Boolean bCorreodepeuba = false;
                if (tbCorreoPruebadisenosabde.Text != "")
                {
                    bCorreodepeuba = true;
                    bPruebadecorreo = true;
                    MessageBox.Show("Se enviarán los correos seleccionados a:" + tbCorreoPruebadisenosabde.Text);
                }
                else
                {
                    bPruebadecorreo = false;
                }
                for (int x = 0; x < iNumerodechecados; x++)
                {
                    //#CasoId 4
                    //#ContactoEmail 38
                    //#IdiomaClave 41
                    //#Subject 42

                    String sDays = "-10000";

                    String sTipoPlazoId = lvDisenosabde.CheckedItems[x].SubItems[33].Text;
                    String sPlazoId = lvDisenosabde.CheckedItems[x].SubItems[3].Text;
                    String sEstatusPlazoId = lvDisenosabde.CheckedItems[x].SubItems[34].Text;
                    String sUID_Jobconfig = "";
                    String sCasoId = lvDisenosabde.CheckedItems[x].SubItems[4].Text;
                    String sTiposolicitudid = "1";//pendiente
                    String sDocumentoid = lvDisenosabde.CheckedItems[x].SubItems[7].Text;
                    String sCasoNumero = lvDisenosabde.CheckedItems[x].SubItems[5].Text;
                    String sContactoEmail = lvDisenosabde.CheckedItems[x].SubItems[38].Text;
                    String sIdiomaClave = lvDisenosabde.CheckedItems[x].SubItems[41].Text;
                    String sSubject = lvDisenosabde.CheckedItems[x].SubItems[42].Text;
                    int REC = Get_Rec(Convert.ToInt32(sPlazoId));
                    //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);
                    //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                    //por lo que generamos el siguiente query
                    conect_robot con = new conect_robot();
                    String datosconectjobconfig = con.getdatavalues();
                    //String  = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
                    //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
                    String sUID_JobConfig = "65371e9-ca-11e8-b-disentipo_a_b_d_e";
                    String FunctionName = "Get_Email_CitaPago_3_4";
                    String sViewName = "warning_citapago_3y4";
                    //while (resps_UIDJobconfig.Read())
                    //{
                    //    sUID_JobConfig = validareader("UID_JobConfig", "UID_JobConfig", resps_UIDJobconfig);
                    //    FunctionName = validareader("FunctionName", "UID_JobConfig", resps_UIDJobconfig);
                    //    sViewName = validareader("ViewName", "UID_JobConfig", resps_UIDJobconfig);
                    //}
                    String copiacorreocliente = "";
                    Action act = () =>
                    {
                        conect_robot valores = new conect_robot();
                        //sIdiomaClave = "ES";
                        String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);
                        //resps_UIDJobconfig.Close();
                        String sCorreodestino = "";

                        if (bCorreodepeuba)
                        {
                            sCorreodestino = tbCorreoPruebadisenosabde.Text;//Prueba de correo
                        }
                        else
                        {
                            sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                        }
                        String[] correos = sCorreodestino.Split(',');
                        if (correos.Length > 1)
                        {
                            sCorreodestino = correos[0];
                            for (int z = 1; z < correos.Length; z++)
                            {
                                copiacorreocliente += correos[z] + ",";
                            }
                        }
                        //copiacorreocliente = "";
                        //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                        int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, copiacorreocliente);
                        iContadorcorreossend += iresult;
                        //bCorreodepeuba = false;//solo para probar IMPORTANTE QUITAR
                        if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                        {
                            int iCasoid = Int32.Parse(sCasoId);
                            int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                            int isDocumentoid;
                            if (sDocumentoid == "")
                            {
                                isDocumentoid = 0;
                            }
                            else
                            {
                                isDocumentoid = Int32.Parse(sDocumentoid);
                            }
                            int iDays = Int32.Parse("-10000");
                            int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                            int iPlazoId = Int32.Parse(sPlazoId);
                            iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid,isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                        }
                    };
                    using (Waitforsendmail obj = new Waitforsendmail(act))
                    {
                        obj.ShowDialog();
                    }

                    tbEnviadosdisenosdosabde.Text = iContadorcorreossend + "";
                    tbActualizadosdisneosdosabde.Text = iContadorcorreosupdates + "";
                }
                MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates + " Registros en la base de datos King");
            }
            else
            {
                //no hacemos nada por que cancelo
            }
        }

        private void button81_Click(object sender, EventArgs e)
        {
            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Plazoid";
                workSheet.Cells[3, "E"] = "Casoid";
                workSheet.Cells[3, "F"] = "Casonumero";
                workSheet.Cells[3, "G"] = "CasoNúmeroConcedida";
                workSheet.Cells[3, "H"] = "Documentoid";
                workSheet.Cells[3, "I"] = "tipoplazadescrip";
                workSheet.Cells[3, "J"] = "clienteNombre";
                workSheet.Cells[3, "K"] = "InteresadoNombre";
                workSheet.Cells[3, "L"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "M"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "N"] = "Invento";
                workSheet.Cells[3, "O"] = "CasoNumeroExpediente Largo";
                workSheet.Cells[3, "P"] = "Casoproductosclase";
                workSheet.Cells[3, "Q"] = "ReferenciaNombre";
                workSheet.Cells[3, "R"] = "Casofechavigencia";
                workSheet.Cells[3, "S"] = "CasoFechaInicio";
                workSheet.Cells[3, "T"] = "CasoFechaFin";
                workSheet.Cells[3, "U"] = "DíasProximoEmail";
                workSheet.Cells[3, "V"] = "FechaProximoEmail";
                workSheet.Cells[3, "W"] = "DocumentoFechaRecepción";
                workSheet.Cells[3, "X"] = "DocumentoFechaRecepción 2 meses";
                workSheet.Cells[3, "Y"] = "DocumentoFechaRecepción 4 meses";
                workSheet.Cells[3, "Z"] = "Anualidades";
                workSheet.Cells[3, "AA"] = "Pais Nombre";
                workSheet.Cells[3, "AB"] = "Caso FechaRecepción";
                workSheet.Cells[3, "AC"] = "CasoFechafillingcliente";
                workSheet.Cells[3, "AD"] = "DocumentoFecha";
                workSheet.Cells[3, "AE"] = "DocumentoFechavencimiento";
                workSheet.Cells[3, "AF"] = "Estatuscaso";
                workSheet.Cells[3, "AG"] = "EstatusCasoDescrip";
                workSheet.Cells[3, "AH"] = "Tipoplazoid";
                workSheet.Cells[3, "AI"] = "EstatusPlazoid";
                workSheet.Cells[3, "AJ"] = "EstatusPlazoDescrip";
                workSheet.Cells[3, "AK"] = "PlazoFechaatención";
                workSheet.Cells[3, "AL"] = "ContactoNombre";
                workSheet.Cells[3, "AM"] = "ContactoEmail";
                workSheet.Cells[3, "AN"] = "IdiomaOriginalId";
                workSheet.Cells[3, "AO"] = "Idiomaid";
                workSheet.Cells[3, "AP"] = "IdiomaClave";
                workSheet.Cells[3, "AQ"] = "Subject";

                workSheet.Cells[1, "A"] = "Cita a pago Diseños tipo A B D y E";
                workSheet.Range["A1", "F1"].Merge();
                workSheet.Range["A1", "F1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "F1"].Font.Bold = true;
                workSheet.Range["A1", "F1"].Font.Size = 20;
                var row = 3;

                for (int i = 0; i < lvDisenosabde.Items.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = lvDisenosabde.Items[i].SubItems[0].Text;
                    workSheet.Cells[i + 4, "B"] = lvDisenosabde.Items[i].SubItems[1].Text;
                    workSheet.Cells[i + 4, "C"] = lvDisenosabde.Items[i].SubItems[2].Text;
                    workSheet.Cells[i + 4, "D"] = lvDisenosabde.Items[i].SubItems[3].Text;
                    workSheet.Cells[i + 4, "E"] = lvDisenosabde.Items[i].SubItems[4].Text;
                    workSheet.Cells[i + 4, "F"] = lvDisenosabde.Items[i].SubItems[5].Text;
                    workSheet.Cells[i + 4, "G"] = lvDisenosabde.Items[i].SubItems[6].Text;
                    workSheet.Cells[i + 4, "H"] = lvDisenosabde.Items[i].SubItems[7].Text;
                    workSheet.Cells[i + 4, "I"] = lvDisenosabde.Items[i].SubItems[8].Text;
                    workSheet.Cells[i + 4, "J"] = lvDisenosabde.Items[i].SubItems[9].Text;
                    workSheet.Cells[i + 4, "K"] = lvDisenosabde.Items[i].SubItems[10].Text;
                    workSheet.Cells[i + 4, "L"] = lvDisenosabde.Items[i].SubItems[11].Text;
                    workSheet.Cells[i + 4, "M"] = lvDisenosabde.Items[i].SubItems[12].Text;
                    workSheet.Cells[i + 4, "N"] = lvDisenosabde.Items[i].SubItems[13].Text;
                    workSheet.Cells[i + 4, "O"] = lvDisenosabde.Items[i].SubItems[14].Text;
                    workSheet.Cells[i + 4, "P"] = lvDisenosabde.Items[i].SubItems[15].Text;
                    workSheet.Cells[i + 4, "Q"] = lvDisenosabde.Items[i].SubItems[16].Text;
                    workSheet.Cells[i + 4, "R"] = lvDisenosabde.Items[i].SubItems[17].Text;
                    workSheet.Cells[i + 4, "S"] = lvDisenosabde.Items[i].SubItems[18].Text;
                    workSheet.Cells[i + 4, "T"] = lvDisenosabde.Items[i].SubItems[19].Text;
                    workSheet.Cells[i + 4, "U"] = lvDisenosabde.Items[i].SubItems[20].Text;
                    workSheet.Cells[i + 4, "V"] = lvDisenosabde.Items[i].SubItems[21].Text;
                    workSheet.Cells[i + 4, "W"] = lvDisenosabde.Items[i].SubItems[22].Text;
                    workSheet.Cells[i + 4, "X"] = lvDisenosabde.Items[i].SubItems[23].Text;
                    workSheet.Cells[i + 4, "Y"] = lvDisenosabde.Items[i].SubItems[24].Text;
                    workSheet.Cells[i + 4, "Z"] = lvDisenosabde.Items[i].SubItems[25].Text;
                    workSheet.Cells[i + 4, "AA"] = lvDisenosabde.Items[i].SubItems[26].Text;
                    workSheet.Cells[i + 4, "AB"] = lvDisenosabde.Items[i].SubItems[27].Text;
                    workSheet.Cells[i + 4, "AC"] = lvDisenosabde.Items[i].SubItems[28].Text;
                    workSheet.Cells[i + 4, "AD"] = lvDisenosabde.Items[i].SubItems[29].Text;
                    workSheet.Cells[i + 4, "AE"] = lvDisenosabde.Items[i].SubItems[30].Text;
                    workSheet.Cells[i + 4, "AF"] = lvDisenosabde.Items[i].SubItems[31].Text;
                    workSheet.Cells[i + 4, "AG"] = lvDisenosabde.Items[i].SubItems[32].Text;
                    workSheet.Cells[i + 4, "AH"] = lvDisenosabde.Items[i].SubItems[33].Text;
                    workSheet.Cells[i + 4, "AI"] = lvDisenosabde.Items[i].SubItems[34].Text;
                    workSheet.Cells[i + 4, "AJ"] = lvDisenosabde.Items[i].SubItems[35].Text;
                    workSheet.Cells[i + 4, "AK"] = lvDisenosabde.Items[i].SubItems[36].Text;
                    workSheet.Cells[i + 4, "AL"] = lvDisenosabde.Items[i].SubItems[37].Text;
                    workSheet.Cells[i + 4, "AM"] = lvDisenosabde.Items[i].SubItems[38].Text;
                    workSheet.Cells[i + 4, "AN"] = lvDisenosabde.Items[i].SubItems[39].Text;
                    workSheet.Cells[i + 4, "AO"] = lvDisenosabde.Items[i].SubItems[40].Text;
                    workSheet.Cells[i + 4, "AP"] = lvDisenosabde.Items[i].SubItems[41].Text;
                    workSheet.Cells[i + 4, "AQ"] = lvDisenosabde.Items[i].SubItems[42].Text;
                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "AQ" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
            }
            catch (Exception E)
            {
                //cancelaron label1 exportacion a excel 
            }
        }

        private void button75_Click(object sender, EventArgs e)
        {
            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Plazoid";
                workSheet.Cells[3, "E"] = "Casoid";
                workSheet.Cells[3, "F"] = "Casonumero";
                workSheet.Cells[3, "G"] = "CasoNúmeroConcedida";
                workSheet.Cells[3, "H"] = "Documentoid";
                workSheet.Cells[3, "I"] = "tipoplazadescrip";
                workSheet.Cells[3, "J"] = "clienteNombre";
                workSheet.Cells[3, "K"] = "InteresadoNombre";
                workSheet.Cells[3, "L"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "M"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "N"] = "Invento";
                workSheet.Cells[3, "O"] = "CasoNumeroExpediente Largo";
                workSheet.Cells[3, "P"] = "Casoproductosclase";
                workSheet.Cells[3, "Q"] = "ReferenciaNombre";
                workSheet.Cells[3, "R"] = "Casofechavigencia";
                workSheet.Cells[3, "S"] = "CasoFechaInicio";
                workSheet.Cells[3, "T"] = "CasoFechaFin";
                workSheet.Cells[3, "U"] = "DíasProximoEmail";
                workSheet.Cells[3, "V"] = "FechaProximoEmail";
                workSheet.Cells[3, "W"] = "DocumentoFechaRecepción";
                workSheet.Cells[3, "X"] = "DocumentoFechaRecepción 2 meses";
                workSheet.Cells[3, "Y"] = "DocumentoFechaRecepción 4 meses";
                workSheet.Cells[3, "Z"] = "Anualidades";
                workSheet.Cells[3, "AA"] = "Pais Nombre";
                workSheet.Cells[3, "AB"] = "Caso FechaRecepción";
                workSheet.Cells[3, "AC"] = "CasoFechafillingcliente";
                workSheet.Cells[3, "AD"] = "DocumentoFecha";
                workSheet.Cells[3, "AE"] = "DocumentoFechavencimiento";
                workSheet.Cells[3, "AF"] = "Estatuscaso";
                workSheet.Cells[3, "AG"] = "EstatusCasoDescrip";
                workSheet.Cells[3, "AH"] = "Tipoplazoid";
                workSheet.Cells[3, "AI"] = "EstatusPlazoid";
                workSheet.Cells[3, "AJ"] = "EstatusPlazoDescrip";
                workSheet.Cells[3, "AK"] = "PlazoFechaatención";
                workSheet.Cells[3, "AL"] = "ContactoNombre";
                workSheet.Cells[3, "AM"] = "ContactoEmail";
                workSheet.Cells[3, "AN"] = "IdiomaOriginalId";
                workSheet.Cells[3, "AO"] = "Idiomaid";
                workSheet.Cells[3, "AP"] = "IdiomaClave";
                workSheet.Cells[3, "AQ"] = "Subject";

                workSheet.Cells[1, "A"] = "Cita a Pago Diseños tipo C";
                workSheet.Range["A1", "F1"].Merge();
                workSheet.Range["A1", "F1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "F1"].Font.Bold = true;
                workSheet.Range["A1", "F1"].Font.Size = 20;
                var row = 3;

                for (int i = 0; i < lvDisneos.Items.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = lvDisneos.Items[i].SubItems[0].Text;
                    workSheet.Cells[i + 4, "B"] = lvDisneos.Items[i].SubItems[1].Text;
                    workSheet.Cells[i + 4, "C"] = lvDisneos.Items[i].SubItems[2].Text;
                    workSheet.Cells[i + 4, "D"] = lvDisneos.Items[i].SubItems[3].Text;
                    workSheet.Cells[i + 4, "E"] = lvDisneos.Items[i].SubItems[4].Text;
                    workSheet.Cells[i + 4, "F"] = lvDisneos.Items[i].SubItems[5].Text;
                    workSheet.Cells[i + 4, "G"] = lvDisneos.Items[i].SubItems[6].Text;
                    workSheet.Cells[i + 4, "H"] = lvDisneos.Items[i].SubItems[7].Text;
                    workSheet.Cells[i + 4, "I"] = lvDisneos.Items[i].SubItems[8].Text;
                    workSheet.Cells[i + 4, "J"] = lvDisneos.Items[i].SubItems[9].Text;
                    workSheet.Cells[i + 4, "K"] = lvDisneos.Items[i].SubItems[10].Text;
                    workSheet.Cells[i + 4, "L"] = lvDisneos.Items[i].SubItems[11].Text;
                    workSheet.Cells[i + 4, "M"] = lvDisneos.Items[i].SubItems[12].Text;
                    workSheet.Cells[i + 4, "N"] = lvDisneos.Items[i].SubItems[13].Text;
                    workSheet.Cells[i + 4, "O"] = lvDisneos.Items[i].SubItems[14].Text;
                    workSheet.Cells[i + 4, "P"] = lvDisneos.Items[i].SubItems[15].Text;
                    workSheet.Cells[i + 4, "Q"] = lvDisneos.Items[i].SubItems[16].Text;
                    workSheet.Cells[i + 4, "R"] = lvDisneos.Items[i].SubItems[17].Text;
                    workSheet.Cells[i + 4, "S"] = lvDisneos.Items[i].SubItems[18].Text;
                    workSheet.Cells[i + 4, "T"] = lvDisneos.Items[i].SubItems[19].Text;
                    workSheet.Cells[i + 4, "U"] = lvDisneos.Items[i].SubItems[20].Text;
                    workSheet.Cells[i + 4, "V"] = lvDisneos.Items[i].SubItems[21].Text;
                    workSheet.Cells[i + 4, "W"] = lvDisneos.Items[i].SubItems[22].Text;
                    workSheet.Cells[i + 4, "X"] = lvDisneos.Items[i].SubItems[23].Text;
                    workSheet.Cells[i + 4, "Y"] = lvDisneos.Items[i].SubItems[24].Text;
                    workSheet.Cells[i + 4, "Z"] = lvDisneos.Items[i].SubItems[25].Text;
                    workSheet.Cells[i + 4, "AA"] = lvDisneos.Items[i].SubItems[26].Text;
                    workSheet.Cells[i + 4, "AB"] = lvDisneos.Items[i].SubItems[27].Text;
                    workSheet.Cells[i + 4, "AC"] = lvDisneos.Items[i].SubItems[28].Text;
                    workSheet.Cells[i + 4, "AD"] = lvDisneos.Items[i].SubItems[29].Text;
                    workSheet.Cells[i + 4, "AE"] = lvDisneos.Items[i].SubItems[30].Text;
                    workSheet.Cells[i + 4, "AF"] = lvDisneos.Items[i].SubItems[31].Text;
                    workSheet.Cells[i + 4, "AG"] = lvDisneos.Items[i].SubItems[32].Text;
                    workSheet.Cells[i + 4, "AH"] = lvDisneos.Items[i].SubItems[33].Text;
                    workSheet.Cells[i + 4, "AI"] = lvDisneos.Items[i].SubItems[34].Text;
                    workSheet.Cells[i + 4, "AJ"] = lvDisneos.Items[i].SubItems[35].Text;
                    workSheet.Cells[i + 4, "AK"] = lvDisneos.Items[i].SubItems[36].Text;
                    workSheet.Cells[i + 4, "AL"] = lvDisneos.Items[i].SubItems[37].Text;
                    workSheet.Cells[i + 4, "AM"] = lvDisneos.Items[i].SubItems[38].Text;
                    workSheet.Cells[i + 4, "AN"] = lvDisneos.Items[i].SubItems[39].Text;
                    workSheet.Cells[i + 4, "AO"] = lvDisneos.Items[i].SubItems[40].Text;
                    workSheet.Cells[i + 4, "AP"] = lvDisneos.Items[i].SubItems[41].Text;
                    workSheet.Cells[i + 4, "AQ"] = lvDisneos.Items[i].SubItems[42].Text;
                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "AQ" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
            }
            catch (Exception E)
            {
                //cancelaron label1 exportacion a excel 
            }
        }

        private void tbActualizadosdisneosdos_TextChanged(object sender, EventArgs e)
        {

        }

        private void button1_Click_2(object sender, EventArgs e)
        {
            muestradetalle(lvDisneos);
        }

        private void button80_Click(object sender, EventArgs e)
        {
            muestradetalle(lvDisenosabde);
        }

        private void button77_Click(object sender, EventArgs e)
        {

            int iNumeroreg = lvDisneos.Items.Count;
            for (int x = 0; x < iNumeroreg; x++)
            {
                lvDisneos.Items[x].Checked = true;
            }
        }

        private void button76_Click(object sender, EventArgs e)
        {
            int iNumeroreg = lvDisneos.Items.Count;
            for (int x = 0; x < iNumeroreg; x++)
            {
                lvDisneos.Items[x].Checked = false;
            }
        }

        private void button83_Click(object sender, EventArgs e)
        {
            int iNumeroreg = lvDisenosabde.Items.Count;
            for (int x = 0; x < iNumeroreg; x++)
            {
                lvDisenosabde.Items[x].Checked = true;
            }
        }

        private void button82_Click(object sender, EventArgs e)
        {
            int iNumeroreg = lvDisenosabde.Items.Count;
            for (int x = 0; x < iNumeroreg; x++)
            {
                lvDisenosabde.Items[x].Checked = false;
            }
        }

        private void button61_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_patente_sinnovedades.Rows)
            {

                row.Cells["PSN_seleccionar"].Value = true;

            }
        }

        private void button60_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_patente_sinnovedades.Rows)
            {

                row.Cells["PSN_seleccionar"].Value = false;

            }
        }

        private void declaracionDeUsoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 0;
        }

        private void renovaciónTardíasToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 1;
        }

        private void renovaciónPorAñoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 2;
        }

        private void pagoDeAnualidadesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 7;
        }

        private void documentosPrioridadToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 8;
        }

        private void citaAPagoToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 9;
        }

        private void declaraciónDeUsoA3AñosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 3;
        }

        private void declaraciónDeUsoA6AñosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 4;
        }

        private void acciónOficialToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 13;
        }

        private void diseñoTipoCToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 15;
        }

        private void diseñoTipoABDYEToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 16;
        }

        private void sinNovedadesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 5;
        }

        private void sinNovedadesToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 6;
        }

        private void button2_Click(object sender, EventArgs e)
        {
            try
            {
                //string ruta = "c:\\facturador";
                String ruta = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                if (Directory.Exists(ruta))
                {
                    //creamos el archivo 
                    StreamWriter escrito = File.CreateText(ruta + "\\mailking\\conemailking.properties"); // en el 
                    String sArchivoconf = tb_dbserver.Text + "\n" +//0
                                            tb_dbname.Text + "\n" +//1
                                            tb_dbuser.Text + "\n" +//2
                                            tb_dbpdw.Text + "\n" +//3
                                            tb_smtpserver.Text + "\n" +//4
                                            tb_smtpuser.Text + "\n" +//5
                                            tb_smtppwd.Text + "\n" +//6
                                            tb_smtpfrom.Text + "\n" +//7
                                            tb_smtpport.Text + "\n" +//8
                                            tb_smtpdisplay.Text + "\n" +//9
                                            rtBodymessage_patentes.Text + "\n" +//patentes //10
                                            rtBodymessage.Text+ "\n" +//marcas //11 
                                            tbCCo_all.Text; //12
                    /*tbCCo_all*/
                    String contenido = sArchivoconf;
                    escrito.Write(contenido.ToString());
                    escrito.Flush();
                    escrito.Close();
                }
                else
                {
                    //Creamos la carpeta
                    System.IO.Directory.CreateDirectory(ruta);
                    StreamWriter escrito = File.CreateText(ruta + "\\mailking\\conemailking.properties"); // en el 
                    String sArchivoconf = tb_dbserver.Text + "\n" +
                                            tb_dbname.Text + "\n" +
                                            tb_dbuser.Text + "\n" +
                                            tb_dbpdw.Text + "\n" +
                                            tb_smtpserver.Text + "\n" +
                                            tb_smtpuser.Text + "\n" +
                                            tb_smtppwd.Text + "\n" +
                                            tb_smtpfrom.Text + "\n" +
                                            tb_smtpport.Text + "\n" +
                                            tb_smtpdisplay.Text + "\n" +
                                            rtBodymessage.Text + "\n" +//marcas
                                            rtBodymessage_patentes.Text + "\n" +//patentes
                                            tbCCo_all.Text;

                    String contenido = sArchivoconf;
                    escrito.Write(contenido.ToString());
                    escrito.Flush();
                    escrito.Close();

                }
                Updatefuncionsb();
                MessageBox.Show("Configuración guardada exitosamente");


                
                //this.Close();
            }
            catch (Exception E)
            {
                MessageBox.Show("Error al intentar guardar la configuración: " + E);

            }
        }

        public void Updatefuncionsb()
        {
            try
            {
                conect_robot conect_robotmodificardireccion = new conect_robot();
                String kwerymodificadireccion = " UPDATE `jobconfig`.`configuracionrobot` " +
                                                " SET " +
                                                " `ipserver` = '" + tb_dbserver.Text + "',  " +
                                                " `db_name` = '" + tb_dbname.Text + "',  " +
                                                " `user_db` = '" + tb_dbuser.Text + "',  " +
                                                " `pass_db` = '" + tb_dbpdw.Text + "',  " +
                                                " `smtp_server` = '" + tb_smtpserver.Text + "',  " +
                                                " `smtp_mail` = '" + tb_smtpuser.Text + "',  " +
                                                " `smtp_pass` = '" + tb_smtppwd.Text + "',  " +
                                                " `smtp_from` = '" + tb_smtpfrom.Text + "',  " +
                                                " `smtp_port` = '" + tb_smtpport.Text + "',  " +
                                                " `smtp_display` = '" + tb_smtpdisplay.Text + "',  " +
                                                " `smtp_CC_patentes` = '" + rtBodymessage_patentes.Text + "',  " +
                                                " `smtp_CC_marcas` = '" + rtBodymessage.Text + "',  " +
                                                " `smtp_to_default_local` = '" + tbCCo_all.Text + "' " +
                                                " WHERE `configuracionrobot_ id` = 1; ";
                MySqlDataReader respuestaupdate2 = conect_robotmodificardireccion.getdatareader(kwerymodificadireccion);
                if (respuestaupdate2 != null)
                {
                    MessageBox.Show("Se hicieron los cambios correctamente.");
                }
            }
            catch (Exception Ex)
            {

            }

        }

        private void verToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 18;
        }

        private void acciónOficialToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void btn_ordenar_Click(object sender, EventArgs e)
        {
            //example_moveimg obj = new example_moveimg();
            //ordenarcolumnas obj = new ordenarcolumnas(lvCitaapago);
            //pruebadraganddrop obj = new pruebadraganddrop();
            //reorder obj = new reorder(lvCitaapago);
            //obj.ShowDialog();
        }

        private void button4_Click_1(object sender, EventArgs e)
        {
            int count_orden = 0;
            conect_robot con_citapago_orden = new conect_robot();
            MySqlDataReader resp_consulta = con_citapago_orden.getdatareader("select * from  jobconfig.orden_vistas_robot order by orden asc;");
            String[] sArraycampos = new String[100];
            while (resp_consulta.Read())
            {
                String sTitulo = validareader("titulo", "titulo", resp_consulta);
                String sorden = validareader("orden", "orden", resp_consulta);
                if (count_orden != 0)
                {
                    lvCitaapago.Columns[""].Text = sTitulo;
                    //if(lvCitaapago.Columns[count_orden].Text == sCampo){
                    //    lvCitaapago.Columns[count_orden].DisplayIndex = Int32.Parse(sorden);
                    //}
                    //ColumnHeader column = ;
                    //sArraycampos[count_orden] = sCampo;
                    //column.DisplayIndex = Int32.Parse(sorden);
                }
                count_orden++;
            }
            resp_consulta.Close();
            con_citapago_orden.Cerrarconexion();
        }

        private void button4_Click_2(object sender, EventArgs e)
        {
            //ordenandocolumns();
        }

        private void servicioDeCorreoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 17;

        }
        //APARTIR DE AQUÍ ES EL MÓDULO DE CONFIGURACIÓN DEL SERVICIO
        private void button5_Click_1(object sender, EventArgs e)
        {
            String sEncabezado = " <p>Estimado Equipo de Vadillo & King, " +
                                " <br> " +
                                " Es indispensable que se atiendan estos casos hoy mismo.</p> <br><br> ";
            String sPatentespendientes = generabodymailpatentes();
            String sMarcaspendientes = generabodymailmarcas();
            //Acción Oficial
            String sPatentespendientesAccion = generabodymailpatentesAccion();
            String sMarcaspendientesAccion = generabodymailmarcasAccion();
            //los caorreos enviados son para pruebas 
            SendEmail("eduarximo@gmail.com", "Urgente presentar estas solicitudes de Patente", sEncabezado + "<label><strong>Patentes (" + (ipattotal - 1) + ")</strong></label>" + sPatentespendientes, "eduardor@dicss.com.mx");
            SendEmail("eduarximo@gmail.com", "Urgente presentar estas solicitudes de Marca", sEncabezado + "<label><strong>Marcas (" + (imarcatotal - 1) + ")</strong></label>" + sMarcaspendientes, "eduardor@dicss.com.mx");
            //Accionoficial oficial
            SendEmail("eduarximo@gmail.com", "Urgente atender estos plazos de Patentes (Acción Oficial) ", sEncabezado + "<label><strong>Patentes (" + (ipattotal_accion - 1) + ")</strong></label>" + sPatentespendientesAccion, "eduardor@dicss.com.mx");
            SendEmail("eduarximo@gmail.com", "Urgente atender estos plazos de Marcas (Acción Oficial) ", sEncabezado + "<label><strong>Marcas (" + (imarcatotal_accion - 1) + ")</strong></label>" + sMarcaspendientesAccion, "eduardor@dicss.com.mx");
        }

        public String generabodymailpatentes()
        {
            try
            {
                String encabezado = " <table border='1'> " +
                                    "     <thead> " +
                                    "         <tr> " +
                                    "             <th>Número</th> " +
                                    "             <th>Tipo de Solicitud</th> " +
                                    "             <th>Tipo de Plazo</th> " +
                                    "             <th>Caso Número</th> " +
                                    "             <th>CasoId</th> " +
                                    "             <th>Plazo Fecha</th> " +
                                    "             <th>Mes</th> " +
                                    "             <th>Titular</th> " +
                                    "             <th>Cliente</th> " +
                                    "             <th>Título</th> " +
                                    "         </tr> " +
                                    "     </thead> ";
                //" </table> ";
                //consultamos las solicitudes
                String sCasospendientes = "";
                conect_robot con1 = new conect_robot();
                String query = " select  " +
                                    " TipoSolicitud.TipoSolicitudDescrip as tipodesolicitud, " +
                                    " tipoplazo.TipoPlazoDescrip as tipoplazo, " +
                                    " estatusplazo.EstatusPlazoDescrip as estatus, " +
                                    " caso.CasoNumero as Referencia_King, " +
                                    " caso.Casoid as Casoid, " +
                                    " caso.CasoDenominacion as tituloesp, " +
                                    " caso.CasoTitulo as tituloingles, " +
                                    " fn_interesados(caso.casoid) as interesados, " +
                                    " Get_Cliente(caso.casoid) as cliente, " +
                                    " estatuscaso.EstatusCasoDescrip as EstatusCasoDescrip, " +
                                    " plazo.PlazoFecha as PlazoFecha " +
                                    " from  " +
                                    " plazo,  " +
                                    " tiposolicitud, " +
                                    " caso,  " +
                                    " estatusplazo, " +
                                    " estatuscaso, " +
                                    " tipoplazo " +
                                    " where  " +
                                    " plazo.CasoId = caso.CasoId " +
                                    " AND caso.TipoSolicitudId = tiposolicitud.TipoSolicitudId " +
                                    " AND caso.EstatusCasoId = estatuscaso.EstatusCasoId " +
                                    " AND plazo.EstatusPlazoId = estatusplazo.EstatusPlazoId " +
                                    " AND plazo.TipoPlazoId = tipoplazo.TipoPlazoId " +
                                    " AND plazo.TipoPlazoId in(2) " +
                                    " AND tiposolicitud.TipoSolicitudGrupo = 1" +
                                    " AND plazo.EstatusPlazoId = 1" +
                                    " AND estatuscaso.estautscasoindseg = 1" +
                                    " AND estatuscaso.EstatusCasoId = 1" +
                                    " order by plazo.PlazoFecha; ";
                MySqlDataReader consultacasosconplazospendientes = con1.getdatareader(query);
                //Fin consultamos las solicitudes

                //inicio de docuemntos de prioridad
                conect_robot con1_doc = new conect_robot();
                String query_doc = " select  " +
                                    " TipoSolicitud.TipoSolicitudDescrip as tipodesolicitud, " +
                                    " tipoplazo.TipoPlazoDescrip as tipoplazo, " +
                                    " estatusplazo.EstatusPlazoDescrip as estatus, " +
                                    " caso.CasoNumero as Referencia_King, " +
                                    " caso.Casoid as Casoid, " +
                                    " caso.CasoDenominacion as tituloesp, " +
                                    " caso.CasoTitulo as tituloingles, " +
                                    " fn_interesados(caso.casoid) as interesados, " +
                                    " Get_Cliente(caso.casoid) as cliente, " +
                                    " estatuscaso.EstatusCasoDescrip as EstatusCasoDescrip, " +
                                    " plazo.PlazoFecha as PlazoFecha " +
                                    " from  " +
                                    " plazo,  " +
                                    " tiposolicitud, " +
                                    " caso,  " +
                                    " estatusplazo, " +
                                    " estatuscaso, " +
                                    " tipoplazo " +
                                    " where  " +
                                    " plazo.CasoId = caso.CasoId " +
                                    " AND caso.TipoSolicitudId = tiposolicitud.TipoSolicitudId " +
                                    " AND caso.EstatusCasoId = estatuscaso.EstatusCasoId " +
                                    " AND plazo.EstatusPlazoId = estatusplazo.EstatusPlazoId " +
                                    " AND plazo.TipoPlazoId = tipoplazo.TipoPlazoId " +
                                    " AND plazo.TipoPlazoId in(21, 24) " +
                                    " AND tiposolicitud.TipoSolicitudGrupo = 1" +
                                    " AND plazo.EstatusPlazoId = 1" +
                                    " AND estatuscaso.estautscasoindseg = 1" +
                                    " order by plazo.PlazoFecha; ";
                MySqlDataReader consultacasosconplazospendientes_doc = con1_doc.getdatareader(query_doc);
                //fin documentos de prioridad

                String sBodytable = "";
                int iNum = 1;
                while (consultacasosconplazospendientes.Read())
                {
                    String sFecha = validareader("PlazoFecha", "CasoId", consultacasosconplazospendientes);
                    String sMes = "";
                    if (sFecha != "")
                    {
                        sFecha = sFecha.Substring(0, 10);
                        DateTime fecha = Convert.ToDateTime(sFecha);
                        sMes = MonthName(fecha.Month);
                    }

                    String titulodelainvencion = "";
                    if (validareader("tituloesp", "CasoId", consultacasosconplazospendientes) != "")
                    {
                        titulodelainvencion = validareader("tituloesp", "CasoId", consultacasosconplazospendientes);
                    }
                    else
                    {
                        titulodelainvencion = validareader("tituloingles", "CasoId", consultacasosconplazospendientes);
                    }

                    String titular, cliente;
                    titular = validareader("interesados", "CasoId", consultacasosconplazospendientes);
                    cliente = validareader("cliente", "CasoId", consultacasosconplazospendientes);
                    if (titular != "" && titular.Length > 24)
                    {
                        titular = titular.Substring(9, 15) + "..";
                    }
                    else
                    {
                        if (titular != "")
                        {
                            titular = titular.Substring(9, titular.Length - 1) + "..";
                        }
                    }

                    if (cliente != "" && cliente.Length > 15)
                    {
                        cliente = cliente.Substring(0, 15) + "..";
                    }

                    int result = iNum % 2;
                    String sEstilo = "style='background: #dedede;'";
                    if (result == 0)
                    {
                        sEstilo = "";
                    }
                    sCasospendientes += "<tr " + sEstilo + ">";
                    sCasospendientes += "<td><center>" + iNum + "</center></td> ";
                    sCasospendientes += "<td>" + validareader("tipodesolicitud", "CasoId", consultacasosconplazospendientes) + "</td> ";
                    sCasospendientes += "<td>" + validareader("tipoplazo", "CasoId", consultacasosconplazospendientes) + "</td> ";
                    sCasospendientes += "<td><center>" + validareader("Referencia_King", "CasoId", consultacasosconplazospendientes) + "</center></td> ";
                    sCasospendientes += "<td><center>" + validareader("Casoid", "CasoId", consultacasosconplazospendientes) + "</center></td> ";
                    sCasospendientes += "<td>" + validareader("PlazoFecha", "CasoId", consultacasosconplazospendientes).Substring(0, 10) + "</td> ";
                    sCasospendientes += "<td>" + sMes + "</td> ";
                    sCasospendientes += "<td>" + titular + "</td> ";
                    sCasospendientes += "<td>" + cliente + "</td> ";
                    sCasospendientes += "<td>" + titulodelainvencion + "</td> ";
                    sCasospendientes += "</tr>";
                    iNum++;
                }
                consultacasosconplazospendientes.Close();
                con1.Cerrarconexion();
                while (consultacasosconplazospendientes_doc.Read())
                {
                    String sFecha = validareader("PlazoFecha", "CasoId", consultacasosconplazospendientes_doc);
                    String sMes = "";
                    if (sFecha != "")
                    {
                        sFecha = sFecha.Substring(0, 10);
                        DateTime fecha = Convert.ToDateTime(sFecha);
                        sMes = MonthName(fecha.Month);
                    }
                    String titulodelainvencion = "";
                    if (validareader("tituloesp", "CasoId", consultacasosconplazospendientes_doc) != "")
                    {
                        titulodelainvencion = validareader("tituloesp", "CasoId", consultacasosconplazospendientes_doc);
                    }
                    else
                    {
                        titulodelainvencion = validareader("tituloingles", "CasoId", consultacasosconplazospendientes_doc);
                    }
                    String titular, cliente;
                    titular = validareader("interesados", "CasoId", consultacasosconplazospendientes_doc);
                    cliente = validareader("cliente", "CasoId", consultacasosconplazospendientes_doc);
                    if (titular != "" && titular.Length > 24)
                    {
                        titular = titular.Substring(9, 15) + "..";
                    }
                    else
                    {
                        if (titular != "")
                        {
                            titular = titular.Substring(9, titular.Length - 1) + "..";
                        }

                    }

                    if (cliente != "" && cliente.Length > 15)
                    {
                        cliente = cliente.Substring(0, 15) + "..";
                    }

                    int result = iNum % 2;
                    String sEstilo = "style='background: #dedede;'";
                    if (result == 0)
                    {
                        sEstilo = "";
                    }
                    sCasospendientes += "<tr " + sEstilo + ">";
                    sCasospendientes += "<td><center>" + iNum + "</center></td> ";
                    sCasospendientes += "<td>" + validareader("tipodesolicitud", "CasoId", consultacasosconplazospendientes_doc) + "</td> ";
                    sCasospendientes += "<td>" + validareader("tipoplazo", "CasoId", consultacasosconplazospendientes_doc) + "</td> ";
                    sCasospendientes += "<td><center>" + validareader("Referencia_King", "CasoId", consultacasosconplazospendientes_doc) + "</center></td> ";
                    sCasospendientes += "<td><center>" + validareader("Casoid", "CasoId", consultacasosconplazospendientes_doc) + "</center></td> ";
                    sCasospendientes += "<td>" + validareader("PlazoFecha", "CasoId", consultacasosconplazospendientes_doc).Substring(0, 10) + "</td> ";
                    sCasospendientes += "<td>" + sMes + "</td> ";
                    sCasospendientes += "<td>" + titular + "</td> ";
                    sCasospendientes += "<td>" + cliente + "</td> ";
                    sCasospendientes += "<td>" + titulodelainvencion + "</td> ";
                    sCasospendientes += "</tr>";
                    iNum++;
                }
                consultacasosconplazospendientes_doc.Close();
                con1_doc.Cerrarconexion();



                ipattotal = iNum;
                String tCuerpodelcorreo = "<tbody>" + sCasospendientes + "</tbody></table>";
                return encabezado + tCuerpodelcorreo;
            }
            catch (Exception Ex)
            {
                MessageBox.Show("Ocurrió un error en la consulta");
                return "Ocurrió un error en la consulta";

            }

        }

        public String generabodymailmarcas()
        {
            String encabezado = "";
            String tCuerpodelcorreo = "";
            try
            {
                String sCasospendientes = "";
                encabezado = " <table border='1'> " +
                                    "     <thead> " +
                                    "         <tr> " +
                                    "             <th>Número</th> " +
                                    "             <th>Tipo de Solicitud</th> " +
                                    "             <th>Tipo de Plazo</th> " +
                                    "             <th>Marca</th> " +
                                    "             <th>Clase</th> " +
                                    "             <th>Caso Número</th> " +
                                    "             <th>CasoId</th> " +
                                    "             <th>Plazo Fecha</th> " +
                                    "             <th>Mes</th> " +
                                    "             <th>Titular</th> " +
                                    "             <th>Cliente</th> " +
                                    "         </tr> " +
                                    "     </thead> ";
                //" </table> ";
                conect_robot con1 = new conect_robot();
                String query = " select  " +
                                    " TipoSolicitud.TipoSolicitudDescrip as tipodesolicitud, " +
                                    " tipoplazo.TipoPlazoDescrip as tipoplazo, " +
                                    " estatusplazo.EstatusPlazoDescrip as estatus, " +
                                    " caso.CasoNumero as Referencia_King, " +
                                    " caso.CasoDenominacion as tituloesp, " +
                                    " caso.CasoTitulo as tituloingles, " +
                                    " fn_interesados(caso.casoid) as interesados, " +
                                    " Get_Cliente(caso.casoid) as cliente, " +
                                    " fn_clase(caso.casoid) as clase, " +
                                    " caso.Casoid as Casoid, " +
                                    " estatuscaso.EstatusCasoDescrip as EstatusCasoDescrip, " +
                                    " plazo.PlazoFecha as PlazoFecha " +
                                    " from  " +
                                    " plazo,  " +
                                    " tiposolicitud, " +
                                    " caso,  " +
                                    " estatusplazo, " +
                                    " estatuscaso, " +
                                    " tipoplazo " +
                                    " where  " +
                                    " plazo.CasoId = caso.CasoId " +
                                    " AND caso.TipoSolicitudId = tiposolicitud.TipoSolicitudId " +
                                    " AND caso.EstatusCasoId = estatuscaso.EstatusCasoId " +
                                    " AND plazo.EstatusPlazoId = estatusplazo.EstatusPlazoId " +
                                    " AND plazo.TipoPlazoId = tipoplazo.TipoPlazoId " +
                                    " AND plazo.TipoPlazoId in(2) " +
                                    " AND tiposolicitud.TipoSolicitudGrupo = 2" +
                                    " AND plazo.EstatusPlazoId = 1 " +
                                    " AND estatuscaso.estautscasoindseg = 1" +
                                    " AND caso.EstatusCasoId = 1" +
                                    " order by plazo.PlazoFecha; ";
                MySqlDataReader consultacasosconplazospendientes = con1.getdatareader(query);


                /*inicio de documentosdeprioridad*/
                conect_robot con1_doc = new conect_robot();
                String query_doc = " select  " +
                                    " TipoSolicitud.TipoSolicitudDescrip as tipodesolicitud, " +
                                    " tipoplazo.TipoPlazoDescrip as tipoplazo, " +
                                    " estatusplazo.EstatusPlazoDescrip as estatus, " +
                                    " caso.CasoNumero as Referencia_King, " +
                                    " caso.Casoid as Casoid, " +
                                    " caso.CasoDenominacion as tituloesp, " +
                                    " caso.CasoTitulo as tituloingles, " +
                                    " fn_interesados(caso.casoid) as interesados, " +
                                    " Get_Cliente(caso.casoid) as cliente, " +
                                    " fn_clase(caso.casoid) as clase, " +
                                    " estatuscaso.EstatusCasoDescrip as EstatusCasoDescrip, " +
                                    " plazo.PlazoFecha as PlazoFecha " +
                                    " from  " +
                                    " plazo,  " +
                                    " tiposolicitud, " +
                                    " caso,  " +
                                    " estatusplazo, " +
                                    " estatuscaso, " +
                                    " tipoplazo " +
                                    " where  " +
                                    " plazo.CasoId = caso.CasoId " +
                                    " AND caso.TipoSolicitudId = tiposolicitud.TipoSolicitudId " +
                                    " AND caso.EstatusCasoId = estatuscaso.EstatusCasoId " +
                                    " AND plazo.EstatusPlazoId = estatusplazo.EstatusPlazoId " +
                                    " AND plazo.TipoPlazoId = tipoplazo.TipoPlazoId " +
                                    " AND plazo.TipoPlazoId in(21, 24) " +
                                    " AND tiposolicitud.TipoSolicitudGrupo = 2" +
                                    " AND plazo.EstatusPlazoId = 1 " +
                                    " AND estatuscaso.estautscasoindseg = 1" +
                                    " order by plazo.PlazoFecha; ";
                MySqlDataReader consultacasosconplazospendientes_doc = con1_doc.getdatareader(query_doc);
                /* Fin inicio de documentosdeprioridad*/

                String sBodytable = "";
                int iNum = 1;
                while (consultacasosconplazospendientes.Read())
                {
                    String sFecha = validareader("PlazoFecha", "CasoId", consultacasosconplazospendientes);
                    String sMes = "";
                    if (sFecha != "")
                    {
                        sFecha = sFecha.Substring(0, 10);
                        DateTime fecha = Convert.ToDateTime(sFecha);
                        sMes = MonthName(fecha.Month);
                    }
                    String titulodelainvencion = "";
                    if (validareader("tituloesp", "CasoId", consultacasosconplazospendientes) != "")
                    {
                        titulodelainvencion = validareader("tituloesp", "CasoId", consultacasosconplazospendientes);
                    }
                    else
                    {
                        titulodelainvencion = validareader("tituloingles", "CasoId", consultacasosconplazospendientes);
                    }
                    String titular, cliente;
                    titular = validareader("interesados", "CasoId", consultacasosconplazospendientes);
                    cliente = validareader("cliente", "CasoId", consultacasosconplazospendientes);
                    if (titular != "" && titular.Length > 24)
                    {
                        titular = titular.Substring(9, 15) + "..";
                    }
                    else
                    {
                        if (titular != "")
                        {
                            titular = titular.Substring(9, titular.Length - 1) + "..";
                        }
                    }

                    if (cliente != "" && cliente.Length > 15)
                    {
                        cliente = cliente.Substring(0, 15) + "..";
                    }

                    int result = iNum % 2;
                    String sEstilo = "style='background: #dedede;'";
                    if (result == 0)
                    {
                        sEstilo = "";
                    }

                    sCasospendientes += "<tr " + sEstilo + ">";
                    sCasospendientes += "<td><center>" + iNum + "</center></td> ";
                    sCasospendientes += "<td>" + validareader("tipodesolicitud", "CasoId", consultacasosconplazospendientes) + "</td> ";
                    sCasospendientes += "<td>" + validareader("tipoplazo", "CasoId", consultacasosconplazospendientes) + "</td> ";
                    sCasospendientes += "<td>" + titulodelainvencion + "</td> ";
                    sCasospendientes += "<td>" + validareader("clase", "CasoId", consultacasosconplazospendientes) + "</td> ";
                    sCasospendientes += "<td><center>" + validareader("Referencia_King", "CasoId", consultacasosconplazospendientes) + "</center></td> ";
                    sCasospendientes += "<td><center>" + validareader("Casoid", "CasoId", consultacasosconplazospendientes) + "</center></td> ";
                    sCasospendientes += "<td>" + validareader("PlazoFecha", "CasoId", consultacasosconplazospendientes).Substring(0, 10) + "</td> ";
                    sCasospendientes += "<td>" + sMes + "</td> ";
                    sCasospendientes += "<td>" + titular + "</td> ";
                    sCasospendientes += "<td>" + cliente + "</td> ";
                    sCasospendientes += "</tr>";
                    iNum++;
                }

                while (consultacasosconplazospendientes_doc.Read())
                {
                    String sFecha = validareader("PlazoFecha", "CasoId", consultacasosconplazospendientes_doc);
                    String sMes = "";
                    if (sFecha != "")
                    {
                        sFecha = sFecha.Substring(0, 10);
                        DateTime fecha = Convert.ToDateTime(sFecha);
                        sMes = MonthName(fecha.Month);
                    }
                    String titulodelainvencion = "";
                    if (validareader("tituloesp", "CasoId", consultacasosconplazospendientes_doc) != "")
                    {
                        titulodelainvencion = validareader("tituloesp", "CasoId", consultacasosconplazospendientes_doc);
                    }
                    else
                    {
                        titulodelainvencion = validareader("tituloingles", "CasoId", consultacasosconplazospendientes_doc);
                    }
                    String titular, cliente;
                    try
                    {

                        titular = validareader("interesados", "CasoId", consultacasosconplazospendientes_doc);
                        cliente = validareader("cliente", "CasoId", consultacasosconplazospendientes_doc);
                        if (titular != "" && titular.Length > 24)
                        {
                            titular = titular.Substring(9, 15) + "..";
                        }
                        else
                        {
                            if (titular != "")
                            {
                                titular = titular.Substring(9, titular.Length - 1) + "..";
                            }
                        }
                        if (cliente != "" && cliente.Length > 15)
                        {
                            cliente = cliente.Substring(0, 15) + "..";
                        }
                    }
                    catch (Exception Exc)
                    {
                        titular = "";
                        cliente = "";
                    }


                    int result = iNum % 2;
                    String sEstilo = "style='background: #dedede;'";
                    if (result == 0)
                    {
                        sEstilo = "";
                    }
                    sCasospendientes += "<tr " + sEstilo + ">";
                    sCasospendientes += "<td><center>" + iNum + "</center></td> ";
                    sCasospendientes += "<td>" + validareader("tipodesolicitud", "CasoId", consultacasosconplazospendientes_doc) + "</td> ";
                    sCasospendientes += "<td>" + validareader("tipoplazo", "CasoId", consultacasosconplazospendientes_doc) + "</td> ";
                    sCasospendientes += "<td>" + titulodelainvencion + "</td> ";
                    sCasospendientes += "<td>" + validareader("clase", "CasoId", consultacasosconplazospendientes) + "</td> ";
                    sCasospendientes += "<td><center>" + validareader("Referencia_King", "CasoId", consultacasosconplazospendientes_doc) + "</center></td> ";
                    sCasospendientes += "<td><center>" + validareader("Casoid", "CasoId", consultacasosconplazospendientes_doc) + "</center></td> ";
                    sCasospendientes += "<td>" + validareader("PlazoFecha", "CasoId", consultacasosconplazospendientes_doc).Substring(0, 10) + "</td> ";
                    sCasospendientes += "<td>" + sMes + "</td> ";
                    sCasospendientes += "<td>" + titular + "</td> ";
                    sCasospendientes += "<td>" + cliente + "</td> ";
                    sCasospendientes += "</tr>";
                    iNum++;
                }
                imarcatotal = iNum;
                tCuerpodelcorreo = "<tbody>" + sCasospendientes + "</tbody></table>";
            }
            catch (Exception ex)
            {

            }
            return encabezado + tCuerpodelcorreo;
        }

        //Accion oficial
        public String generabodymailpatentesAccion()
        {
            String sCasospendientes = "";
            conect_robot con1 = new conect_robot();
            String query = " select  " +
                            " TipoSolicitud.TipoSolicitudDescrip as tipodesolicitud, " +
                            " tipoplazo.TipoPlazoDescrip as tipoplazo, " +
                            " estatusplazo.EstatusPlazoDescrip as estatus, " +
                            " caso.CasoNumero as Referencia_King, " +
                            " caso.Casoid as Casoid, " +
                            " fn_interesados(caso.casoid) as interesados, " +
                            " Get_Cliente(caso.casoid) as cliente, " +
                            " estatuscaso.EstatusCasoDescrip as EstatusCasoDescrip, " +
                            " subtipodocumento.SubTipoDocumentoDescrip as SubTipoDocumentoDescrip," +
                            " plazo.PlazoFecha as PlazoFecha " +
                            " from  " +
                            " plazo,  " +
                            " tiposolicitud, " +
                            " caso,  " +
                            " estatusplazo, " +
                            " estatuscaso, " +
                            " documento," +
                            " subtipodocumento," +
                            " tipoplazo " +
                            " where  " +
                            " plazo.CasoId = caso.CasoId " +
                            " AND caso.TipoSolicitudId = tiposolicitud.TipoSolicitudId " +
                            " AND caso.EstatusCasoId = estatuscaso.EstatusCasoId " +
                            " AND plazo.EstatusPlazoId = estatusplazo.EstatusPlazoId " +
                            " AND plazo.TipoPlazoId = tipoplazo.TipoPlazoId " +
                            " AND plazo.DocumentoId = documento.DocumentoId" +
                            " AND documento.SubTipoDocumentoId = subtipodocumento.SubTipoDocumentoId" +
                            " AND plazo.TipoPlazoId in(4) " +
                            " AND tiposolicitud.TipoSolicitudGrupo = 1" +
                            " AND plazo.EstatusPlazoId = 1" +
                            " AND estatuscaso.estautscasoindseg = 1" +
                            " order by plazo.PlazoFecha;";
            MySqlDataReader consultacasosconplazospendientes = con1.getdatareader(query);
            String encabezado = " <table border='1'> " +
                                "     <thead> " +
                                "         <tr> " +
                                "             <th>Número</th> " +
                                "             <th>Tipo de Solicitud</th> " +
                                "             <th>Requisito a contestar:</th> " +
                                "             <th>Caso Número</th> " +
                                "             <th>CasoId</th> " +
                                "             <th>Plazo Fecha</th> " +
                                "             <th>Mes</th> " +
                                "             <th>Titular</th> " +
                                "             <th>Cliente</th> " +
                                "         </tr> " +
                                "     </thead> ";
            //" </table> ";
            String sBodytable = "";
            int iNum = 1;
            while (consultacasosconplazospendientes.Read())
            {
                String sFecha = validareader("PlazoFecha", "CasoId", consultacasosconplazospendientes);
                String sMes = "";
                if (sFecha != "")
                {
                    sFecha = sFecha.Substring(0, 10);
                    DateTime fecha = Convert.ToDateTime(sFecha);
                    sMes = MonthName(fecha.Month);
                }

                String titular, cliente;
                titular = validareader("interesados", "CasoId", consultacasosconplazospendientes);
                cliente = validareader("cliente", "CasoId", consultacasosconplazospendientes);
                if (titular != "" && titular.Length > 24)
                {
                    titular = titular.Substring(9, 15) + "..";
                }
                else
                {
                    if (titular != "")
                    {
                        titular = titular.Substring(9, titular.Length - 1) + "..";
                    }
                }

                if (cliente != "" && cliente.Length > 15)
                {
                    cliente = cliente.Substring(0, 15) + "..";
                }

                int result = iNum % 2;
                String sEstilo = "style='background: #dedede;'";
                if (result == 0)
                {
                    sEstilo = "";
                }
                sCasospendientes += "<tr " + sEstilo + ">";
                sCasospendientes += "<td><center>" + iNum + "</center></td> ";
                sCasospendientes += "<td>" + validareader("tipodesolicitud", "CasoId", consultacasosconplazospendientes) + "</td> ";
                sCasospendientes += "<td>" + validareader("SubTipoDocumentoDescrip", "CasoId", consultacasosconplazospendientes) + "</td> ";
                sCasospendientes += "<td><center>" + validareader("Referencia_King", "CasoId", consultacasosconplazospendientes) + "</center></td> ";
                sCasospendientes += "<td><center>" + validareader("Casoid", "CasoId", consultacasosconplazospendientes) + "</center></td> ";
                sCasospendientes += "<td>" + validareader("PlazoFecha", "CasoId", consultacasosconplazospendientes).Substring(0, 10) + "</td> ";
                sCasospendientes += "<td>" + sMes + "</td> ";
                sCasospendientes += "<td>" + titular + "</td> ";
                sCasospendientes += "<td>" + cliente + "</td> ";
                sCasospendientes += "</tr>";
                iNum++;
            }
            ipattotal_accion = iNum;
            String tCuerpodelcorreo = "<tbody>" + sCasospendientes + "</tbody></table>";
            return encabezado + tCuerpodelcorreo;
        }

        public String generabodymailmarcasAccion()
        {
            String sCasospendientes = "";
            conect_robot con1 = new conect_robot();
            String query = " select  " +
                            " TipoSolicitud.TipoSolicitudDescrip as tipodesolicitud, " +
                            " tipoplazo.TipoPlazoDescrip as tipoplazo, " +
                            " estatusplazo.EstatusPlazoDescrip as estatus, " +
                            " caso.CasoNumero as Referencia_King, " +
                            " caso.Casoid as Casoid, " +
                            " fn_interesados(caso.casoid) as interesados, " +
                            " Get_Cliente(caso.casoid) as cliente, " +
                            " estatuscaso.EstatusCasoDescrip as EstatusCasoDescrip, " +
                            " subtipodocumento.SubTipoDocumentoDescrip as SubTipoDocumentoDescrip," +
                            " plazo.PlazoFecha as PlazoFecha " +
                            " from  " +
                            " plazo,  " +
                            " tiposolicitud, " +
                            " caso,  " +
                            " estatusplazo, " +
                            " estatuscaso, " +
                            " documento," +
                            " subtipodocumento," +
                            " tipoplazo " +
                            " where  " +
                            " plazo.CasoId = caso.CasoId " +
                            " AND caso.TipoSolicitudId = tiposolicitud.TipoSolicitudId " +
                            " AND caso.EstatusCasoId = estatuscaso.EstatusCasoId " +
                            " AND plazo.EstatusPlazoId = estatusplazo.EstatusPlazoId " +
                            " AND plazo.TipoPlazoId = tipoplazo.TipoPlazoId " +
                            " AND plazo.DocumentoId = documento.DocumentoId" +
                            " AND documento.SubTipoDocumentoId = subtipodocumento.SubTipoDocumentoId" +
                            " AND plazo.TipoPlazoId in(4) " +
                            " AND tiposolicitud.TipoSolicitudGrupo = 2" +
                            " AND plazo.EstatusPlazoId = 1" +
                            " AND estatuscaso.estautscasoindseg = 1" +
                            " order by plazo.PlazoFecha;";
            MySqlDataReader consultacasosconplazospendientes = con1.getdatareader(query);
            String encabezado = " <table border='1'> " +
                                "     <thead> " +
                                "         <tr> " +
                                "             <th>Número</th> " +
                                "             <th>Tipo de Solicitud</th> " +
                                "             <th>Requisito a contestar:</th> " +
                                "             <th>Caso Número</th> " +
                                "             <th>CasoId</th> " +
                                "             <th>Plazo Fecha</th> " +
                                "             <th>Mes</th> " +
                                "             <th>Titular</th> " +
                                "             <th>Cliente</th> " +
                                "         </tr> " +
                                "     </thead> ";
            //" </table> ";
            String sBodytable = "";
            int iNum = 1;
            while (consultacasosconplazospendientes.Read())
            {
                String sFecha = validareader("PlazoFecha", "CasoId", consultacasosconplazospendientes);
                String sMes = "";
                if (sFecha != "")
                {
                    sFecha = sFecha.Substring(0, 10);
                    DateTime fecha = Convert.ToDateTime(sFecha);
                    sMes = MonthName(fecha.Month);
                }

                String titular, cliente;
                titular = validareader("interesados", "CasoId", consultacasosconplazospendientes);
                cliente = validareader("cliente", "CasoId", consultacasosconplazospendientes);
                if (titular != "" && titular.Length > 24)
                {
                    titular = titular.Substring(9, 15) + "..";
                }
                else
                {
                    if (titular != "")
                    {
                        titular = titular.Substring(9, titular.Length - 1) + "..";
                    }
                }

                if (cliente != "" && cliente.Length > 15)
                {
                    cliente = cliente.Substring(0, 15) + "..";
                }

                int result = iNum % 2;
                String sEstilo = "style='background: #dedede;'";
                if (result == 0)
                {
                    sEstilo = "";
                }

                sCasospendientes += "<tr " + sEstilo + ">";
                sCasospendientes += "<td><center>" + iNum + "</center></td> ";
                sCasospendientes += "<td>" + validareader("tipodesolicitud", "CasoId", consultacasosconplazospendientes) + "</td> ";
                sCasospendientes += "<td>" + validareader("SubTipoDocumentoDescrip", "CasoId", consultacasosconplazospendientes) + "</td> ";
                sCasospendientes += "<td><center>" + validareader("Referencia_King", "CasoId", consultacasosconplazospendientes) + "</center></td> ";
                sCasospendientes += "<td><center>" + validareader("Casoid", "CasoId", consultacasosconplazospendientes) + "</center></td> ";
                sCasospendientes += "<td>" + validareader("PlazoFecha", "CasoId", consultacasosconplazospendientes).Substring(0, 10) + "</td> ";
                sCasospendientes += "<td>" + sMes + "</td> ";
                sCasospendientes += "<td>" + titular + "</td> ";
                sCasospendientes += "<td>" + cliente + "</td> ";
                sCasospendientes += "</tr>";
                iNum++;
            }
            imarcatotal_accion = iNum;
            String tCuerpodelcorreo = "<tbody>" + sCasospendientes + "</tbody></table>";
            return encabezado + tCuerpodelcorreo;
        }
        private int SendEmail(string To, string Subject, string body, string SmtpCC)
        {
            string SmtpServer = "smtp.gmail.com";
            string SmtpUser = "mail@vadillo-king.mx";
            string SmtpPwd = "ONEFA2019";
            string SmtpFrom = "smtp.gmail.com";
            //string SmtpCC = "eduardor@dicss.com.mx";
            int SmtpPort = 465;
            string SmtpDisplay = "Vadillo &  King";
            string rstl = "";
            string[] lineasdos;
            try
            {

                String fechalog = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
                //StringBuilder sb_log = new StringBuilder();
                //sb_log.Append(fechalog + ":configuracionfilesinicio:" + " Error:");
                String strRutaArchivo = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string fichero = strRutaArchivo + "\\mailking\\conemailking.properties";
                string contenido = String.Empty;
                if (File.Exists(fichero))
                {
                    contenido = File.ReadAllText(fichero);
                    lineasdos = contenido.Split('\n');

                    SmtpServer = lineasdos[4];
                    SmtpUser = lineasdos[5];
                    SmtpPwd = lineasdos[6];
                    SmtpFrom = lineasdos[7];
                    To = "patricio.king@vadillo-king.mx";//lineasdos[10];
                    SmtpCC = lineasdos[10];
                }
                else
                {

                }
                if (tbCorreodepruebas.Text != "")
                {
                    To = tbCorreodepruebas.Text;
                    SmtpCC = "";
                    MessageBox.Show("Se enviará correo de prueba sólo a " + tbCorreodepruebas.Text);
                }
                MailBee.Global.LicenseKey = "MN110-8B8932A44B8239779277420FE843-E158";
                Smtp mailer = new Smtp();
                SmtpServer server = new SmtpServer(SmtpServer, SmtpUser, SmtpPwd);
                server.AccountDomain = SmtpServer;
                server.Port = SmtpPort;
                server.AccountName = SmtpUser;
                server.Password = SmtpPwd;

                mailer.SmtpServers.Add(server);
                mailer.Connect();
                mailer.Hello();
                mailer.Login();
                //Get Data From Send Email
                mailer.Message.From.Email = SmtpFrom;
                mailer.Message.From.DisplayName = SmtpDisplay;// "News Letter <newsletter@vadillo-king.mx>";
                mailer.Message.To.AsString = To;
                mailer.Message.Cc.AsString = SmtpCC;
                mailer.Message.Subject = Subject;
                //Embed image (add as attachment with Content-ID value set) of stream
                //Stream Logo = Get_Logo();
                //mailer.Message.Attachments.Add(Logo, "KingEmail.jpg", "<12s4a8a8778c$5664i1b1$ir671781@tlffmdqjobxj>", "image/gif", null, NewAttachmentOptions.None, MailTransferEncoding.Base64);
                //Get Body of Email
                mailer.BodyHtmlText = body;
                //Sender
                mailer.Send();
                mailer.Dispose();
                return 1;
            }
            catch (Exception e)
            {
                rstl = "Error en Email:" + e.Message;
                String ruta_log = Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments) + "\\casosking\\";
                if (!Directory.Exists(ruta_log))
                {
                    System.IO.Directory.CreateDirectory(ruta_log);
                }
                String fechalog = DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss");
                StringBuilder sb_log = new StringBuilder();
                sb_log.Append(fechalog + ":configuracionfilesinicio:" + " Error:" + e + "\n");
                System.IO.File.AppendAllText(ruta_log + "sistema_casosking.log", sb_log.ToString());
                sb_log.Clear();
                //EventLog.WriteEntry(e.Message, EventLogEntryType.Information);
                return 0;
            }
        }

        private void button86_Click(object sender, EventArgs e)
        {
            cargandopatentespendientes();
            cargandomarcaspendientes();
        }

        public void cargandopatentespendientes()
        {
            try
            {
                conect_robot con1 = new conect_robot();
                String query = " select  " +
                                " TipoSolicitud.TipoSolicitudDescrip as tipodesolicitud, " +
                                " tipoplazo.TipoPlazoDescrip as tipoplazo, " +
                                " estatusplazo.EstatusPlazoDescrip as estatus, " +
                                " caso.CasoNumero as Referencia_King, " +
                                " caso.Casoid as Casoid, " +
                                " estatuscaso.EstatusCasoDescrip as EstatusCasoDescrip, " +
                                " plazo.PlazoFecha as PlazoFecha " +
                                " from  " +
                                " plazo,  " +
                                " tiposolicitud, " +
                                " caso,  " +
                                " estatusplazo, " +
                                " estatuscaso, " +
                                " tipoplazo " +
                                " where  " +
                                " plazo.CasoId = caso.CasoId " +
                                " AND caso.TipoSolicitudId = tiposolicitud.TipoSolicitudId " +
                                " AND caso.EstatusCasoId = estatuscaso.EstatusCasoId " +
                                " AND plazo.EstatusPlazoId = estatusplazo.EstatusPlazoId " +
                                " AND plazo.TipoPlazoId = tipoplazo.TipoPlazoId " +
                                " AND plazo.TipoPlazoId in(2, 21) " +
                                " AND tiposolicitud.TipoSolicitudGrupo = 1" +
                                " AND plazo.EstatusPlazoId = 1" +
                                " AND estatuscaso.estautscasoindseg = 1" +
                                " order by plazo.PlazoFecha; ";
                MySqlDataReader consultacasosconplazospendientes = con1.getdatareader(query);
                int count = 1;
                while (consultacasosconplazospendientes.Read())
                {
                    String sFecha = validareader("PlazoFecha", "CasoId", consultacasosconplazospendientes);
                    String sMes = "";
                    if (sFecha != "")
                    {
                        sFecha = sFecha.Substring(0, 10);
                        DateTime fecha = Convert.ToDateTime(sFecha);
                        sMes = MonthName(fecha.Month);
                    }
                    ListViewItem listaagregar = new ListViewItem(count + " ");
                    listaagregar.SubItems.Add(validareader("tipodesolicitud", "CasoId", consultacasosconplazospendientes));
                    listaagregar.SubItems.Add(validareader("tipoplazo", "CasoId", consultacasosconplazospendientes));
                    listaagregar.SubItems.Add(validareader("estatus", "CasoId", consultacasosconplazospendientes));
                    listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", consultacasosconplazospendientes));
                    listaagregar.SubItems.Add(validareader("Referencia_King", "CasoId", consultacasosconplazospendientes));
                    listaagregar.SubItems.Add(validareader("Casoid", "CasoId", consultacasosconplazospendientes));
                    listaagregar.SubItems.Add(sFecha);
                    listaagregar.SubItems.Add(sMes);
                    lvpatentespendientes.Items.Add(listaagregar);
                    count++;
                }
                consultacasosconplazospendientes.Close();
                con1.Cerrarconexion();
            }
            catch (Exception Ex)
            {


            }
        }
        public string MonthName(int month)
        {
            DateTimeFormatInfo dtinfo = new CultureInfo("es-ES", false).DateTimeFormat;
            return dtinfo.GetMonthName(month);
        }

        public void cargandomarcaspendientes()
        {
            try
            {
                conect_robot con1 = new conect_robot();
                String query = " select  " +
                                " TipoSolicitud.TipoSolicitudDescrip as tipodesolicitud, " +
                                " tipoplazo.TipoPlazoDescrip as tipoplazo, " +
                                " estatusplazo.EstatusPlazoDescrip as estatus, " +
                                " caso.CasoNumero as Referencia_King, " +
                                " caso.Casoid as Casoid, " +
                                " estatuscaso.EstatusCasoDescrip as EstatusCasoDescrip, " +
                                " plazo.PlazoFecha as PlazoFecha " +
                                " from  " +
                                " plazo,  " +
                                " tiposolicitud, " +
                                " caso,  " +
                                " estatusplazo, " +
                                " estatuscaso, " +
                                " tipoplazo " +
                                " where  " +
                                " plazo.CasoId = caso.CasoId " +
                                " AND caso.TipoSolicitudId = tiposolicitud.TipoSolicitudId " +
                                " AND caso.EstatusCasoId = estatuscaso.EstatusCasoId " +
                                " AND plazo.EstatusPlazoId = estatusplazo.EstatusPlazoId " +
                                " AND plazo.TipoPlazoId = tipoplazo.TipoPlazoId " +
                                " AND plazo.TipoPlazoId in(2, 21) " +
                                " AND tiposolicitud.TipoSolicitudGrupo = 2" +
                                " AND plazo.EstatusPlazoId = 1 " +
                                " AND estatuscaso.estautscasoindseg = 1" +
                                " order by plazo.PlazoFecha; ";
                MySqlDataReader consultacasosconplazospendientes = con1.getdatareader(query);
                int count = 1;
                while (consultacasosconplazospendientes.Read())
                {
                    String sFecha = validareader("PlazoFecha", "CasoId", consultacasosconplazospendientes);
                    String sMes = "";
                    if (sFecha != "")
                    {
                        sFecha = sFecha.Substring(0, 10);
                        DateTime fecha = Convert.ToDateTime(sFecha);
                        sMes = MonthName(fecha.Month);
                    }

                    ListViewItem listaagregar = new ListViewItem(count + " ");
                    listaagregar.SubItems.Add(validareader("tipodesolicitud", "CasoId", consultacasosconplazospendientes));
                    listaagregar.SubItems.Add(validareader("tipoplazo", "CasoId", consultacasosconplazospendientes));
                    listaagregar.SubItems.Add(validareader("estatus", "CasoId", consultacasosconplazospendientes));
                    listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", consultacasosconplazospendientes));
                    listaagregar.SubItems.Add(validareader("Referencia_King", "CasoId", consultacasosconplazospendientes));
                    listaagregar.SubItems.Add(validareader("Casoid", "CasoId", consultacasosconplazospendientes));
                    listaagregar.SubItems.Add(sFecha);
                    listaagregar.SubItems.Add(sMes);
                    lvMarcaspendientes.Items.Add(listaagregar);
                    count++;

                }
                consultacasosconplazospendientes.Close();
                con1.Cerrarconexion();
            }
            catch (Exception Ex)
            {


            }
        }

        private void tabPage2_Click(object sender, EventArgs e)
        {

        }

        private void toolStripButton1_Click(object sender, EventArgs e)
        {
            //.SelectionFont.Bold;// = true;
            rtb_contenidodecorreo.SelectionFont = new Font("Microsoft Sans Serif", 8, FontStyle.Bold);
        }

        private void toolStripButton2_Click(object sender, EventArgs e)
        {

        }

        private void listView1_ColumnClick(object sender, ColumnClickEventArgs e)
        {
            // Determine if clicked column is already the column that is being sorted.
            if (e.Column == lvwColumnSorter.SortColumn)
            {
                // Reverse the current sort direction for this column.
                if (lvwColumnSorter.Order == SortOrder.Ascending)
                {
                    lvwColumnSorter.Order = SortOrder.Descending;
                }
                else
                {
                    lvwColumnSorter.Order = SortOrder.Ascending;
                }
            }
            else
            {
                // Set the column number that is to be sorted; default to ascending.
                lvwColumnSorter.SortColumn = e.Column;
                lvwColumnSorter.Order = SortOrder.Ascending;
            }

            // Perform the sort with these new sort options.
            this.listView1.Sort();
        }

        private void button89_Click(object sender, EventArgs e)
        {

        }

        private void datagrid_marcas_sinnovedades_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void button63_Click(object sender, EventArgs e)
        {
            label13.Text = "Cargando registros ...";
            System.Threading.Thread.Sleep(1000);
            lvDisenosabde.Items.Clear();
            conect_robot con1 = new conect_robot();
            String sPlazoid = "";
            String sSend = "";
            String sSendnow = "";
            if (true)//no validamos la fecha a seleccionar
            {

                textBox1.Text = "";

                //
                List<ListViewItem> myItems = new List<ListViewItem>();
                int conuntpatentes = 0;
                //String sFechauno = cambiaformatofecha(tbFechainiciopatentes.Text);
                //String sFechados = cambiaformatofecha(tbFechafinpatentes.Text);
                //String queryinsert = "use jobconfig; SELECT * FROM jobconfig.warning_citapago_135_13_2";
                String queryinsert = "use jobconfig; SELECT * FROM jobconfig.warning_patentes_sin_novedad";
                //String queryinsert = "use jobconfig; SELECT  " +
                //                        " war.PlazoId, " +
                //                        " war.CasoId, " +
                //                        " war.DocumentoId, " +
                //                        " war.TipoPlazoDescrip, " +
                //                        " war.ClienteNombre, " +
                //                        " war.InteresadoNombre, " +
                //                        " war.TipoSolicitudDescrip, " +
                //                        " war.SubTipoSolicitudDescripcion, " +
                //                        " war.Invento, " +
                //                        " war.CasoNumeroExpedienteLargo, " +
                //                        " war.CasoNumero, " +
                //                        " war.CasoProductosClase, " +
                //                        " war.ReferenciaNombre, " +
                //                        " war.CasoFechaVigencia, " +
                //                        " war.CasoFechaIni, " +
                //                        " war.CasoFechaFin, " +
                //                        " timestampdiff(MONTH, CasoFechaRecepcion, CURDATE()) as Fechadiferencia, " +
                //                        " DATE_FORMAT(war.CasoFechaRecepcion,'%d-%m-%Y') as CasoFechaRecepcion, " +
                //                        " war.DocumentoFechaRecepcion2meses, " +
                //                        " war.DocumentoFechaRecepcion4meses, " +
                //                        " war.anualidades, " +
                //                        " war.PaisNombre, " +
                //                        " war.CasoFechaRecepcion, " +
                //                        " war.CasoFechaFilingCliente, " +
                //                        " war.CasoNumConcedida, " +
                //                        " war.DocumentoFecha, " +
                //                        " war.DocumentoFechaVencimiento, " +
                //                        " war.EstatusCasoId, " +
                //                        " war.EstatusCasoDescrip, " +
                //                        " war.tipoplazoid, " +
                //                        " war.EstatusPlazoId, " +
                //                        " war.EstatusPlazoDescrip, " +
                //                        " war.PlazoFechaAtencion, " +
                //                        " war.ContactoNombre, " +
                //                        " war.ContactoEmail, " +
                //                        " war.IdiomaOriginalID, " +
                //                        " war.IdiomaId, " +
                //                        " war.IdiomaClave, " +
                //                        " war.Subject, " +
                //                        " DATE_FORMAT(Get_Fechaultimo(war.CasoId, " +
                //                      "  'warning_patentes_sin_novedad'),'%d-%m-%Y') AS `FechaSended`," +
                //                        " Get_countenviados(war.CasoId, 'warning_patentes_sin_novedad') AS `numenviados` " +
                //                      " FROM " +
                //                      "     jobconfig.warning_patentes_sin_novedad as war";

                // where CasoFechaVigencia >= '"+sFechauno+"' AND CasoFechaVigencia <= '"+sFechados+"' ;";
                //String queryinsert = "SELECT * FROM jobconfig.warning_pagoanualidad_6_33_2 limit 25;";// where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";
                //String queryinsert = "SELECT * FROM jobconfig.warning_renovacionmarca_20_34_2 where CasoFechaIni > '" + sFechainicio + "' and CasoFechaFin  < '" + sFechafin + "';";  
                //SET Fechadiferencia = timestampdiff(MONTH, CasoFechaRecepcion, CURDATE());
                if (patentesinnovedades != null)
                {
                    patentesinnovedades.Clear();
                }

                datagrid_patente_sinnovedades.Rows.Clear();
                Action act = () =>
                {
                    MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);

                    while (respuestastringinsert.Read())
                    {
                        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);
                        try
                        {
                            String sPlazoId = validareader("PlazoId", "PlazoId", respuestastringinsert);
                            String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                            String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);
                            

                            String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                            String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                            String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                            String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                            String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                            String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                            String sMarca = validareader("Marca", "Marca", respuestastringinsert);
                            String sFechadiferencia = validareader("Meses_transcurridos", "Meses_transcurridos", respuestastringinsert);
                            String sFechaLimite = "";
                            String sInvento = validareader("Invento", "Invento", respuestastringinsert);
                            String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                            String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                            String sCasoProductosClase = validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                            String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                            String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);

                            String sCasoFechaConcesion = validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);


                            String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                            String sCasoFechaInidos = validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                            String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                            String sDocumentoFechaRecepcion = validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                            String sDocumentoFechaRecepcion2meses = validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                            String sDocumentoFechaRecepcion4meses = validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                            String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                            String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                            String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                            String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                            String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                            String sDocumentoFecha = validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                            String sDocumentoFechaVencimiento = validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                            String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                            String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                            String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                            String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                            String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                            String sPlazoFechaAtencion = validareader("PlazoFechaAtencion", "PlazoFechaAtencion", respuestastringinsert);
                            String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                            String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                            String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                            String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                            String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                            String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                            String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                            String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                            String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);


                            int REC = 0;
                            String sUID_JobConfig = "a8050719-ceab-11e8-869b-000c291erf11";
                            String FunctionName = "Get_Email_patente_sin_novedad";
                            String sViewName = "warning_patentes_sin_novedad";

                            DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                            DateTime dFechaLimite = validafechavacia(sFechaLimite);
                            DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                            DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                            DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                            DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                            DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                            DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                            DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                            DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);
                            DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                            DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                            DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                            DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                            DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                            DateTime dFechaSended = validafechavacia(sFechaSended);


                            objMP_seleccionada patente_sinnovedad = new objMP_seleccionada(sPlazoId,
                                                                                            sCasoId,
                                                                                            sDocumentoId,
                                                                                            sTipoPlazoDescrip,
                                                                                            sClienteNombre,
                                                                                            sInteresadoNombre,
                                                                                            sTipoSolicitudDescrip,
                                                                                            sSubTipoSolicitudDescripcion,
                                                                                            sMarca,
                                                                                            sInvento,
                                                                                            sFechadiferencia,
                                                                                            dFechaLimite,
                                                                                            sCasoNumeroExpedienteLargo,
                                                                                            sCasoNumero,
                                                                                            sCasoProductosClase,
                                                                                            sReferenciaNombre,
                                                                                            dCasoFechaConcesion,
                                                                                            dCasoFechaVigencia,
                                                                                            dCasoFechaIni,
                                                                                            dCasoFechaInidos,
                                                                                            dCasoFechaFin,
                                                                                            dDocumentoFechaRecepcion,
                                                                                            dDocumentoFechaRecepcion2meses,
                                                                                            dDocumentoFechaRecepcion4meses,
                                                                                            sanualidades,
                                                                                            sPaisNombre,
                                                                                            dCasoFechaRecepcion,
                                                                                            dCasoFechaFilingCliente,
                                                                                            sCasoNumConcedida,
                                                                                            dDocumentoFecha,
                                                                                            dDocumentoFechaVencimiento,
                                                                                            sEstatusCasoId,
                                                                                            sEstatusCasoDescrip,
                                                                                            stipoplazoid,
                                                                                            sEstatusPlazoId,
                                                                                            sEstatusPlazoDescrip,
                                                                                            dPlazoFechaAtencion,
                                                                                            sContactoNombre,
                                                                                            sContactoEmail,
                                                                                            sIdiomaOriginalID,
                                                                                            sIdiomaId,
                                                                                            sIdiomaClave,
                                                                                            sSubject,
                                                                                            sSendNow,
                                                                                            dFechaSended,
                                                                                            snumenviados,
                                                                                            REC,
                                                                                            tbCorreodepruebas.Text,
                                                                                            sUID_JobConfig,
                                                                                            FunctionName,
                                                                                            sViewName,
                                                                                            sTipoSolicitudId
                                                                                            );
                            patentesinnovedades.Add(patente_sinnovedad);
                        }
                        catch (Exception Ex)
                        {
                            //MessageBox.Show("Mensaje "+Ex.Message);
                        }
                        conuntpatentes++;
                    }
                    respuestastringinsert.Close();
                    con1.Cerrarconexion();
                };
                using (Waitforcases form = new Waitforcases(act))
                {
                    form.ShowDialog();
                }

                foreach (var Obj_patente_sinnovedad in patentesinnovedades)
                {

                    CheckBox checkboxcell = new CheckBox();

                    datagrid_patente_sinnovedades.Rows.Add(Obj_patente_sinnovedad.sCasoId, false,
                        Obj_patente_sinnovedad.sFechaSended,
                        Obj_patente_sinnovedad.snumenviados,
                        Obj_patente_sinnovedad.sCasoId,
                        Obj_patente_sinnovedad.sCasoNumero,
                        Obj_patente_sinnovedad.sEstatusCasoDescrip,
                        Obj_patente_sinnovedad.sClienteNombre,
                        Obj_patente_sinnovedad.sInteresadoNombre,
                        Obj_patente_sinnovedad.sTipoSolicitudDescrip,
                        Obj_patente_sinnovedad.sSubTipoSolicitudDescripcion,
                        Obj_patente_sinnovedad.sInvento,
                        Obj_patente_sinnovedad.sCasoNumeroExpedienteLargo,
                        Obj_patente_sinnovedad.sReferenciaNombre,
                        Obj_patente_sinnovedad.sCasoFechaRecepcion,
                        Obj_patente_sinnovedad.sFechadiferencia,
                        Obj_patente_sinnovedad.sPaisNombre,
                        Obj_patente_sinnovedad.sContactoNombre,
                        Obj_patente_sinnovedad.sContactoEmail,
                        Obj_patente_sinnovedad.sIdiomaClave,
                        Obj_patente_sinnovedad.sSubject);

                }
                AdjustColumnOrder_PSN();
                textBox1.Text = conuntpatentes + "";
                label13.Text = "";
            }
            else
            {
                label13.Text = "";
            }

            // 

            //try
            //{

            //    {

            //        while (respuestastringinsert.Read())
            //        {
            //            CheckBox obje = new CheckBox();

            //            ListViewItem listaagregar = new ListViewItem("", 0);
            //            ListViewItem checks = new ListViewItem();

            //            //Para warning_documentosprioridad
            //            listaagregar.SubItems.Add(validareader("FechaSended", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("numenviados", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("PlazoId", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("CasoNumero", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("CasoNumConcedida", "CasoId", respuestastringinsert));

            //            listaagregar.SubItems.Add(validareader("DocumentoId", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("TipoPlazoDescrip", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("ClienteNombre", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("InteresadoNombre", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("TipoSolicitudDescrip", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("SubTipoSolicitudDescripcion", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("CasoNumeroExpedienteLargo", "CasoId", respuestastringinsert));

            //            listaagregar.SubItems.Add(validareader("CasoId", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("ReferenciaNombre", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("CasoFechaVigencia", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("CasoFechaIni", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("CasoFechaFin", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("DocumentoFechaRecepcion", "CasoId", respuestastringinsert));

            //            listaagregar.SubItems.Add("");
            //            listaagregar.SubItems.Add("");
            //            listaagregar.SubItems.Add(validareader("anualidades", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("PaisNombre", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("CasoFechaRecepcion", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("CasoFechaFilingCliente", "CasoId", respuestastringinsert));

            //            listaagregar.SubItems.Add(validareader("DocumentoFecha", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("DocumentoFechaVencimiento", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("EstatusCasoId", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("EstatusCasoDescrip", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("tipoplazoid", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("EstatusPlazoId", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("EstatusPlazoDescrip", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("PlazoFechaAtencion", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("ContactoNombre", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("ContactoEmail", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("IdiomaOriginalID", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("IdiomaId", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("IdiomaClave", "CasoId", respuestastringinsert));
            //            listaagregar.SubItems.Add(validareader("Subject", "CasoId", respuestastringinsert));
            //            /*listaagregar.SubItems.Add(validareader("SendNow", "CasoId", respuestastringinsert));*/
            //            myItems.Add(listaagregar);
            //            //lwpatentetes.Items.Add(listaagregar);
            //            //lwpatentetes.FullRowSelect = true;
            //            conuntpatentes++;
            //        }
            //        respuestastringinsert.Close();
            //        con1.Cerrarconexion();
            //    };
            //    using (Waitforcases form = new Waitforcases(act))
            //    {
            //        form.ShowDialog();
            //    }

            //    lvPatentesinnovedad.Items.Clear();
            //    for (int x = 0; x < myItems.Count; x++)
            //    {
            //        lvPatentesinnovedad.Items.Add(myItems[x]);
            //    }
            //    labelPsinnovedades.Text = "";
            //    tbCountdisenosabde.Text = conuntpatentes + "";

            //    //}
            //    //else {
            //    //    MessageBox.Show("Debe ingresar fechas para poder consultar");
            //    //}
            //}
            //catch (Exception E)
            //{
            //    labelDisenosLoading.Text = "";
            //    tbcountDisenos.Text = conuntpatentes + "";
            //    //respuestastringinsert.Close();
            //}

        }

        private void AdjustColumnOrder_PSN()
        {
            datagrid_patente_sinnovedades.Columns["PSN_casoid"].DisplayIndex = 0;// MSN_casoid
            datagrid_patente_sinnovedades.Columns["PSN_Ultimi_correo"].DisplayIndex = 2;// MSN_Ultimi_correo
            datagrid_patente_sinnovedades.Columns["PSN_Correos_enviados"].DisplayIndex = 3;// MSN_Correos_enviados
            datagrid_patente_sinnovedades.Columns["PSN_casoid_view"].DisplayIndex = 4;// MSN_casoid_view
            datagrid_patente_sinnovedades.Columns["PSN_casonumero"].DisplayIndex = 5;// MSN_casonumero
            datagrid_patente_sinnovedades.Columns["PSN_invento"].DisplayIndex = 11;// MSN_invento
            datagrid_patente_sinnovedades.Columns["PSN_estatuscasodescr"].DisplayIndex = 6;// MSN_estatuscasodescr
            datagrid_patente_sinnovedades.Columns["PSN_clientenombre"].DisplayIndex = 7;// MSN_clientenombre
            datagrid_patente_sinnovedades.Columns["PSN_solicitante"].DisplayIndex = 8;// MSN_solicitante
            datagrid_patente_sinnovedades.Columns["PSN_tiposoldescrip"].DisplayIndex = 9;// MSN_tiposoldescrip
            datagrid_patente_sinnovedades.Columns["PSN_subtiposoldesc"].DisplayIndex = 10;// MSN_subtiposoldesc
            datagrid_patente_sinnovedades.Columns["PSN_nexp"].DisplayIndex = 12;// MSN_nexp
            datagrid_patente_sinnovedades.Columns["PSN_Referencia_nombre"].DisplayIndex = 13;// MSN_Referencia_nombre
            datagrid_patente_sinnovedades.Columns["PSN_fechapresentacion"].DisplayIndex = 14;// MSN_fechapresentacion
            datagrid_patente_sinnovedades.Columns["PSN_fechadiferencia"].DisplayIndex = 15;// MSN_fechapresentacion
            datagrid_patente_sinnovedades.Columns["PSN_paisreg"].DisplayIndex = 16;// MSN_paisreg
            datagrid_patente_sinnovedades.Columns["PSN_contactonombre"].DisplayIndex = 17;// MSN_contactonombre
            datagrid_patente_sinnovedades.Columns["PSN_contactomail"].DisplayIndex = 18;// MSN_contactomail
            datagrid_patente_sinnovedades.Columns["PSN_indiomaclave"].DisplayIndex = 19;// MSN_indiomaclave
            datagrid_patente_sinnovedades.Columns["PSN_subject"].DisplayIndex = 20;// MSN_subject
            datagrid_patente_sinnovedades.Columns["PSN_seleccionar"].DisplayIndex = 1;// seleccionar
        }

        private void button62_Click(object sender, EventArgs e)
        {
            try
            {
                //contamos el numero de patentes seleccionadas
                int contador = 0;
                for (int z = 0; z < datagrid_patente_sinnovedades.Rows.Count; z++)
                {
                    bool valor = (bool)datagrid_patente_sinnovedades.Rows[z].Cells[1].Value;
                    if (valor)
                    {
                        contador++;
                    }
                }

                //hacemos una confimacion para saber si realmente quiere enviar al numero de marcas seleccionadas
                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + " correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;
                    //definimos la prueba como falso a menos de que tenga capturado el correo de prueba
                    Boolean bCorreodepeuba = false;
                    if (tbPsinnovedadescorreoprueba.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//bandera para no mandar copias de correo
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbPsinnovedadescorreoprueba.Text);
                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }

                    for (int y = 0; y < datagrid_patente_sinnovedades.Rows.Count; y++)
                    {
                        bool valor = (bool)datagrid_patente_sinnovedades.Rows[y].Cells[1].Value;
                        if (valor)
                        {
                            // obtenemos el objeto de marcasin novedad seleccionada del datagridview por medio de la busqueda de su casoid
                            String scasoid = datagrid_patente_sinnovedades.Rows[y].Cells[0].Value.ToString();
                            objMP_seleccionada obj_Patenteseleccionada = patentesinnovedades.Find(x => x.sCasoId == scasoid);


                            String sDays = "-10000";
                            String sTipoPlazoId = obj_Patenteseleccionada.stipoplazoid;
                            String sPlazoId = obj_Patenteseleccionada.sPlazoId;
                            String sEstatusPlazoId = obj_Patenteseleccionada.sEstatusPlazoId;
                            String sUID_Jobconfig = "a8050719-ceab-11e8-869b-000c291erf11";
                            String sCasoId = obj_Patenteseleccionada.sCasoId;
                            String sTiposolicitudid = obj_Patenteseleccionada.sTipoSolicitudId;
                            String sDocumentoid = obj_Patenteseleccionada.sDocumentoId;
                            String sCasoNumero = obj_Patenteseleccionada.sCasoNumero;
                            String sContactoEmail = obj_Patenteseleccionada.sContactoEmail;// "eramiref92@gmail.com";//´Para pruebas
                            String sIdiomaClave = obj_Patenteseleccionada.sIdiomaClave;
                            String sSubject = obj_Patenteseleccionada.sSubject;
                            int REC = 0;
                            Action act = () =>
                            {
                                //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                                //por lo que generamos el siguiente query
                                conect_robot con = new conect_robot();
                                String datosconectjobconfig = con.getdatavalues();
                                //String sQuerygetUidjobconfig = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
                                //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
                                String sUID_JobConfig = "a8050719-ceab-11e8-869b-000c291erf11";
                                String FunctionName = obj_Patenteseleccionada.Fobj_unctionName;//"Get_Email_Marca_sinnovedad";
                                String sViewName = obj_Patenteseleccionada.sobj_ViewName;//"warning_marcassinovedades_erf";
                                //while (resps_UIDJobconfig.Read())
                                //{
                                //    sUID_JobConfig = validareader("UID_JobConfig", "UID_JobConfig", resps_UIDJobconfig);
                                //    FunctionName = validareader("FunctionName", "UID_JobConfig", resps_UIDJobconfig);
                                //    sViewName = validareader("ViewName", "UID_JobConfig", resps_UIDJobconfig);
                                //}
                                conect_robot valores = new conect_robot();
                                String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

                                //resps_UIDJobconfig.Close();
                                String sCorreodestino = "";

                                if (bCorreodepeuba)
                                {
                                    sCorreodestino = tbPsinnovedadescorreoprueba.Text;//Prueba de correo
                                }
                                else
                                {
                                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                                }
                                String[] correos = sCorreodestino.Split(',');
                                if (correos.Length > 1)
                                {
                                    sCorreodestino = correos[0];
                                    for (int z = 1; z < correos.Length; z++)
                                    {
                                        sGlobalSmtpCC += "," + correos[z];
                                    }

                                }
                                //String sAsunto = listView1.CheckedItems[x].SubItems[42].Text;
                                //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                                iContadorcorreossend += iresult;
                                //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
                                if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                                {
                                    int iCasoid = Int32.Parse(sCasoId);
                                    int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                                    int isDocumentoid;
                                    if (sDocumentoid == "")
                                    {
                                        isDocumentoid = 0;
                                    }
                                    else
                                    {
                                        isDocumentoid = Int32.Parse(sDocumentoid);
                                    }

                                    int iDays = Int32.Parse("-10000");
                                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                    int iPlazoId = Int32.Parse(sPlazoId);
                                    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                                }
                            };
                            using (Waitforsendmail obj = new Waitforsendmail(act))
                            {
                                obj.ShowDialog();
                            }
                            tbEnviadosPatentesinnovedad.Text = iContadorcorreossend + "";
                            tbactualizadosPsinnovedad.Text = iContadorcorreosupdates + "";
                        }
                    }

                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates);// + iContadorcorreosupdates + " Registros en la base de datos King");
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void datagrid_renovacion_marcatardia_viejaley_ColumnHeaderCellChanged(object sender, DataGridViewColumnEventArgs e)
        {
            MessageBox.Show("Guardamos el orden actual en la base con el id del usuario.");
        }

        private void button94_Click(object sender, EventArgs e)
        {
            tbLoading_NL.Text = "Cargando registros ...";
            System.Threading.Thread.Sleep(1000);
            conect_robot con1 = new conect_robot();
            String sPlazoid = "";
            String sSend = "";
            String sSendnow = "";
            if (true)
            {
                tbCountRenovacion_NL.Text = "";
                List<ListViewItem> myItems = new List<ListViewItem>();
                int contador = 0;
                String sFiltrocasonumero = "";
                if (tb_casonumero_NL.Text != "")
                {
                    sFiltrocasonumero = " AND war.CasoNumero like '%" + tb_casonumero_NL.Text + "%' ";
                }
                String queryinsert = "use jobconfig; SELECT  " +
                                        " war.PlazoId, " +
                                        " war.CasoId, " +
                                        " war.DocumentoId, " +
                                        " war.TipoPlazoDescrip, " +
                                        " war.ClienteNombre, " +
                                        " war.InteresadoNombre, " +
                                        " war.TipoSolicitudDescrip, " +
                                        " war.SubTipoSolicitudDescripcion, " +
                                        " war.Marca, " +
                                        " war.CasoNumeroExpedienteLargo, " +
                                        " war.CasoNumero, " +
                                        " war.CasoProductosClase, " +
                                        " war.ReferenciaNombre, " +
                                        " DATE_FORMAT(war.CasoFechaVigencia,'%d-%m-%Y') as CasoFechaVigencia, " +
                                        " DATE_FORMAT(war.CasoFechaIni,'%d-%m-%Y') as CasoFechaIni, " +
                                        " DATE_FORMAT(war.CasoFechaFin,'%d-%m-%Y') as CasoFechaFin, " +
                                        " war.DocumentoFechaRecepcion, " +
                                        " war.DocumentoFechaRecepcion2meses, " +
                                        " war.DocumentoFechaRecepcion4meses, " +
                                        " war.anualidades, " +
                                        " war.PaisNombre, " +
                                        " DATE_FORMAT(war.CasoFechaRecepcion,'%d-%m-%Y') as CasoFechaRecepcion, " +
                                        " war.CasoFechaFilingCliente, " +
                                        " war.CasoNumConcedida, " +
                                        " war.DocumentoFecha, " +
                                        " war.DocumentoFechaVencimiento, " +
                                        " war.EstatusCasoId, " +
                                        " war.EstatusCasoDescrip, " +
                                        " war.tipoplazoid, " +
                                        " war.EstatusPlazoId, " +
                                        " war.EstatusPlazoDescrip, " +
                                        " war.PlazoFechaAtencion, " +
                                        " war.ContactoNombre, " +
                                        " war.ContactoEmail, " +
                                        " war.IdiomaOriginalID, " +
                                        " war.IdiomaId, " +
                                        " war.IdiomaClave, " +
                                        " war.Subject, " +
                                        " war.SendNow, " +
                                        " DATE_FORMAT(Get_Fechaultimo(war.CasoId, 'warning_renovacionmarca_20_34_2'),'%d-%m-%Y') AS `FechaSended`, " +
                                        " Get_countenviados(war.CasoId, 'warning_renovacionmarca_20_34_2') AS `numenviados` " +
                                        " FROM " +
                                        "    jobconfig.warning_renovacionmarca_20_34_2 as war " +
                                        " WHERE " +
                                        " CURDATE() BETWEEN (CasoFechaVigencia - INTERVAL 9 MONTH) AND CasoFechaVigencia " +
                                        sFiltrocasonumero +
                                        " group by CasoId " +
                                        " ORDER BY CasoFechaVigencia DESC;";
                if (renovacionmarcaatiemponuevaley != null)
                {
                    renovacionmarcaatiemponuevaley.Clear();
                }

                datagrid_renovacion_marcaatiempo_nuevaley.Rows.Clear();
                Action act = () =>
                {
                    MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);

                    while (respuestastringinsert.Read())
                    {
                        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);

                        try
                        {
                            String sPlazoId = validareader("PlazoId", "PlazoId", respuestastringinsert);
                            String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                            String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);

                            String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                            String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                            String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                            String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                            String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                            String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                            String sMarca = validareader("Marca", "Marca", respuestastringinsert);
                            String sInvento = "";
                            String sFechadiferencia = "";
                            String sFechaLimite = "";
                            String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                            String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                            String sCasoProductosClase = validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                            String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                            String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);

                            String sCasoFechaConcesion = validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);

                            String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                            String sCasoFechaInidos = validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                            String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                            String sDocumentoFechaRecepcion = validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                            String sDocumentoFechaRecepcion2meses = validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                            String sDocumentoFechaRecepcion4meses = validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                            String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                            String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                            String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                            String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                            String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                            String sDocumentoFecha = validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                            String sDocumentoFechaVencimiento = validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                            String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                            String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                            String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                            String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                            String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                            String sPlazoFechaAtencion = validareader("PlazoFechaAtencion", "PlazoFechaAtencion", respuestastringinsert);
                            String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                            String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                            String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                            String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                            String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                            String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                            String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                            String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                            String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);

                            int REC = 0;
                            String sUID_JobConfig = "a8b24705-ceab-11e8-869b-000c291862e7";
                            String FunctionName = "Get_Email_RenovacionMarca_20_34_2";
                            String sViewName = "warning_renovacionmarca_20_34_2";

                            DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                            DateTime dFechaLimite = validafechavacia(sFechaLimite);
                            DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                            DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                            DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                            DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                            DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                            DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                            DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                            DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);
                            DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                            DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                            DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                            DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                            DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                            DateTime dFechaSended = validafechavacia(sFechaSended);

                            objMP_seleccionada renovacion_marcaatiempo_nuevaley = new objMP_seleccionada(sPlazoId,
                                                                                         sCasoId,
                                                                                        sDocumentoId,
                                                                                        sTipoPlazoDescrip,
                                                                                        sClienteNombre,
                                                                                        sInteresadoNombre,
                                                                                        sTipoSolicitudDescrip,
                                                                                        sSubTipoSolicitudDescripcion,
                                                                                        sMarca,
                                                                                        sInvento,
                                                                                        sFechadiferencia,
                                                                                        dFechaLimite,
                                                                                        sCasoNumeroExpedienteLargo,
                                                                                        sCasoNumero,
                                                                                        sCasoProductosClase,
                                                                                        sReferenciaNombre,
                                                                                        dCasoFechaConcesion,
                                                                                        dCasoFechaVigencia,
                                                                                        dCasoFechaIni,
                                                                                        dCasoFechaInidos,
                                                                                        dCasoFechaFin,
                                                                                        dDocumentoFechaRecepcion,
                                                                                        dDocumentoFechaRecepcion2meses,
                                                                                        dDocumentoFechaRecepcion4meses,
                                                                                        sanualidades,
                                                                                        sPaisNombre,
                                                                                        dCasoFechaRecepcion,
                                                                                        dCasoFechaFilingCliente,
                                                                                        sCasoNumConcedida,
                                                                                        dDocumentoFecha,
                                                                                        dDocumentoFechaVencimiento,
                                                                                        sEstatusCasoId,
                                                                                        sEstatusCasoDescrip,
                                                                                        stipoplazoid,
                                                                                        sEstatusPlazoId,
                                                                                        sEstatusPlazoDescrip,
                                                                                        dPlazoFechaAtencion,
                                                                                        sContactoNombre,
                                                                                        sContactoEmail,
                                                                                        sIdiomaOriginalID,
                                                                                        sIdiomaId,
                                                                                        sIdiomaClave,
                                                                                        sSubject,
                                                                                        sSendNow,
                                                                                        dFechaSended,
                                                                                        snumenviados,
                                                                                        REC,
                                                                                        tbCorreodepruebas.Text,
                                                                                        sUID_JobConfig,
                                                                                        FunctionName,
                                                                                        sViewName,
                                                                                        sTipoSolicitudId
                                                                                        );
                            renovacionmarcaatiemponuevaley.Add(renovacion_marcaatiempo_nuevaley);
                        }
                        catch (Exception Ex)
                        {
                            //MessageBox.Show("Mensaje "+Ex.Message);
                        }
                        contador++;
                    }
                    respuestastringinsert.Close();
                    con1.Cerrarconexion();
                };
                using (Waitforcases form = new Waitforcases(act))
                {
                    form.ShowDialog();
                }

                foreach (var Obj_renovacion_marcaatiempo_nuevaley in renovacionmarcaatiemponuevaley)
                {

                    /*1*/
                    CheckBox checkboxcell = new CheckBox();

                    datagrid_renovacion_marcaatiempo_nuevaley.Rows.Add(Obj_renovacion_marcaatiempo_nuevaley.sCasoId, false,
                      /*2*/        Obj_renovacion_marcaatiempo_nuevaley.sFechaSended,
                      /*3*/        Obj_renovacion_marcaatiempo_nuevaley.snumenviados,
                      /*4*/        Obj_renovacion_marcaatiempo_nuevaley.sPlazoId,
                      /*5*/        Obj_renovacion_marcaatiempo_nuevaley.sCasoId,
                      /*6*/        Obj_renovacion_marcaatiempo_nuevaley.sCasoNumero,
                      /*7*/        Obj_renovacion_marcaatiempo_nuevaley.sCasoNumConcedida,//numero de registro
                      /*8*/        Obj_renovacion_marcaatiempo_nuevaley.sMarca,
                      /*9*/        Obj_renovacion_marcaatiempo_nuevaley.sTipoPlazoDescrip,
                      /*10*/       Obj_renovacion_marcaatiempo_nuevaley.sClienteNombre,
                      /*11*/       Obj_renovacion_marcaatiempo_nuevaley.sInteresadoNombre,
                      /*12*/       Obj_renovacion_marcaatiempo_nuevaley.sContactoNombre,
                      /*13*/       Obj_renovacion_marcaatiempo_nuevaley.sContactoEmail, //solicitante 
                      /*14*/       Obj_renovacion_marcaatiempo_nuevaley.sSubject,
                      /*15*/       Obj_renovacion_marcaatiempo_nuevaley.sTipoSolicitudDescrip,
                      /*16*/       Obj_renovacion_marcaatiempo_nuevaley.sSubTipoSolicitudDescripcion,
                      /*17*/       Obj_renovacion_marcaatiempo_nuevaley.sCasoNumeroExpedienteLargo,//No.expediente
                      /*18*/       Obj_renovacion_marcaatiempo_nuevaley.sCasoProductosClase,//Clase
                      /*19*/       Obj_renovacion_marcaatiempo_nuevaley.sReferenciaNombre,//referencia cliente 
                      /*20*/       Obj_renovacion_marcaatiempo_nuevaley.sCasoFechaRecepcion, //fecha presentacion
                      /*21*/       Obj_renovacion_marcaatiempo_nuevaley.sCasoFechaVigencia, //fecha vigencia
                      /*22*/       Obj_renovacion_marcaatiempo_nuevaley.sCasoFechaIni, //caso fecha inicio
                      /*23*/       Obj_renovacion_marcaatiempo_nuevaley.sCasoFechaFin, //caso fecha fin 
                      /*24*/       "",
                      /*25*/       "",
                      /*26*/       Obj_renovacion_marcaatiempo_nuevaley.sDocumentoFechaRecepcion,
                      /*27*/       Obj_renovacion_marcaatiempo_nuevaley.sDocumentoFechaRecepcion2meses,
                      /*28*/       Obj_renovacion_marcaatiempo_nuevaley.sDocumentoFechaRecepcion4meses,
                      /*29*/       Obj_renovacion_marcaatiempo_nuevaley.sanualidades,
                      /*30*/       Obj_renovacion_marcaatiempo_nuevaley.sPaisNombre,
                      /*31*/       Obj_renovacion_marcaatiempo_nuevaley.sCasoFechaFilingCliente,
                      /*32*/       Obj_renovacion_marcaatiempo_nuevaley.sDocumentoFecha,
                      /*33*/       Obj_renovacion_marcaatiempo_nuevaley.sDocumentoFechaVencimiento,
                      /*34*/       Obj_renovacion_marcaatiempo_nuevaley.sEstatusCasoId,
                      /*35*/       Obj_renovacion_marcaatiempo_nuevaley.stipoplazoid,
                      /*36*/       Obj_renovacion_marcaatiempo_nuevaley.sEstatusPlazoId,
                      /*37*/       Obj_renovacion_marcaatiempo_nuevaley.sPlazoFechaAtencion,
                      /*38*/       Obj_renovacion_marcaatiempo_nuevaley.sIdiomaOriginalID,
                      /*39*/       Obj_renovacion_marcaatiempo_nuevaley.sIdiomaId,
                      /*40*/       Obj_renovacion_marcaatiempo_nuevaley.sIdiomaClave,
                      /*41*/       Obj_renovacion_marcaatiempo_nuevaley.sEstatusCasoDescrip,
                      /*42*/       Obj_renovacion_marcaatiempo_nuevaley.sEstatusPlazoDescrip);
                }
                AdjustColumnOrder_RMTiempoNL();
                tbCountRenovacion_NL.Text = contador + "";
                tbLoading_NL.Text = "";
            }
            else
            {
                tbLoading_NL.Text = "";
            }

        }


        private void AdjustColumnOrder_RMTiempoNL()
        {
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_casoid"].DisplayIndex = 0;// RMTNL_casoid
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_seleccionar"].DisplayIndex = 1;// RMTNL_seleccionar
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_Ultimi_correo"].DisplayIndex = 2;// RMTNL_Ultimi_correo
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_Correos_enviados"].DisplayIndex = 3;// RMTNL_Correos_enviados
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_plazoid"].DisplayIndex = 4;// RMTNL_plazoid
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_casoid_view"].DisplayIndex = 5;// RMTNL_casoid_view
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_casonumero"].DisplayIndex = 6;// RMTNL_casonumero
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_Numero_registro"].DisplayIndex = 7;// RMTNL_Numero_registro antes: caso numero concedida
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_marca"].DisplayIndex = 8;// RMTNL_marca
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_tipoplazodescrip"].DisplayIndex = 9;// RMTNL_tiposoldescrip
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_clientenombre"].DisplayIndex = 10;// RMTNL_clientenombre
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_solicitante"].DisplayIndex = 11;// RMTNL_solicitante
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_contactonombre"].DisplayIndex = 12;// RMTNL_contactonombre
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_contactomail"].DisplayIndex = 13;// RMTNL_contactomail
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_subject"].DisplayIndex = 14;// RMTNL_subject
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_tiposoldescrip"].DisplayIndex = 15;// RMTNL_tiposoldescrip
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_subtiposoldesc"].DisplayIndex = 16;// RMTNL_subtiposoldesc
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_nexp"].DisplayIndex = 17;// RMTNL_nexp
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_clase"].DisplayIndex = 18;// RMTNL_clase
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_Referencia_nombre"].DisplayIndex = 19;// RMTNL_Referencia_nombre
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_fechapresentacion"].DisplayIndex = 20;// RMTNL_fechapresentacion
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_fechavigencia"].DisplayIndex = 21;// RMTNL_fechavigencia
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_fecha_inicio"].DisplayIndex = 22;// RMTNL_fecha_inicio
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_fecha_fin"].DisplayIndex = 23;// RMTNL_fecha_fin
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_dias_proximo_mail"].DisplayIndex = 24;// RMTNL_dias_proximo_mail
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_fecha_proximo_mail"].DisplayIndex = 25;// RMTNL_fecha_proximo_mail
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_documento_fecha_recepcion"].DisplayIndex = 26;// RMTNL_documento_fecha_recepcion
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_documento_fecha_recepcion_2"].DisplayIndex = 27;// RMTNL_documento_fecha_recepcion_2
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_documento_fecha_recepcion_4"].DisplayIndex = 28;// RMTNL_documento_fecha_recepcion_4
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_anualidades"].DisplayIndex = 29;// RMTNL_anualidades
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_paisnombre"].DisplayIndex = 30;// RMTNL_paisnombre
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_fecha_filing_cliente"].DisplayIndex = 31;// RMTNL_fecha_filing_cliente
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_documento_fecha"].DisplayIndex = 32;// RMTNL_documento_fecha
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_documento_fecha_vencimiento"].DisplayIndex = 33;// RMTNL_documento_fecha_vencimiento
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_estatus_caso"].DisplayIndex = 34;// RMTNL_estatus_caso
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_tipo_plazo_id"].DisplayIndex = 35;// RMTNL_tipo_plazo_id
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_estatus_plazo_id"].DisplayIndex = 36;// RMTNL_estatus_plazo_id
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_plazo_fecha_atencion"].DisplayIndex = 37;// RMTNL_plazo_fecha_atencion
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_idioma_original_id"].DisplayIndex = 38;// RMTNL_idioma_original_id
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_idioma_id"].DisplayIndex = 39;// RMTNL_idioma_id
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_indiomaclave"].DisplayIndex = 40;// RMTNL_indiomaclave
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_estatuscasodescr"].DisplayIndex = 41;// RMTNL_estatuscasodescr
            datagrid_renovacion_marcaatiempo_nuevaley.Columns["RMTiempoNL_estatusplazodescr"].DisplayIndex = 42;// RMTNL_estatusplazodescr
        }

        private void button93_Click(object sender, EventArgs e)
        {
            try
            {
                // contamos el numero de marcas seleccionadas
                int contador = 0;
                for (int z = 0; z < datagrid_renovacion_marcaatiempo_nuevaley.Rows.Count; z++)
                {
                    bool valor = (bool)datagrid_renovacion_marcaatiempo_nuevaley.Rows[z].Cells[1].Value;
                    if (valor)
                    {
                        contador++;
                    }
                }

                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + "correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;

                    // definimos la prueba como falso a menos de que tenga capturado el correo de prueba
                    Boolean bCorreodepeuba = false;
                    if (tbCorreoPrueba_NL.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//bandera para no mandar copias de correo
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbCorreoPrueba_NL.Text);
                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }

                    for (int y = 0; y < datagrid_renovacion_marcaatiempo_nuevaley.Rows.Count; y++)
                    {
                        bool valor = (bool)datagrid_renovacion_marcaatiempo_nuevaley.Rows[y].Cells[1].Value;
                        if (valor)
                        {
                            //obtenemos el objeto de declaracion de uso 3 años seleccionada del datagridview por medio de la busqueda de su casoid
                            String scasoid = datagrid_renovacion_marcaatiempo_nuevaley.Rows[y].Cells[0].Value.ToString();
                            objMP_seleccionada obj_renovacion_marcaatiempo_nuevaley = renovacionmarcaatiemponuevaley.Find(x => x.sCasoId == scasoid);


                            String sDays = "-10000";
                            String sTipoPlazoId = obj_renovacion_marcaatiempo_nuevaley.stipoplazoid;
                            String sPlazoId = obj_renovacion_marcaatiempo_nuevaley.sPlazoId;
                            String sEstatusPlazoId = obj_renovacion_marcaatiempo_nuevaley.sEstatusPlazoId;
                            String sUID_Jobconfig = "";
                            String sCasoId = obj_renovacion_marcaatiempo_nuevaley.sCasoId;
                            String sTiposolicitudid = obj_renovacion_marcaatiempo_nuevaley.sTipoSolicitudId;
                            String sDocumentoid = obj_renovacion_marcaatiempo_nuevaley.sDocumentoId;
                            String sCasoNumero = obj_renovacion_marcaatiempo_nuevaley.sCasoNumero;
                            String sContactoEmail = obj_renovacion_marcaatiempo_nuevaley.sContactoEmail;// "eramiref92@gmail.com";//´Para pruebas
                            String sIdiomaClave = obj_renovacion_marcaatiempo_nuevaley.sIdiomaClave;
                            String sSubject = obj_renovacion_marcaatiempo_nuevaley.sSubject;
                            int REC = 0;
                            Action act = () =>
                            {
                                //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                                //por lo que generamos el siguiente query
                                conect_robot con = new conect_robot();
                                String datosconectjobconfig = con.getdatavalues();
                                //String sUID_JobConfig = obj_Declaraciondeuso3.sobj_UID_JobConfig;
                                //String FunctionName = obj_Declaraciondeuso3.Fobj_unctionName;
                                //String sViewName = obj_Declaraciondeuso3.sobj_ViewName;
                                String sUID_JobConfig = "a8b24705-ceab-11e8-869b-000c291862e7";
                                String FunctionName = "Get_Email_RenovacionMarca_20_34_2";
                                String sViewName = "warning_renovacionmarca_20_34_2";
                                conect_robot valores = new conect_robot();
                                String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

                                //resps_UIDJobconfig.Close();
                                String sCorreodestino = "";

                                if (bCorreodepeuba)
                                {
                                    sCorreodestino = tbCorreoPrueba_NL.Text;//Prueba de correo
                                }
                                else
                                {
                                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                                }
                                String[] correos = sCorreodestino.Split(',');
                                if (correos.Length > 1)
                                {
                                    sCorreodestino = correos[0];
                                    for (int z = 1; z < correos.Length; z++)
                                    {
                                        sGlobalSmtpCC += "," + correos[z];
                                    }

                                }
                                //String sAsunto = listView1.CheckedItems[x].SubItems[42].Text;
                                //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                                iContadorcorreossend += iresult;
                                //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
                                if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                                {
                                    int iCasoid = Int32.Parse(sCasoId);
                                    int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                                    int isDocumentoid;
                                    if (sDocumentoid == "")
                                    {
                                        isDocumentoid = 0;
                                    }
                                    else
                                    {
                                        isDocumentoid = Int32.Parse(sDocumentoid);
                                    }

                                    int iDays = Int32.Parse("-10000");
                                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                    int iPlazoId = Int32.Parse(sPlazoId);
                                    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                                }
                            };
                            using (Waitforsendmail obj = new Waitforsendmail(act))
                            {
                                obj.ShowDialog();
                            }
                            tbCorreosenviados_NL.Text = iContadorcorreossend + "";
                            tbCorreosactualizados_NL.Text = iContadorcorreosupdates + "";

                        }
                    }
                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates);
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void button92_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_renovacion_marcaatiempo_nuevaley.Rows)
            {

                row.Cells["RMTiempoNL_seleccionar"].Value = true;

            }
        }

        private void button91_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_renovacion_marcaatiempo_nuevaley.Rows)
            {

                row.Cells["RMTiempoNL_seleccionar"].Value = false;

            }
        }

        private void button90_Click(object sender, EventArgs e)
        {
            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Plazoid";
                workSheet.Cells[3, "E"] = "Casoid";
                workSheet.Cells[3, "F"] = "Casonumero";
                workSheet.Cells[3, "G"] = "No.de Registro";
                workSheet.Cells[3, "H"] = "Marca";
                workSheet.Cells[3, "I"] = "tipoplazadescrip";
                workSheet.Cells[3, "J"] = "clienteNombre";
                workSheet.Cells[3, "K"] = "InteresadoNombre";
                workSheet.Cells[3, "L"] = "ContactoNombre";
                workSheet.Cells[3, "M"] = "ContactoEmail";
                workSheet.Cells[3, "N"] = "Subject";
                workSheet.Cells[3, "O"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "P"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "Q"] = "No.de Expediente";
                workSheet.Cells[3, "R"] = "Clase";
                workSheet.Cells[3, "S"] = "Referencia Cliente";
                workSheet.Cells[3, "T"] = "Fecha de Presentación";
                workSheet.Cells[3, "U"] = "Casofechavigencia";
                workSheet.Cells[3, "V"] = "CasoFechaInicio";
                workSheet.Cells[3, "W"] = "CasoFechaFin";
                workSheet.Cells[3, "X"] = "Pais Nombre";
                workSheet.Cells[3, "Y"] = "IdiomaClave";


                workSheet.Cells[1, "A"] = "Renovación de Marca a tiempo (Nueva Ley)";
                workSheet.Range["A1", "G1"].Merge();
                workSheet.Range["A1", "G1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "G1"].Font.Bold = true;
                workSheet.Range["A1", "G1"].Font.Size = 20;
                var row = 3;

                for (int i = 1; i < datagrid_renovacion_marcaatiempo_nuevaley.Rows.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[1].Value;
                    workSheet.Cells[i + 4, "B"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[2].Value;
                    workSheet.Cells[i + 4, "C"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[3].Value;
                    workSheet.Cells[i + 4, "D"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[4].Value;
                    workSheet.Cells[i + 4, "E"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[5].Value;
                    workSheet.Cells[i + 4, "F"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[6].Value;
                    workSheet.Cells[i + 4, "G"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[7].Value;
                    workSheet.Cells[i + 4, "H"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[8].Value;
                    workSheet.Cells[i + 4, "I"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[9].Value;
                    workSheet.Cells[i + 4, "J"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[10].Value;
                    workSheet.Cells[i + 4, "K"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[11].Value;
                    workSheet.Cells[i + 4, "L"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[12].Value;
                    workSheet.Cells[i + 4, "M"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[13].Value;
                    workSheet.Cells[i + 4, "N"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[14].Value;
                    workSheet.Cells[i + 4, "O"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[15].Value;
                    workSheet.Cells[i + 4, "P"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[16].Value;
                    workSheet.Cells[i + 4, "Q"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[17].Value;
                    workSheet.Cells[i + 4, "R"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[18].Value;
                    workSheet.Cells[i + 4, "S"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[19].Value;
                    workSheet.Cells[i + 4, "T"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[20].Value;
                    workSheet.Cells[i + 4, "U"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[21].Value;
                    workSheet.Cells[i + 4, "V"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[22].Value;
                    workSheet.Cells[i + 4, "W"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[23].Value;
                    workSheet.Cells[i + 4, "X"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[30].Value;
                    workSheet.Cells[i + 4, "Y"] = datagrid_renovacion_marcaatiempo_nuevaley.Rows[i].Cells[40].Value;

                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "Y" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
                workSheet.Range["A3", "Y" + (row + 4)].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                workSheet.Range["A3", "Y3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            }
            catch (Exception E)
            {
                Console.Write("Se canceló la exportación");
            }
        }

        private void button89_Click_1(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_renovacion_marcaatiempo_nuevaley.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                if (datagrid_renovacion_marcaatiempo_nuevaley.CurrentRow.Cells[2].Value.ToString() != "")

                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void button100_Click(object sender, EventArgs e)
        {
            label71.Text = "Cargando registros ...";
            System.Threading.Thread.Sleep(1000);
            conect_robot con1 = new conect_robot();
            String sPlazoid = "";
            String sSend = "";
            String sSendnow = "";
            if (true)
            {
                tbCountresultadotardias_NL.Text = "";
                List<ListViewItem> myItems = new List<ListViewItem>();
                int contador = 0;
                String queryinsert = "use jobconfig; SELECT  " +
                                    " war.PlazoId, " +
                                    " war.CasoId, " +
                                    " war.DocumentoId, " +
                                    " war.TipoPlazoDescrip, " +
                                    " war.ClienteNombre, " +
                                    " war.InteresadoNombre, " +
                                    " war.TipoSolicitudDescrip, " +
                                    " war.SubTipoSolicitudDescripcion, " +
                                    " war.Marca, " +
                                    " war.CasoNumeroExpedienteLargo, " +
                                    " war.CasoNumero, " +
                                    " war.CasoProductosClase, " +
                                    " war.ReferenciaNombre, " +
                                    " war.CasoFechaVigencia, " +
                                    " DATE_FORMAT(war.CasoFechaIni,'%d-%m-%Y') as CasoFechaIni, " +
                                    " DATE_FORMAT(war.CasoFechaFin,'%d-%m-%Y') as CasoFechaFin, " +
                                    " DATE_FORMAT(war.DocumentoFechaRecepcion,'%d-%m-%Y') as DocumentoFechaRecepcion, " +
                                    " war.DocumentoFechaRecepcion2meses, " +
                                    " war.DocumentoFechaRecepcion4meses, " +
                                    " war.anualidades, " +
                                    " war.PaisNombre, " +
                                    " DATE_FORMAT(war.CasoFechaRecepcion,'%d-%m-%Y') as CasoFechaRecepcion, " +
                                    " war.CasoFechaFilingCliente, " +
                                    " war.CasoNumConcedida, " +
                                    " war.DocumentoFecha, " +
                                    " war.DocumentoFechaVencimiento, " +
                                    " war.EstatusCasoId, " +
                                    " war.EstatusCasoDescrip, " +
                                    " war.tipoplazoid, " +
                                    " war.EstatusPlazoId, " +
                                    " war.EstatusPlazoDescrip, " +
                                    " war.PlazoFechaAtencion, " +
                                    " war.ContactoNombre, " +
                                    " war.ContactoEmail, " +
                                    " war.IdiomaOriginalID, " +
                                    " war.IdiomaId, " +
                                    " war.IdiomaClave, " +
                                    " war.Subject, " +
                                    " war.SendNow, " +
                                    " DATE_FORMAT(Get_Fechaultimo(war.CasoId, 'warning_renovacionmarca_20_34_2'),'%d-%m-%Y') AS `FechaSended`," +
                                    " Get_countenviados(war.CasoId, 'warning_renovacionmarca_20_34_2') AS `numenviados` " +
                                    "FROM " +
                                    "    jobconfig.warning_renovacionmarca_20_34_2 as war " +
                                    "WHERE " +
                                    " CURDATE() BETWEEN CasoFechaVigencia AND (CasoFechaVigencia + INTERVAL 6 MONTH) " +
                                    " group by CasoId " +
                                    " ORDER BY CasoFechaVigencia DESC; ";
                if (renovacionmarcatardianuevaley != null)
                {
                    renovacionmarcatardianuevaley.Clear();
                }

                datagrid_renovacion_marcatardia_nuevaley.Rows.Clear();
                Action act = () =>
                {
                    MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);

                    while (respuestastringinsert.Read())
                    {
                        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);

                        try
                        {
                            String sPlazoId = validareader("PlazoId", "PlazoId", respuestastringinsert);
                            String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                            String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);
                            String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                            String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                            String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                            String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                            String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                            String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                            String sMarca = validareader("Marca", "Marca", respuestastringinsert);
                            String sInvento = "";
                            String sFechadiferencia = "";
                            String sFechaLimite = "";
                            String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                            String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                            String sCasoProductosClase = validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                            String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                            String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);


                            String sCasoFechaConcesion = validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);

                            String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                            String sCasoFechaInidos = validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                            String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                            String sDocumentoFechaRecepcion = validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                            String sDocumentoFechaRecepcion2meses = validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                            String sDocumentoFechaRecepcion4meses = validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                            String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                            String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                            String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                            String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                            String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                            String sDocumentoFecha = validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                            String sDocumentoFechaVencimiento = validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                            String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                            String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                            String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                            String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                            String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                            String sPlazoFechaAtencion = validareader("PlazoFechaAtencion", "PlazoFechaAtencion", respuestastringinsert);
                            String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                            String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                            String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                            String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                            String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                            String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                            String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                            String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                            String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);

                            int REC = 0;
                            String sUID_JobConfig = "a8b24705-ceab-11e8-869b-000c291862e7";
                            String FunctionName = "Get_Email_RenovacionMarca_20_34_2";
                            String sViewName = "warning_renovacionmarca_20_34_2";

                            DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                            DateTime dFechaLimite = validafechavacia(sFechaLimite);
                            DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                            DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                            DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                            DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                            DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                            DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                            DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                            DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);
                            DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                            DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                            DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                            DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                            DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                            DateTime dFechaSended = validafechavacia(sFechaSended);

                            objMP_seleccionada renovacion_marcatardia_nuevaley = new objMP_seleccionada(sPlazoId,
                                                                                                        sCasoId,
                                                                                                        sDocumentoId,
                                                                                                        sTipoPlazoDescrip,
                                                                                                        sClienteNombre,
                                                                                                        sInteresadoNombre,
                                                                                                        sTipoSolicitudDescrip,
                                                                                                        sSubTipoSolicitudDescripcion,
                                                                                                        sMarca,
                                                                                                        sInvento,
                                                                                                        sFechadiferencia,
                                                                                                        dFechaLimite,
                                                                                                        sCasoNumeroExpedienteLargo,
                                                                                                        sCasoNumero,
                                                                                                        sCasoProductosClase,
                                                                                                        sReferenciaNombre,
                                                                                                        dCasoFechaConcesion,
                                                                                                        dCasoFechaVigencia,
                                                                                                        dCasoFechaIni,
                                                                                                        dCasoFechaInidos,
                                                                                                        dCasoFechaFin,
                                                                                                        dDocumentoFechaRecepcion,
                                                                                                        dDocumentoFechaRecepcion2meses,
                                                                                                        dDocumentoFechaRecepcion4meses,
                                                                                                        sanualidades,
                                                                                                        sPaisNombre,
                                                                                                        dCasoFechaRecepcion,
                                                                                                        dCasoFechaFilingCliente,
                                                                                                        sCasoNumConcedida,
                                                                                                        dDocumentoFecha,
                                                                                                        dDocumentoFechaVencimiento,
                                                                                                        sEstatusCasoId,
                                                                                                        sEstatusCasoDescrip,
                                                                                                        stipoplazoid,
                                                                                                        sEstatusPlazoId,
                                                                                                        sEstatusPlazoDescrip,
                                                                                                        dPlazoFechaAtencion,
                                                                                                        sContactoNombre,
                                                                                                        sContactoEmail,
                                                                                                        sIdiomaOriginalID,
                                                                                                        sIdiomaId,
                                                                                                        sIdiomaClave,
                                                                                                        sSubject,
                                                                                                        sSendNow,
                                                                                                        dFechaSended,
                                                                                                        snumenviados,
                                                                                                        REC,
                                                                                                        tbCorreodepruebas.Text,
                                                                                                        sUID_JobConfig,
                                                                                                        FunctionName,
                                                                                                        sViewName,
                                                                                                        sTipoSolicitudId
                                                                                                        );
                            renovacionmarcatardianuevaley.Add(renovacion_marcatardia_nuevaley);

                        }
                        catch (Exception Ex)
                        {

                        }
                        contador++;
                    }
                    respuestastringinsert.Close();
                    con1.Cerrarconexion();
                };
                using (Waitforcases form = new Waitforcases(act))
                {
                    form.ShowDialog();
                }
                foreach (var Obj_renovacion_marcatardia_nuevaley in renovacionmarcatardianuevaley)
                {
                    /*1*/
                    CheckBox checkboxcell = new CheckBox();

                    datagrid_renovacion_marcatardia_nuevaley.Rows.Add(Obj_renovacion_marcatardia_nuevaley.sCasoId, false,
       /*2*/        Obj_renovacion_marcatardia_nuevaley.sFechaSended,
       /*3*/        Obj_renovacion_marcatardia_nuevaley.snumenviados,
       /*4*/        Obj_renovacion_marcatardia_nuevaley.sPlazoId,
       /*5*/        Obj_renovacion_marcatardia_nuevaley.sCasoId,
       /*6*/        Obj_renovacion_marcatardia_nuevaley.sCasoNumero,
       /*7*/        Obj_renovacion_marcatardia_nuevaley.sCasoNumConcedida,//numero de registro
       /*8*/        Obj_renovacion_marcatardia_nuevaley.sMarca,
       /*9*/        Obj_renovacion_marcatardia_nuevaley.sTipoPlazoDescrip,
       /*10*/       Obj_renovacion_marcatardia_nuevaley.sClienteNombre,
       /*11*/       Obj_renovacion_marcatardia_nuevaley.sInteresadoNombre,
       /*12*/       Obj_renovacion_marcatardia_nuevaley.sContactoNombre,
       /*13*/       Obj_renovacion_marcatardia_nuevaley.sContactoEmail, //solicitante 
       /*14*/       Obj_renovacion_marcatardia_nuevaley.sSubject,
       /*15*/       Obj_renovacion_marcatardia_nuevaley.sTipoSolicitudDescrip,
       /*16*/       Obj_renovacion_marcatardia_nuevaley.sSubTipoSolicitudDescripcion,
       /*17*/       Obj_renovacion_marcatardia_nuevaley.sCasoNumeroExpedienteLargo,//No.expediente
       /*18*/       Obj_renovacion_marcatardia_nuevaley.sCasoProductosClase,//Clase
       /*19*/       Obj_renovacion_marcatardia_nuevaley.sReferenciaNombre,//referencia cliente 
       /*20*/       Obj_renovacion_marcatardia_nuevaley.sCasoFechaRecepcion, //fecha presentacion
       /*21*/       Obj_renovacion_marcatardia_nuevaley.sCasoFechaVigencia, //fecha vigencia
       /*22*/       Obj_renovacion_marcatardia_nuevaley.sCasoFechaIni, //caso fecha inicio
       /*23*/       Obj_renovacion_marcatardia_nuevaley.sCasoFechaFin, //caso fecha fin 
       /*24*/       "",
       /*25*/       "",
       /*26*/       Obj_renovacion_marcatardia_nuevaley.sDocumentoFechaRecepcion,
       /*27*/       Obj_renovacion_marcatardia_nuevaley.sDocumentoFechaRecepcion2meses,
       /*28*/       Obj_renovacion_marcatardia_nuevaley.sDocumentoFechaRecepcion4meses,
       /*29*/       Obj_renovacion_marcatardia_nuevaley.sanualidades,
       /*30*/       Obj_renovacion_marcatardia_nuevaley.sPaisNombre,
       /*31*/       Obj_renovacion_marcatardia_nuevaley.sCasoFechaFilingCliente,
       /*32*/       Obj_renovacion_marcatardia_nuevaley.sDocumentoFecha,
       /*33*/       Obj_renovacion_marcatardia_nuevaley.sDocumentoFechaVencimiento,
       /*34*/       Obj_renovacion_marcatardia_nuevaley.sEstatusCasoId,
       /*35*/       Obj_renovacion_marcatardia_nuevaley.stipoplazoid,
       /*36*/       Obj_renovacion_marcatardia_nuevaley.sEstatusPlazoId,
       /*37*/       Obj_renovacion_marcatardia_nuevaley.sPlazoFechaAtencion,
       /*38*/       Obj_renovacion_marcatardia_nuevaley.sIdiomaOriginalID,
       /*39*/       Obj_renovacion_marcatardia_nuevaley.sIdiomaId,
       /*40*/       Obj_renovacion_marcatardia_nuevaley.sIdiomaClave,
       /*41*/       Obj_renovacion_marcatardia_nuevaley.sEstatusCasoDescrip,
       /*42*/       Obj_renovacion_marcatardia_nuevaley.sEstatusPlazoDescrip);
                }
                AdjustColumnOrder_RMTardiaNL();
                tbCountresultadotardias_NL.Text = contador + "";
                label71.Text = "";
            }
            else
            {
                label71.Text = "";
            }

        }


        private void AdjustColumnOrder_RMTardiaNL()
        {
            //vamos a consultar de la base por usuario el orden de èsta pestañá

            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_casoid"].DisplayIndex = 0;// RMTVL_casoid siempre va a ser 0
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_seleccionar"].DisplayIndex = 1;// RMTVL_seleccionar
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_Ultimi_correo"].DisplayIndex = 2;// RMTVL_Ultimi_correo
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_Correos_enviados"].DisplayIndex = 3;// RMTVL_Correos_enviados
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_plazoid"].DisplayIndex = 4;// RMTVL_plazoid
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_casoid_view"].DisplayIndex = 5;// RMTVL_casoid_view
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_casonumero"].DisplayIndex = 6;// RMTVL_casonumero
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_Numero_registro"].DisplayIndex = 7;// RMTVL_Numero_registro antes: caso numero concedida
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_marca"].DisplayIndex = 8;// RMTVL_marca
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_tipoplazodescrip"].DisplayIndex = 9;// RMTVL_tiposoldescrip
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_clientenombre"].DisplayIndex = 10;// RMTVL_clientenombre
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_solicitante"].DisplayIndex = 11;// RMTVL_solicitante
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_contactonombre"].DisplayIndex = 12;// RMTVL_contactonombre
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_contactomail"].DisplayIndex = 13;// RMTVL_contactomail
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_subject"].DisplayIndex = 14;// RMTVL_subject
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_tiposoldescrip"].DisplayIndex = 15;// RMTVL_tiposoldescrip
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_subtiposoldesc"].DisplayIndex = 16;// RMTVL_subtiposoldesc
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_nexp"].DisplayIndex = 17;// RMTVL_nexp
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_clase"].DisplayIndex = 18;// RMTVL_clase
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_Referencia_nombre"].DisplayIndex = 19;// RMTVL_Referencia_nombre
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_fechapresentacion"].DisplayIndex = 20;// RMTVL_fechapresentacion
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_fechavigencia"].DisplayIndex = 21;// RMTVL_fechavigencia
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_fecha_inicio"].DisplayIndex = 22;// RMTVL_fecha_inicio
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_fecha_fin"].DisplayIndex = 23;// RMTVL_fecha_fin
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_dias_proximo_mail"].DisplayIndex = 24;// RMTVL_dias_proximo_mail
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_fecha_proximo_mail"].DisplayIndex = 25;// RMTVL_fecha_proximo_mail
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_documento_fecha_recepcion"].DisplayIndex = 26;// RMTVL_documento_fecha_recepcion
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_documento_fecha_recepcion_2"].DisplayIndex = 27;// RMTVL_documento_fecha_recepcion_2
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_documento_fecha_recepcion_4"].DisplayIndex = 28;// RMTVL_documento_fecha_recepcion_4
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_anualidades"].DisplayIndex = 29;// RMTVL_anualidades
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_paisnombre"].DisplayIndex = 30;// RMTVL_paisnombre
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_fecha_filing_cliente"].DisplayIndex = 31;// RMTVL_fecha_filing_cliente
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_documento_fecha"].DisplayIndex = 32;// RMTVL_documento_fecha
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_documento_fecha_vencimiento"].DisplayIndex = 33;// RMTVL_documento_fecha_vencimiento
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_estatus_caso"].DisplayIndex = 34;// RMTVL_estatus_caso
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_tipo_plazo_id"].DisplayIndex = 35;// RMTVL_tipo_plazo_id
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_estatus_plazo_id"].DisplayIndex = 36;// RMTVL_estatus_plazo_id
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_plazo_fecha_atencion"].DisplayIndex = 37;// RMTVL_plazo_fecha_atencion
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_idioma_original_id"].DisplayIndex = 38;// RMTVL_idioma_original_id
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_idioma_id"].DisplayIndex = 39;// RMTVL_idioma_id
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_indiomaclave"].DisplayIndex = 40;// RMTVL_indiomaclave
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_estatuscasodescr"].DisplayIndex = 41;// RMTVL_estatuscasodescr
            datagrid_renovacion_marcatardia_nuevaley.Columns["RMTardiaNL_estatusplazodescr"].DisplayIndex = 42;// RMTVL_estatusplazodescr
        }

        private void button99_Click(object sender, EventArgs e)
        {
            //Aquí enviaremos los seleccionados 
            try
            {
                //contamos el numero de marcas seleccionadas
                int contador = 0;
                for (int z = 0; z < datagrid_renovacion_marcatardia_nuevaley.Rows.Count; z++)
                {
                    bool valor = (bool)datagrid_renovacion_marcatardia_nuevaley.Rows[z].Cells[1].Value;
                    if (valor)
                    {
                        contador++;
                    }
                }
                //hacemos una confimacion para saber si realmente quiere enviar al numero de marcas seleccionadas
                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + " correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;

                    //definimos la prueba como falso a menos de que tenga capturado el correo de prueba
                    Boolean bCorreodepeuba = false;
                    if (tbPruebamarcastardias_NL.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//bandera para no mandar copias de correo
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbPruebamarcastardias_NL.Text);
                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }

                    for (int y = 0; y < datagrid_renovacion_marcatardia_nuevaley.Rows.Count; y++)
                    {
                        bool valor = (bool)datagrid_renovacion_marcatardia_nuevaley.Rows[y].Cells[1].Value;
                        if (valor)
                        {
                            //obtenemos el objeto de marcasin novedad seleccionada del datagridview por medio de la busqueda de su casoid
                            String scasoid = datagrid_renovacion_marcatardia_nuevaley.Rows[y].Cells[0].Value.ToString();
                            objMP_seleccionada obj_RenovacionMarcaTardiaseleccionadaNL = renovacionmarcatardianuevaley.Find(x => x.sCasoId == scasoid);



                            //#CasoId 4
                            //#ContactoEmail 38
                            //#IdiomaClave 41
                            //#Subject 42
                            String sDays = "-10000";
                            String sTipoPlazoId = obj_RenovacionMarcaTardiaseleccionadaNL.stipoplazoid;
                            String sPlazoId = obj_RenovacionMarcaTardiaseleccionadaNL.sPlazoId;
                            String sEstatusPlazoId = obj_RenovacionMarcaTardiaseleccionadaNL.sEstatusPlazoId;
                            String sUID_Jobconfig = "";
                            String sCasoId = obj_RenovacionMarcaTardiaseleccionadaNL.sCasoId;
                            String sTiposolicitudid = obj_RenovacionMarcaTardiaseleccionadaNL.sTipoSolicitudId;
                            String sDocumentoid = obj_RenovacionMarcaTardiaseleccionadaNL.sDocumentoId;
                            String sCasoNumero = obj_RenovacionMarcaTardiaseleccionadaNL.sCasoNumero;
                            String sContactoEmail = obj_RenovacionMarcaTardiaseleccionadaNL.sContactoEmail;// "eramiref92@gmail.com";//´Para pruebas
                            String sIdiomaClave = obj_RenovacionMarcaTardiaseleccionadaNL.sIdiomaClave;
                            String sSubject = obj_RenovacionMarcaTardiaseleccionadaNL.sSubject;
                            int REC = 0;// Get_Rec(Convert.ToInt32(sPlazoId));
                            //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);
                            Action act = () =>
                            {
                                //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                                //por lo que generamos el siguiente query
                                conect_robot con = new conect_robot();
                                String datosconectjobconfig = con.getdatavalues();
                                //String sQuerygetUidjobconfig = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
                                //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
                                String sUID_JobConfig = "a8b24705-ceab-11e8-869b-000c291862e7";
                                String FunctionName = "Get_Email_RenovacionMarca_20_34_2";//"Get_Email_Marca_sinnovedad";
                                String sViewName = "warning_renovacionmarca_20_34_2";//"warning_marcassinovedades_erf";
                                //while (resps_UIDJobconfig.Read())
                                //{
                                //    sUID_JobConfig = validareader("UID_JobConfig", "UID_JobConfig", resps_UIDJobconfig);
                                //    FunctionName = validareader("FunctionName", "UID_JobConfig", resps_UIDJobconfig);
                                //    sViewName = validareader("ViewName", "UID_JobConfig", resps_UIDJobconfig);
                                //}
                                conect_robot valores = new conect_robot();
                                String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

                                //resps_UIDJobconfig.Close();
                                String sCorreodestino = "";

                                if (bCorreodepeuba)
                                {
                                    sCorreodestino = tbPruebamarcastardias_NL.Text;//Prueba de correo
                                }
                                else
                                {
                                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                                }
                                String[] correos = sCorreodestino.Split(',');
                                if (correos.Length > 1)
                                {
                                    sCorreodestino = correos[0];
                                    for (int z = 1; z < correos.Length; z++)
                                    {
                                        sGlobalSmtpCC += "," + correos[z];
                                    }

                                }
                                //String sAsunto = listView1.CheckedItems[x].SubItems[42].Text;
                                //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                                iContadorcorreossend += iresult;
                                //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
                                if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                                {
                                    int iCasoid = Int32.Parse(sCasoId);
                                    int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                                    int isDocumentoid;
                                    if (sDocumentoid == "")
                                    {
                                        isDocumentoid = 0;
                                    }
                                    else
                                    {
                                        isDocumentoid = Int32.Parse(sDocumentoid);
                                    }

                                    int iDays = Int32.Parse("-10000");
                                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                    int iPlazoId = Int32.Parse(sPlazoId);
                                    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                                }
                            };
                            using (Waitforsendmail obj = new Waitforsendmail(act))
                            {
                                obj.ShowDialog();
                            }
                            tbcorreoxenviadosmtardias_NL.Text = iContadorcorreossend + "";
                            tbMtardiasactualizados_NL.Text = iContadorcorreosupdates + "";
                        }
                    }

                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates);// + iContadorcorreosupdates + " Registros en la base de datos King");
                }

            }
            catch (Exception E)
            {
                //error al enviar correo
            }
        }

        private void button98_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_renovacion_marcatardia_nuevaley.Rows)
            {

                row.Cells["RMTardiaNL_seleccionar"].Value = true;

            }
        }

        private void button97_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_renovacion_marcatardia_nuevaley.Rows)
            {

                row.Cells["RMTardiaNL_seleccionar"].Value = false;

            }
        }

        private void button96_Click(object sender, EventArgs e)
        {
            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Plazoid";
                workSheet.Cells[3, "E"] = "Casoid";
                workSheet.Cells[3, "F"] = "Casonumero";
                workSheet.Cells[3, "G"] = "No.de Registro";
                workSheet.Cells[3, "H"] = "Marca";
                workSheet.Cells[3, "I"] = "tipoplazadescrip";
                workSheet.Cells[3, "J"] = "clienteNombre";
                workSheet.Cells[3, "K"] = "InteresadoNombre";
                workSheet.Cells[3, "L"] = "ContactoNombre";
                workSheet.Cells[3, "M"] = "ContactoEmail";
                workSheet.Cells[3, "N"] = "Subject";
                workSheet.Cells[3, "O"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "P"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "Q"] = "No.de Expediente";
                workSheet.Cells[3, "R"] = "Clase";
                workSheet.Cells[3, "S"] = "Referencia Cliente";
                workSheet.Cells[3, "T"] = "Fecha de Presentación";
                workSheet.Cells[3, "U"] = "Casofechavigencia";
                workSheet.Cells[3, "V"] = "CasoFechaInicio";
                workSheet.Cells[3, "W"] = "CasoFechaFin";
                workSheet.Cells[3, "X"] = "Pais Nombre";
                workSheet.Cells[3, "Y"] = "IdiomaClave";


                workSheet.Cells[1, "A"] = "Renovación de Marcas Tardías (Nueva Ley)";
                workSheet.Range["A1", "G1"].Merge();
                workSheet.Range["A1", "G1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "G1"].Font.Bold = true;
                workSheet.Range["A1", "G1"].Font.Size = 20;
                var row = 3;

                for (int i = 1; i < datagrid_renovacion_marcatardia_nuevaley.Rows.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[1].Value;
                    workSheet.Cells[i + 4, "B"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[2].Value;
                    workSheet.Cells[i + 4, "C"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[3].Value;
                    workSheet.Cells[i + 4, "D"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[4].Value;
                    workSheet.Cells[i + 4, "E"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[5].Value;
                    workSheet.Cells[i + 4, "F"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[6].Value;
                    workSheet.Cells[i + 4, "G"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[7].Value;
                    workSheet.Cells[i + 4, "H"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[8].Value;
                    workSheet.Cells[i + 4, "I"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[9].Value;
                    workSheet.Cells[i + 4, "J"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[10].Value;
                    workSheet.Cells[i + 4, "K"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[11].Value;
                    workSheet.Cells[i + 4, "L"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[12].Value;
                    workSheet.Cells[i + 4, "M"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[13].Value;
                    workSheet.Cells[i + 4, "N"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[14].Value;
                    workSheet.Cells[i + 4, "O"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[15].Value;
                    workSheet.Cells[i + 4, "P"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[16].Value;
                    workSheet.Cells[i + 4, "Q"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[17].Value;
                    workSheet.Cells[i + 4, "R"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[18].Value;
                    workSheet.Cells[i + 4, "S"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[19].Value;
                    workSheet.Cells[i + 4, "T"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[20].Value;
                    workSheet.Cells[i + 4, "U"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[21].Value;
                    workSheet.Cells[i + 4, "V"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[22].Value;
                    workSheet.Cells[i + 4, "W"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[23].Value;
                    workSheet.Cells[i + 4, "X"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[30].Value;
                    workSheet.Cells[i + 4, "Y"] = datagrid_renovacion_marcatardia_nuevaley.Rows[i].Cells[40].Value;

                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "Y" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
                workSheet.Range["A3", "Y" + (row + 4)].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                workSheet.Range["A3", "Y3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            }
            catch (Exception E)
            {
                Console.Write("Se canceló la exportación");
            }
        }

        private void button95_Click(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_renovacion_marcatardia_nuevaley.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                if (datagrid_renovacion_marcatardia_nuevaley.CurrentRow.Cells[2].Value.ToString() != "")

                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void button106_Click(object sender, EventArgs e)
        {
            String sAnorenovacion = cbAnorenovacion_NL.Text;
            if (sAnorenovacion != "")//no validamos la fecha a seleccionar
            {

                label77.Text = "Cargando registros ...";
                System.Threading.Thread.Sleep(1000);
                lvmarcasporano.Items.Clear();

                conect_robot con1 = new conect_robot();
                String sPlazoid = "";
                String sSend = "";
                String sSendnow = "";
                if (true)//no validamos la fecha a seleccionar
                {
                    tbMarcasrenovacionporano_NL.Text = "";
                    List<ListViewItem> myItems = new List<ListViewItem>();
                    int contador = 0;
                    String queryinsert = " use jobconfig; SELECT  " +
                                        " war.PlazoId, " +
                                        " war.CasoId, " +
                                        " war.DocumentoId, " +
                                        " war.TipoPlazoDescrip, " +
                                        " war.ClienteNombre, " +
                                        " war.InteresadoNombre, " +
                                        " war.TipoSolicitudDescrip, " +
                                        " war.SubTipoSolicitudDescripcion, " +
                                        " war.Marca, " +
                                        " war.CasoNumeroExpedienteLargo, " +
                                        " war.CasoNumero, " +
                                        " war.CasoProductosClase, " +
                                        " war.ReferenciaNombre, " +
                                        " DATE_FORMAT(war.CasoFechaVigencia,'%d-%m-%Y') as CasoFechaVigencia, " +
                                        " DATE_FORMAT(war.CasoFechaIni,'%d-%m-%Y') as CasoFechaIni, " +
                                        " DATE_FORMAT(war.CasoFechaFin,'%d-%m-%Y') as CasoFechaFin, " +
                                        " war.DocumentoFechaRecepcion, " +
                                        " war.DocumentoFechaRecepcion2meses, " +
                                        " war.DocumentoFechaRecepcion4meses, " +
                                        " war.anualidades, " +
                                        " war.PaisNombre, " +
                                        " DATE_FORMAT(war.CasoFechaRecepcion,'%d-%m-%Y') as CasoFechaRecepcion, " +
                                        " war.CasoFechaFilingCliente, " +
                                        " war.CasoNumConcedida, " +
                                        " war.DocumentoFecha, " +
                                        " war.DocumentoFechaVencimiento, " +
                                        " war.EstatusCasoId, " +
                                        " war.EstatusCasoDescrip, " +
                                        " war.tipoplazoid, " +
                                        " war.EstatusPlazoId, " +
                                        " war.EstatusPlazoDescrip, " +
                                        " war.PlazoFechaAtencion, " +
                                        " war.ContactoNombre, " +
                                        " war.ContactoEmail, " +
                                        " war.IdiomaOriginalID, " +
                                        " war.IdiomaId, " +
                                        " war.IdiomaClave, " +
                                        " war.Subject, " +
                                        " war.SendNow, " +
                                        " DATE_FORMAT(Get_Fechaultimo(war.CasoId, 'warning_renovacionmarca_20_34_2'),'%d-%m-%Y') AS `FechaSended`," +
                                        " Get_countenviados(war.CasoId, 'warning_renovacionmarca_20_34_2') AS `numenviados` " +
                                        " FROM " +
                                        "     jobconfig.warning_renovacionmarca_20_34_2 AS war " +
                                        " WHERE " +
                                        " YEAR((war.CasoFechaVigencia - INTERVAL 6 MONTH)) = '" + cbAnorenovacion_NL.Text + "' " +
                                        " group by CasoId  " +
                                        " ORDER BY CasoFechaVigencia DESC; ";
                    if (renovacionmarcaporanonuevaley != null)
                    {
                        renovacionmarcaporanonuevaley.Clear();
                    }
                    datagrid_renovacion_marca_porano_nuevaley.Rows.Clear();
                    Action act = () =>
                    {
                        MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);

                        while (respuestastringinsert.Read())
                        {
                            String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);

                            try
                            {
                                String sPlazoId = validareader("PlazoId", "PlazoId", respuestastringinsert);
                                String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                                String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);
                                

                                String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                                String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                                String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                                String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                                String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                                String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                                String sMarca = validareader("Marca", "Marca", respuestastringinsert);
                                String sInvento = validareader("Invento", "Invento", respuestastringinsert);
                                String sFechadiferencia = "";
                                String sFechaLimite = "";
                                String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                                String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                                String sCasoProductosClase = validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                                String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                                String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);

                                String sCasoFechaConcesion = validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);


                                String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                                String sCasoFechaInidos = validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                                String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                                String sDocumentoFechaRecepcion = validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                                String sDocumentoFechaRecepcion2meses = validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                                String sDocumentoFechaRecepcion4meses = validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                                String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                                String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                                String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                                String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                                String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                                String sDocumentoFecha = validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                                String sDocumentoFechaVencimiento = validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                                String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                                String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                                String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                                String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                                String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                                String sPlazoFechaAtencion = validareader("PlazoFechaAtencion", "PlazoFechaAtencion", respuestastringinsert);
                                String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                                String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                                String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                                String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                                String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                                String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                                String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                                String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                                String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);

                                int REC = 0;
                                String sUID_JobConfig = "a8b24705-ceab-11e8-869b-000c291862e7";
                                String FunctionName = "Get_Email_RenovacionMarca_20_34_2";
                                String sViewName = "warning_renovacionmarca_20_34_2";


                                DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                                DateTime dFechaLimite = validafechavacia(sFechaLimite);
                                DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                                DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                                DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                                DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                                DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                                DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                                DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                                DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);
                                DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                                DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                                DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                                DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                                DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                                DateTime dFechaSended = validafechavacia(sFechaSended);


                                objMP_seleccionada renovacion_marca_porano_nuevaley = new objMP_seleccionada(sPlazoId,
                                                                                                             sCasoId,
                                                                                                            sDocumentoId,
                                                                                                            sTipoPlazoDescrip,
                                                                                                            sClienteNombre,
                                                                                                            sInteresadoNombre,
                                                                                                            sTipoSolicitudDescrip,
                                                                                                            sSubTipoSolicitudDescripcion,
                                                                                                            sMarca,
                                                                                                            sInvento,
                                                                                                            sFechadiferencia,
                                                                                                            dFechaLimite,
                                                                                                            sCasoNumeroExpedienteLargo,
                                                                                                            sCasoNumero,
                                                                                                            sCasoProductosClase,
                                                                                                            sReferenciaNombre,
                                                                                                            dCasoFechaConcesion,
                                                                                                            dCasoFechaVigencia,
                                                                                                            dCasoFechaIni,
                                                                                                            dCasoFechaInidos,
                                                                                                            dCasoFechaFin,
                                                                                                            dDocumentoFechaRecepcion,
                                                                                                            dDocumentoFechaRecepcion2meses,
                                                                                                            dDocumentoFechaRecepcion4meses,
                                                                                                            sanualidades,
                                                                                                            sPaisNombre,
                                                                                                            dCasoFechaRecepcion,
                                                                                                            dCasoFechaFilingCliente,
                                                                                                            sCasoNumConcedida,
                                                                                                            dDocumentoFecha,
                                                                                                            dDocumentoFechaVencimiento,
                                                                                                            sEstatusCasoId,
                                                                                                            sEstatusCasoDescrip,
                                                                                                            stipoplazoid,
                                                                                                            sEstatusPlazoId,
                                                                                                            sEstatusPlazoDescrip,
                                                                                                            dPlazoFechaAtencion,
                                                                                                            sContactoNombre,
                                                                                                            sContactoEmail,
                                                                                                            sIdiomaOriginalID,
                                                                                                            sIdiomaId,
                                                                                                            sIdiomaClave,
                                                                                                            sSubject,
                                                                                                            sSendNow,
                                                                                                            dFechaSended,
                                                                                                            snumenviados,
                                                                                                            REC,
                                                                                                            tbCorreodepruebas.Text,
                                                                                                            sUID_JobConfig,
                                                                                                            FunctionName,
                                                                                                            sViewName,
                                                                                                            sTipoSolicitudId
                                                                                                            );
                                renovacionmarcaporanonuevaley.Add(renovacion_marca_porano_nuevaley);
                            }
                            catch (Exception Ex)
                            {
                                //MessageBox.Show("Mensaje "+Ex.Message);
                            }
                            contador++;
                        }
                        respuestastringinsert.Close();
                        con1.Cerrarconexion();
                    };
                    using (Waitforcases form = new Waitforcases(act))
                    {
                        form.ShowDialog();
                    }

                    foreach (var Obj_renovacion_marca_porano_nuevaley in renovacionmarcaporanonuevaley)
                    {
                        /*1*/
                        CheckBox checkboxcell = new CheckBox();

                        datagrid_renovacion_marca_porano_nuevaley.Rows.Add(Obj_renovacion_marca_porano_nuevaley.sCasoId, false,
            /*2*/        Obj_renovacion_marca_porano_nuevaley.sFechaSended,
            /*3*/        Obj_renovacion_marca_porano_nuevaley.snumenviados,
            /*4*/        Obj_renovacion_marca_porano_nuevaley.sPlazoId,
            /*5*/        Obj_renovacion_marca_porano_nuevaley.sCasoId,
            /*6*/        Obj_renovacion_marca_porano_nuevaley.sCasoNumero,
            /*7*/        Obj_renovacion_marca_porano_nuevaley.sCasoNumConcedida,//numero de registro
            /*8*/        Obj_renovacion_marca_porano_nuevaley.sMarca,
            /*9*/        Obj_renovacion_marca_porano_nuevaley.sTipoPlazoDescrip,
            /*10*/       Obj_renovacion_marca_porano_nuevaley.sClienteNombre,
            /*11*/       Obj_renovacion_marca_porano_nuevaley.sInteresadoNombre,
            /*12*/       Obj_renovacion_marca_porano_nuevaley.sContactoNombre,
            /*13*/       Obj_renovacion_marca_porano_nuevaley.sContactoEmail, //solicitante 
            /*14*/       Obj_renovacion_marca_porano_nuevaley.sSubject,
            /*15*/       Obj_renovacion_marca_porano_nuevaley.sTipoSolicitudDescrip,
            /*16*/       Obj_renovacion_marca_porano_nuevaley.sSubTipoSolicitudDescripcion,
            /*17*/       Obj_renovacion_marca_porano_nuevaley.sCasoNumeroExpedienteLargo,//No.expediente
            /*18*/       Obj_renovacion_marca_porano_nuevaley.sCasoProductosClase,//Clase
            /*19*/       Obj_renovacion_marca_porano_nuevaley.sReferenciaNombre,//referencia cliente 
            /*20*/       Obj_renovacion_marca_porano_nuevaley.sCasoFechaRecepcion, //fecha presentacion
            /*21*/       Obj_renovacion_marca_porano_nuevaley.sCasoFechaVigencia, //fecha vigencia
            /*22*/       Obj_renovacion_marca_porano_nuevaley.sCasoFechaIni, //caso fecha inicio
            /*23*/       Obj_renovacion_marca_porano_nuevaley.sCasoFechaFin, //caso fecha fin 
            /*24*/       "",
            /*25*/       "",
            /*26*/       Obj_renovacion_marca_porano_nuevaley.sDocumentoFechaRecepcion,
            /*27*/       Obj_renovacion_marca_porano_nuevaley.sDocumentoFechaRecepcion2meses,
            /*28*/       Obj_renovacion_marca_porano_nuevaley.sDocumentoFechaRecepcion4meses,
            /*29*/       Obj_renovacion_marca_porano_nuevaley.sanualidades,
            /*30*/       Obj_renovacion_marca_porano_nuevaley.sPaisNombre,
            /*31*/       Obj_renovacion_marca_porano_nuevaley.sCasoFechaFilingCliente,
            /*32*/       Obj_renovacion_marca_porano_nuevaley.sDocumentoFecha,
            /*33*/       Obj_renovacion_marca_porano_nuevaley.sDocumentoFechaVencimiento,
            /*34*/       Obj_renovacion_marca_porano_nuevaley.sEstatusCasoId,
            /*35*/       Obj_renovacion_marca_porano_nuevaley.stipoplazoid,
            /*36*/       Obj_renovacion_marca_porano_nuevaley.sEstatusPlazoId,
            /*37*/       Obj_renovacion_marca_porano_nuevaley.sPlazoFechaAtencion,
            /*38*/       Obj_renovacion_marca_porano_nuevaley.sIdiomaOriginalID,
            /*39*/       Obj_renovacion_marca_porano_nuevaley.sIdiomaId,
            /*40*/       Obj_renovacion_marca_porano_nuevaley.sIdiomaClave,
            /*41*/       Obj_renovacion_marca_porano_nuevaley.sEstatusCasoDescrip,
            /*42*/       Obj_renovacion_marca_porano_nuevaley.sEstatusPlazoDescrip);
                    }
                    AdjustColumnOrder_RMPorAnoNL();
                    tbMarcasrenovacionporano_NL.Text = contador + "";
                    label77.Text = "";
                    //tbMporanoactualizados.Text = "0";
                    //tbMporanoenviados.Text = "0";
                }
                else
                {
                    label77.Text = "";
                }

            }
            else
            {
                MessageBox.Show("Debe seleccionar un año.");
                label77.Text = "";
            }
        }


        private void AdjustColumnOrder_RMPorAnoNL()
        {
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_casoid"].DisplayIndex = 0;// RMAnoVL_casoid
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_seleccionar"].DisplayIndex = 1;// RMAnoVL_seleccionar
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_Ultimi_correo"].DisplayIndex = 2;// RMAnoVL_Ultimi_correo
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_Correos_enviados"].DisplayIndex = 3;// RMAnoVL_Correos_enviados
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_plazoid"].DisplayIndex = 4;// RMAnoVL_plazoid
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_casoid_view"].DisplayIndex = 5;// RMAnoVL_casoid_view
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_casonumero"].DisplayIndex = 6;// RMAnoVL_casonumero
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_Numero_registro"].DisplayIndex = 7;// RMAnoVL_Numero_registro antes: caso numero concedida
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_marca"].DisplayIndex = 8;// RMAnoVL_marca
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_tipoplazodescrip"].DisplayIndex = 9;// RMAnoVL_tiposoldescrip
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_clientenombre"].DisplayIndex = 10;// RMAnoVL_clientenombre
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_solicitante"].DisplayIndex = 11;// RMAnoVL_solicitante
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_contactonombre"].DisplayIndex = 12;// RMAnoVL_contactonombre
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_contactomail"].DisplayIndex = 13;// RMAnoVL_contactomail
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_subject"].DisplayIndex = 14;// RMAnoVL_subject
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_tiposoldescrip"].DisplayIndex = 15;// RMAnoVL_tiposoldescrip
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_subtiposoldesc"].DisplayIndex = 16;// RMAnoVL_subtiposoldesc
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_nexp"].DisplayIndex = 17;// RMAnoVL_nexp
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_clase"].DisplayIndex = 18;// RMAnoVL_clase
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_Referencia_nombre"].DisplayIndex = 19;// RMAnoVL_Referencia_nombre
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_fechapresentacion"].DisplayIndex = 20;// RMAnoVL_fechapresentacion
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_fechavigencia"].DisplayIndex = 21;// RMAnoVL_fechavigencia
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_fecha_inicio"].DisplayIndex = 22;// RMAnoVL_fecha_inicio
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_fecha_fin"].DisplayIndex = 23;// RMAnoVL_fecha_fin
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_dias_proximo_mail"].DisplayIndex = 24;// RMAnoVL_dias_proximo_mail
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_fecha_proximo_mail"].DisplayIndex = 25;// RMAnoVL_fecha_proximo_mail
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_documento_fecha_recepcion"].DisplayIndex = 26;// RMAnoVL_documento_fecha_recepcion
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_documento_fecha_recepcion_2"].DisplayIndex = 27;// RMAnoVL_documento_fecha_recepcion_2
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_documento_fecha_recepcion_4"].DisplayIndex = 28;// RMAnoVL_documento_fecha_recepcion_4
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_anualidades"].DisplayIndex = 29;// RMAnoVL_anualidades
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_paisnombre"].DisplayIndex = 30;// RMAnoVL_paisnombre
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_fecha_filing_cliente"].DisplayIndex = 31;// RMAnoVL_fecha_filing_cliente
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_documento_fecha"].DisplayIndex = 32;// RMAnoVL_documento_fecha
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_documento_fecha_vencimiento"].DisplayIndex = 33;// RMAnoVL_documento_fecha_vencimiento
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_estatus_caso"].DisplayIndex = 34;// RMAnoVL_estatus_caso
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_tipo_plazo_id"].DisplayIndex = 35;// RMAnoVL_tipo_plazo_id
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_estatus_plazo_id"].DisplayIndex = 36;// RMAnoVL_estatus_plazo_id
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_plazo_fecha_atencion"].DisplayIndex = 37;// RMAnoVL_plazo_fecha_atencion
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_idioma_original_id"].DisplayIndex = 38;// RMAnoVL_idioma_original_id
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_idioma_id"].DisplayIndex = 39;// RMAnoVL_idioma_id
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_indiomaclave"].DisplayIndex = 40;// RMAnoVL_indiomaclave
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_estatuscasodescr"].DisplayIndex = 41;// RMAnoVL_estatuscasodescr
            datagrid_renovacion_marca_porano_nuevaley.Columns["RMAnoNL_estatusplazodescr"].DisplayIndex = 42;// RMAnoVL_estatusplazodescr
        }

        private void button105_Click(object sender, EventArgs e)
        {
            try
            {

                //contamos el numero de marcas seleccionadas
                int contador = 0;
                for (int z = 0; z < datagrid_renovacion_marca_porano_nuevaley.Rows.Count; z++)
                {
                    bool valor = (bool)datagrid_renovacion_marca_porano_nuevaley.Rows[z].Cells[1].Value;
                    if (valor)
                    {
                        contador++;
                    }
                }
                //hacemos una confimacion para saber si realmente quiere enviar al numero de marcas seleccionadas
                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + " correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;

                    //definimos la prueba como falso a menos de que tenga capturado el correo de prueba
                    Boolean bCorreodepeuba = false;
                    if (tbPruebaMailMarcasporano_NL.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//bandera para no mandar copias de correo
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbPruebaMailMarcasporano_NL.Text);
                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }

                    for (int y = 0; y < datagrid_renovacion_marca_porano_nuevaley.Rows.Count; y++)
                    {
                        bool valor = (bool)datagrid_renovacion_marca_porano_nuevaley.Rows[y].Cells[1].Value;
                        if (valor)
                        {
                            //obtenemos el objeto de marcasin novedad seleccionada del datagridview por medio de la busqueda de su casoid
                            String scasoid = datagrid_renovacion_marca_porano_nuevaley.Rows[y].Cells[0].Value.ToString();
                            objMP_seleccionada Obj_renovacionmarcaporanonuevaley = renovacionmarcaporanonuevaley.Find(x => x.sCasoId == scasoid);



                            //#CasoId 4
                            //#ContactoEmail 38
                            //#IdiomaClave 41
                            //#Subject 42
                            String sDays = "-10000";
                            String sTipoPlazoId = Obj_renovacionmarcaporanonuevaley.stipoplazoid;
                            String sPlazoId = Obj_renovacionmarcaporanonuevaley.sPlazoId;
                            String sEstatusPlazoId = Obj_renovacionmarcaporanonuevaley.sEstatusPlazoId;
                            String sUID_Jobconfig = "";
                            String sCasoId = Obj_renovacionmarcaporanonuevaley.sCasoId;
                            String sTiposolicitudid = Obj_renovacionmarcaporanonuevaley.sTipoSolicitudId;
                            String sDocumentoid = Obj_renovacionmarcaporanonuevaley.sDocumentoId;
                            String sCasoNumero = Obj_renovacionmarcaporanonuevaley.sCasoNumero;
                            String sContactoEmail = Obj_renovacionmarcaporanonuevaley.sContactoEmail;// "eramiref92@gmail.com";//´Para pruebas
                            String sIdiomaClave = Obj_renovacionmarcaporanonuevaley.sIdiomaClave;
                            String sSubject = Obj_renovacionmarcaporanonuevaley.sSubject;
                            int REC = 0;// Get_Rec(Convert.ToInt32(sPlazoId));
                            //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);
                            Action act = () =>
                            {
                                //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                                //por lo que generamos el siguiente query
                                conect_robot con = new conect_robot();
                                String datosconectjobconfig = con.getdatavalues();

                                String sUID_JobConfig = "a8b24705-ceab-11e8-869b-000c291862e7";
                                String FunctionName = "Get_Email_RenovacionMarca_20_34_2"; ;
                                String sViewName = "warning_renovacionmarca_20_34_2";

                                conect_robot valores = new conect_robot();
                                String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

                                //resps_UIDJobconfig.Close();
                                String sCorreodestino = "";

                                if (bCorreodepeuba)
                                {
                                    sCorreodestino = tbPruebaMailMarcasporano_NL.Text;//Prueba de correo
                                }
                                else
                                {
                                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                                }
                                String[] correos = sCorreodestino.Split(',');
                                if (correos.Length > 1)
                                {
                                    sCorreodestino = correos[0];
                                    for (int z = 1; z < correos.Length; z++)
                                    {
                                        sGlobalSmtpCC += "," + correos[z];
                                    }

                                }

                                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                                iContadorcorreossend += iresult;
                                //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
                                if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                                {
                                    int iCasoid = Int32.Parse(sCasoId);
                                    int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                                    int isDocumentoid;
                                    if (sDocumentoid == "")
                                    {
                                        isDocumentoid = 0;
                                    }
                                    else
                                    {
                                        isDocumentoid = Int32.Parse(sDocumentoid);
                                    }

                                    int iDays = Int32.Parse("-10000");
                                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                    int iPlazoId = Int32.Parse(sPlazoId);
                                    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                                }
                            };
                            using (Waitforsendmail obj = new Waitforsendmail(act))
                            {
                                obj.ShowDialog();
                            }
                            tbMporanoenviados_NL.Text = iContadorcorreossend + "";
                            tbMporanoactualizados_NL.Text = iContadorcorreosupdates + "";
                        }
                    }

                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates);// + iContadorcorreosupdates + " Registros en la base de datos King");
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void button104_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_renovacion_marca_porano_nuevaley.Rows)
            {

                row.Cells["RMAnoNL_seleccionar"].Value = true;

            }
        }

        private void button103_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_renovacion_marca_porano_nuevaley.Rows)
            {

                row.Cells["RMAnoNL_seleccionar"].Value = false;

            }
        }

        private void button112_Click(object sender, EventArgs e)
        {
            labelAccionOficialMarcas.Text = "Cargando registros ...";
            System.Threading.Thread.Sleep(1000);
            conect_robot con1 = new conect_robot();
            String sPlazoid = "";
            String sSend = "";
            String sSendnow = "";
            if (true)
            {
                tbaccionoficialMarcas.Text = "";
                List<ListViewItem> myItems = new List<ListViewItem>();
                int contador = 0;
                String queryinsert = "use jobconfig; SELECT  " +
                                            " war.PlazoId, " +
                                            " war.CasoId, " +
                                            " war.TipoSolicitudId, " +
                                            " war.DocumentoId, " +
                                            " war.TipoPlazoDescrip, " +
                                            " war.ClienteNombre, " +
                                            " war.InteresadoNombre, " +
                                            " war.TipoSolicitudDescrip, " +
                                            " war.SubTipoSolicitudDescripcion, " +
                                            " war.CasoNumeroExpedienteLargo, " +
                                            " war.CasoNumero, " +
                                            " war.Invento, " +
                                            " war.ReferenciaNombre, " +
                                            " war.Meses_transcurridos, " +
                                            " war.CasoFechaVigencia, " +
                                            " war.PaisNombre, " +
                                            " DATE_FORMAT(war.CasoFechaRecepcion,'%d-%m-%Y') as CasoFechaRecepcion, " +
                                            " war.CasoFechaFilingCliente, " +
                                            " war.CasoNumConcedida, " +
                                            " DATE_FORMAT(war.DocumentoFecha,'%d-%m-%Y') as DocumentoFecha, " +
                                            " DATE_FORMAT(war.DocumentoFechaVencimiento,'%d-%m-%Y') as DocumentoFechaVencimiento, " +
                                            " war.EstatusCasoId, " +
                                            " war.EstatusCasoDescrip, " +
                                            " war.tipoplazoid, " +
                                            " war.EstatusPlazoId, " +
                                            " war.EstatusPlazoDescrip, " +
                                            " war.PlazoFechaAtencion, " +
                                            " war.ContactoNombre, " +
                                            " war.ContactoEmail, " +
                                            " war.IdiomaOriginalID, " +
                                            " war.IdiomaId, " +
                                            " war.IdiomaClave, " +
                                            " war.Subject, " +
                                            //" war.SendNow, " +
                                            " war.DocumentoFechaRecepcion2meses," +
                                            " war.DocumentoFechaRecepcion, " +
                                            " war.DocumentoFechaRecepcion4meses, " +
                                            " war.CasoFechaIni as CasoFechaIni, " +
                                            " war.CasoFechaFin as CasoFechaFin, " +
                                            " war.FechaSended AS `FechaSended`, " +
                                            " war.numenviados AS `numenviados` " +
                                              " FROM " +
                                              "     jobconfig.warning_accionoficial_135_22_2_marcas_erf_2022 as war";// +
                if (accionoficialmarcas != null)
                {
                    accionoficialmarcas.Clear();
                }

                datagrid_accionoficial_marcas.Rows.Clear();
                Action act = () =>
                {
                    MySqlDataReader respuestastringinsert = con1.getdatareader(queryinsert);

                    while (respuestastringinsert.Read())
                    {
                        String sCasoid = validareader("CasoId", "CasoId", respuestastringinsert);

                        try
                        {
                            String sPlazoId = validareader("PlazoId", "PlazoId", respuestastringinsert);
                            String sCasoId = validareader("CasoId", "CasoId", respuestastringinsert);
                            String sTipoSolicitudId = validareader("TipoSolicitudId", "TipoSolicitudId", respuestastringinsert);
                            String sDocumentoId = validareader("DocumentoId", "DocumentoId", respuestastringinsert);
                            String sTipoPlazoDescrip = validareader("TipoPlazoDescrip", "TipoPlazoDescrip", respuestastringinsert);
                            String sClienteNombre = validareader("ClienteNombre", "ClienteNombre", respuestastringinsert);
                            String sInteresadoNombre = validareader("InteresadoNombre", "InteresadoNombre", respuestastringinsert);
                            String sTipoSolicitudDescrip = validareader("TipoSolicitudDescrip", "TipoSolicitudDescrip", respuestastringinsert);
                            String sSubTipoSolicitudDescripcion = validareader("SubTipoSolicitudDescripcion", "SubTipoSolicitudDescripcion", respuestastringinsert);
                            String sMarca = "";
                            String sInvento = validareader("Invento", "Invento", respuestastringinsert);
                            String sFechadiferencia = validareader("Meses_transcurridos", "Meses_transcurridos", respuestastringinsert);
                            String sFechaLimite = "";
                            String sCasoNumeroExpedienteLargo = validareader("CasoNumeroExpedienteLargo", "CasoNumeroExpedienteLargo", respuestastringinsert);
                            String sCasoNumero = validareader("CasoNumero", "CasoNumero", respuestastringinsert);
                            String sCasoProductosClase = validareader("CasoProductosClase", "CasoProductosClase", respuestastringinsert);
                            String sReferenciaNombre = validareader("ReferenciaNombre", "ReferenciaNombre", respuestastringinsert);
                            String sCasoFechaVigencia = validareader("CasoFechaVigencia", "CasoFechaVigencia", respuestastringinsert);

                            String sCasoFechaConcesion = validareader("CasoFechaConcesion", "CasoFechaConcesion", respuestastringinsert);
                            
                            String sCasoFechaIni = validareader("CasoFechaIni", "CasoFechaIni", respuestastringinsert);
                            String sCasoFechaInidos = validareader("CasoFechaInidos", "CasoFechaInidos", respuestastringinsert);
                            String sCasoFechaFin = validareader("CasoFechaFin", "CasoFechaFin", respuestastringinsert);
                            String sDocumentoFechaRecepcion = validareader("DocumentoFechaRecepcion", "DocumentoFechaRecepcion", respuestastringinsert);
                            String sDocumentoFechaRecepcion2meses = validareader("DocumentoFechaRecepcion2meses", "DocumentoFechaRecepcion2meses", respuestastringinsert);
                            String sDocumentoFechaRecepcion4meses = validareader("DocumentoFechaRecepcion4meses", "DocumentoFechaRecepcion4meses", respuestastringinsert);
                            String sanualidades = validareader("anualidades", "anualidades", respuestastringinsert);
                            String sPaisNombre = validareader("PaisNombre", "PaisNombre", respuestastringinsert);
                            String sCasoFechaRecepcion = validareader("CasoFechaRecepcion", "CasoFechaRecepcion", respuestastringinsert);
                            String sCasoFechaFilingCliente = validareader("CasoFechaFilingCliente", "CasoFechaFilingCliente", respuestastringinsert);
                            String sCasoNumConcedida = validareader("CasoNumConcedida", "CasoNumConcedida", respuestastringinsert);
                            String sDocumentoFecha = validareader("DocumentoFecha", "DocumentoFecha", respuestastringinsert);
                            String sDocumentoFechaVencimiento = validareader("DocumentoFechaVencimiento", "DocumentoFechaVencimiento", respuestastringinsert);
                            String sEstatusCasoId = validareader("EstatusCasoId", "EstatusCasoId", respuestastringinsert);
                            String sEstatusCasoDescrip = validareader("EstatusCasoDescrip", "EstatusCasoDescrip", respuestastringinsert);
                            String stipoplazoid = validareader("tipoplazoid", "tipoplazoid", respuestastringinsert);
                            String sEstatusPlazoId = validareader("EstatusPlazoId", "EstatusPlazoId", respuestastringinsert);
                            String sEstatusPlazoDescrip = validareader("EstatusPlazoDescrip", "EstatusPlazoDescrip", respuestastringinsert);
                            String sPlazoFechaAtencion = validareader("PlazoFechaAtencion", "PlazoFechaAtencion", respuestastringinsert);
                            String sContactoNombre = validareader("ContactoNombre", "ContactoNombre", respuestastringinsert);
                            String sContactoEmail = validareader("ContactoEmail", "ContactoEmail", respuestastringinsert);
                            String sIdiomaOriginalID = validareader("IdiomaOriginalID", "IdiomaOriginalID", respuestastringinsert);
                            String sIdiomaId = validareader("IdiomaId", "IdiomaId", respuestastringinsert);
                            String sIdiomaClave = validareader("IdiomaClave", "IdiomaClave", respuestastringinsert);
                            String sSubject = validareader("Subject", "Subject", respuestastringinsert);
                            String sSendNow = validareader("SendNow", "SendNow", respuestastringinsert);
                            String sFechaSended = validareader("FechaSended", "FechaSended", respuestastringinsert);
                            String snumenviados = validareader("numenviados", "numenviados", respuestastringinsert);

                            int REC = 0;
                            String sUID_JobConfig = "a5fab1ca-cea9-11e8-869b-000c291862e7";
                            String FunctionName = "Get_Email_AccionOficial_135_22_2";
                            String sViewName = "Warning_accionoficial_135_22_2";

                            //correo de prueba
                            //sContactoEmail = "eduarximo@gmail.com; eduardor@dicss.com.mx";


                            DateTime dFechadiferencia = validafechavacia(sFechadiferencia);
                            DateTime dFechaLimite = validafechavacia(sFechaLimite);
                            DateTime dCasoFechaConcesion = validafechavacia(sCasoFechaConcesion);
                            DateTime dCasoFechaVigencia = validafechavacia(sCasoFechaVigencia);
                            DateTime dCasoFechaIni = validafechavacia(sCasoFechaIni);
                            DateTime dCasoFechaInidos = validafechavacia(sCasoFechaInidos);
                            DateTime dCasoFechaFin = validafechavacia(sCasoFechaFin);
                            DateTime dDocumentoFechaRecepcion = validafechavacia(sDocumentoFechaRecepcion);
                            DateTime dDocumentoFechaRecepcion2meses = validafechavacia(sDocumentoFechaRecepcion2meses);
                            DateTime dDocumentoFechaRecepcion4meses = validafechavacia(sDocumentoFechaRecepcion4meses);
                            DateTime dCasoFechaRecepcion = validafechavacia(sCasoFechaRecepcion);
                            DateTime dCasoFechaFilingCliente = validafechavacia(sCasoFechaFilingCliente);
                            DateTime dDocumentoFecha = validafechavacia(sDocumentoFecha);
                            DateTime dDocumentoFechaVencimiento = validafechavacia(sDocumentoFechaVencimiento);
                            DateTime dPlazoFechaAtencion = validafechavacia(sPlazoFechaAtencion);
                            DateTime dFechaSended = validafechavacia(sFechaSended);

                            objMP_seleccionada accionoficial_marcas = new objMP_seleccionada(sPlazoId,
                                                                                             sCasoId,
                                                                                            sDocumentoId,
                                                                                            sTipoPlazoDescrip,
                                                                                            sClienteNombre,
                                                                                            sInteresadoNombre,
                                                                                            sTipoSolicitudDescrip,
                                                                                            sSubTipoSolicitudDescripcion,
                                                                                            sMarca,
                                                                                            sInvento,
                                                                                            sFechadiferencia,
                                                                                            dFechaLimite,
                                                                                            sCasoNumeroExpedienteLargo,
                                                                                            sCasoNumero,
                                                                                            sCasoProductosClase,
                                                                                            sReferenciaNombre,
                                                                                            dCasoFechaConcesion,
                                                                                            dCasoFechaVigencia,
                                                                                            dCasoFechaIni,
                                                                                            dCasoFechaInidos,
                                                                                            dCasoFechaFin,
                                                                                            dDocumentoFechaRecepcion,
                                                                                            dDocumentoFechaRecepcion2meses,
                                                                                            dDocumentoFechaRecepcion4meses,
                                                                                            sanualidades,
                                                                                            sPaisNombre,
                                                                                            dCasoFechaRecepcion,
                                                                                            dCasoFechaFilingCliente,
                                                                                            sCasoNumConcedida,
                                                                                            dDocumentoFecha,
                                                                                            dDocumentoFechaVencimiento,
                                                                                            sEstatusCasoId,
                                                                                            sEstatusCasoDescrip,
                                                                                            stipoplazoid,
                                                                                            sEstatusPlazoId,
                                                                                            sEstatusPlazoDescrip,
                                                                                            dPlazoFechaAtencion,
                                                                                            sContactoNombre,
                                                                                            sContactoEmail,
                                                                                            sIdiomaOriginalID,
                                                                                            sIdiomaId,
                                                                                            sIdiomaClave,
                                                                                            sSubject,
                                                                                            sSendNow,
                                                                                            dFechaSended,
                                                                                            snumenviados,
                                                                                            REC,
                                                                                            tbCorreodepruebas.Text,
                                                                                            sUID_JobConfig,
                                                                                            FunctionName,
                                                                                            sViewName,
                                                                                            sTipoSolicitudId
                                                                                            );
                            accionoficialmarcas.Add(accionoficial_marcas);

                        }
                        catch (Exception Ex)
                        {

                        }
                        contador++;
                    }
                    respuestastringinsert.Close();
                    con1.Cerrarconexion();
                };
                using (Waitforcases form = new Waitforcases(act))
                {
                    form.ShowDialog();
                }
                foreach (var Obj_accionoficial_marcas in accionoficialmarcas)
                {
                    /*1*/
                    CheckBox checkboxcell = new CheckBox();
                    datagrid_accionoficial_marcas.Rows.Add(Obj_accionoficial_marcas.sCasoId, false,
                   /*2*/        Obj_accionoficial_marcas.sFechaSended,
                   /*3*/        Obj_accionoficial_marcas.snumenviados,
                   /*4*/        Obj_accionoficial_marcas.sPlazoId,
                   /*5*/        Obj_accionoficial_marcas.sCasoId,
                   /*6*/        Obj_accionoficial_marcas.sCasoNumero,
                   /*7*/        Obj_accionoficial_marcas.sDocumentoId,
                   /*8*/        Obj_accionoficial_marcas.sInvento,
                   /*9*/        Obj_accionoficial_marcas.sEstatusCasoDescrip,
                   /*10*/        Obj_accionoficial_marcas.sTipoPlazoDescrip,
                   /*11*/       Obj_accionoficial_marcas.sClienteNombre,
                   /*12*/       Obj_accionoficial_marcas.sInteresadoNombre,
                   /*13*/       Obj_accionoficial_marcas.sContactoNombre,
                   /*14*/       Obj_accionoficial_marcas.sContactoEmail, //solicitante 
                   /*15*/       Obj_accionoficial_marcas.sSubject,
                   /*16*/       Obj_accionoficial_marcas.sTipoSolicitudDescrip,
                   /*17*/       Obj_accionoficial_marcas.sSubTipoSolicitudDescripcion,
                   /*18*/       Obj_accionoficial_marcas.sCasoNumeroExpedienteLargo,//No.expediente
                   /*19*/       Obj_accionoficial_marcas.sCasoProductosClase,//Clase
                   /*20*/       Obj_accionoficial_marcas.sReferenciaNombre,//referencia cliente 
                   /*21*/       Obj_accionoficial_marcas.sCasoFechaRecepcion, //fecha presentacion
                   /*22*/       Obj_accionoficial_marcas.sCasoFechaVigencia, //fecha vigencia
                   /*23*/       Obj_accionoficial_marcas.sCasoFechaIni, //caso fecha inicio
                   /*24*/       Obj_accionoficial_marcas.sCasoFechaFin, //caso fecha fin 
                   /*25*/       "",
                   /*26*/       "",
                   /*27*/       Obj_accionoficial_marcas.sDocumentoFechaRecepcion,
                   /*28*/       Obj_accionoficial_marcas.sDocumentoFechaRecepcion2meses,
                   /*29*/       Obj_accionoficial_marcas.sDocumentoFechaRecepcion4meses,
                   /*30*/       Obj_accionoficial_marcas.sanualidades,
                   /*31*/       Obj_accionoficial_marcas.sCasoFechaFilingCliente,
                   /*32*/       Obj_accionoficial_marcas.sDocumentoFecha,
                                Obj_accionoficial_marcas.sFechadiferencia,
                   /*33*/       Obj_accionoficial_marcas.sDocumentoFechaVencimiento,
                   /*34*/       Obj_accionoficial_marcas.sPaisNombre,
                   /*35*/       Obj_accionoficial_marcas.sEstatusCasoId,
                   /*36*/       Obj_accionoficial_marcas.stipoplazoid,
                   /*37*/       Obj_accionoficial_marcas.sEstatusPlazoId,
                   /*38*/       Obj_accionoficial_marcas.sPlazoFechaAtencion,
                   /*39*/       Obj_accionoficial_marcas.sIdiomaOriginalID,
                   /*40*/       Obj_accionoficial_marcas.sIdiomaId,
                   /*41*/       Obj_accionoficial_marcas.sIdiomaClave,
                   /*42*/       Obj_accionoficial_marcas.sEstatusPlazoDescrip,
                   /*43*/       Obj_accionoficial_marcas.sTipoSolicitudId);
                }
                lipiafechas(datagrid_accionoficial_marcas);
                AdjustColumnOrder_AOM();
                tbaccionoficialMarcas.Text = contador + "";
                labelAccionOficialMarcas.Text = "";
            }
            else
            {
                labelAccionOficialMarcas.Text = "";
            }/*warning_accionoficial_135_22_2_marcas*/
        }


        private void AdjustColumnOrder_AOM()
        {
            datagrid_accionoficial_marcas.Columns["AOM_casoid"].DisplayIndex = 0;// RMAnoVL_casoid
            datagrid_accionoficial_marcas.Columns["AOM_seleccionar"].DisplayIndex = 1;// RMAnoVL_seleccionar
            datagrid_accionoficial_marcas.Columns["AOM_Ultimi_correo"].DisplayIndex = 2;// RMAnoVL_Ultimi_correo
            datagrid_accionoficial_marcas.Columns["AOM_Correos_enviados"].DisplayIndex = 3;// RMAnoVL_Correos_enviados
            datagrid_accionoficial_marcas.Columns["AOM_plazoid"].DisplayIndex = 4;// RMAnoVL_plazoid
            datagrid_accionoficial_marcas.Columns["AOM_casoid_view"].DisplayIndex = 5;// RMAnoVL_casoid_view
            datagrid_accionoficial_marcas.Columns["AOM_casonumero"].DisplayIndex = 6;// RMAnoVL_casonumero
            datagrid_accionoficial_marcas.Columns["AOM_DocumentoId"].DisplayIndex = 7;// RMAnoVL_Numero_registro antes: caso numero concedida
            datagrid_accionoficial_marcas.Columns["AOM_invento"].DisplayIndex = 8;// RMAnoVL_marca
            datagrid_accionoficial_marcas.Columns["AOM_estatuscasodescr"].DisplayIndex = 9;// RMAnoVL_estatuscasodescr
            datagrid_accionoficial_marcas.Columns["AOM_tipoplazodescrip"].DisplayIndex = 10;// RMAnoVL_tiposoldescrip
            datagrid_accionoficial_marcas.Columns["AOM_clientenombre"].DisplayIndex = 11;// RMAnoVL_clientenombre
            datagrid_accionoficial_marcas.Columns["AOM_solicitante"].DisplayIndex = 12;// RMAnoVL_solicitante
            datagrid_accionoficial_marcas.Columns["AOM_contactonombre"].DisplayIndex = 13;// RMAnoVL_contactonombre
            datagrid_accionoficial_marcas.Columns["AOM_contactomail"].DisplayIndex = 14;// RMAnoVL_contactomail
            datagrid_accionoficial_marcas.Columns["AOM_subject"].DisplayIndex = 15;// RMAnoVL_subject
            datagrid_accionoficial_marcas.Columns["AOM_tiposoldescrip"].DisplayIndex = 16;// RMAnoVL_tiposoldescrip
            datagrid_accionoficial_marcas.Columns["AOM_subtiposoldesc"].DisplayIndex = 17;// RMAnoVL_subtiposoldesc
            datagrid_accionoficial_marcas.Columns["AOM_nexp"].DisplayIndex = 18;// RMAnoVL_nexp
            datagrid_accionoficial_marcas.Columns["AOM_clase"].DisplayIndex = 19;// RMAnoVL_clase
            datagrid_accionoficial_marcas.Columns["AOM_Referencia_nombre"].DisplayIndex = 20;// RMAnoVL_Referencia_nombre
            datagrid_accionoficial_marcas.Columns["AOM_fechapresentacion"].DisplayIndex = 21;// RMAnoVL_fechapresentacion
            datagrid_accionoficial_marcas.Columns["AOM_fechavigencia"].DisplayIndex = 22;// RMAnoVL_fechavigencia
            datagrid_accionoficial_marcas.Columns["AOM_fecha_inicio"].DisplayIndex = 23;// RMAnoVL_fecha_inicio
            datagrid_accionoficial_marcas.Columns["AOM_fecha_fin"].DisplayIndex = 24;// RMAnoVL_fecha_fin
            datagrid_accionoficial_marcas.Columns["AOM_dias_proximo_mail"].DisplayIndex = 25;// RMAnoVL_dias_proximo_mail
            datagrid_accionoficial_marcas.Columns["AOM_fecha_proximo_mail"].DisplayIndex = 26;// RMAnoVL_fecha_proximo_mail
            datagrid_accionoficial_marcas.Columns["AOM_documento_fecha_recepcion"].DisplayIndex = 27;// RMAnoVL_documento_fecha_recepcion
            datagrid_accionoficial_marcas.Columns["AOM_documento_fecha_recepcion_2"].DisplayIndex = 28;// RMAnoVL_documento_fecha_recepcion_2
            datagrid_accionoficial_marcas.Columns["AOM_documento_fecha_recepcion_4"].DisplayIndex = 29;// RMAnoVL_documento_fecha_recepcion_4
            datagrid_accionoficial_marcas.Columns["AOM_anualidades"].DisplayIndex = 30;// RMAnoVL_anualidades
            datagrid_accionoficial_marcas.Columns["AOM_fecha_filing_cliente"].DisplayIndex = 31;// RMAnoVL_fecha_filing_cliente
            datagrid_accionoficial_marcas.Columns["AOM_documento_fecha"].DisplayIndex = 32;// RMAnoVL_documento_fecha
            datagrid_accionoficial_marcas.Columns["AOM_fechadiferencia"].DisplayIndex = 33;// RMAnoVL_documento_fecha
            datagrid_accionoficial_marcas.Columns["AOM_documento_fecha_vencimiento"].DisplayIndex = 34;// RMAnoVL_documento_fecha_vencimiento
            datagrid_accionoficial_marcas.Columns["AOM_paisnombre"].DisplayIndex = 35;// RMAnoVL_paisnombre
            datagrid_accionoficial_marcas.Columns["AOM_estatus_caso"].DisplayIndex = 36;// RMAnoVL_estatus_caso
            datagrid_accionoficial_marcas.Columns["AOM_tipo_plazo_id"].DisplayIndex = 37;// RMAnoVL_tipo_plazo_id
            datagrid_accionoficial_marcas.Columns["AOM_estatus_plazo_id"].DisplayIndex = 38;// RMAnoVL_estatus_plazo_id
            datagrid_accionoficial_marcas.Columns["AOM_plazo_fecha_atencion"].DisplayIndex = 39;// RMAnoVL_plazo_fecha_atencion
            datagrid_accionoficial_marcas.Columns["AOM_idioma_original_id"].DisplayIndex = 40;// RMAnoVL_idioma_original_id
            datagrid_accionoficial_marcas.Columns["AOM_idioma_id"].DisplayIndex = 41;// RMAnVL_idioma_id
            datagrid_accionoficial_marcas.Columns["AOM_indiomaclave"].DisplayIndex = 42;// RMAnoVL_indiomaclave
            datagrid_accionoficial_marcas.Columns["AOM_estatusplazodescr"].DisplayIndex = 43;// RMAnoVL_estatusplazodescr
            
        }
        private void renovaciónATiempoNuevaLeyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 10;
        }

        private void renovaciónTardíasNuevaLeyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 11;
        }

        private void renovaciónPorAñoNuevaLeyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 12;
        }

        private void acciónOficialMarcasToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Tcrobot.SelectedIndex = 14;
        }

        private void button111_Click(object sender, EventArgs e)
        {
            try
            {
                if (cbPruebasAcctionOficialMarcas.Checked && tbAccionoficialMarcascorreopureba.Text == "")
                {
                    MessageBox.Show("Para actualizar un caso de prueba debe ingresar un correo de prueba.");
                    return;
                }
                //contamos el numero de marcas seleccionadas
                int contador = 0;
                for (int z = 0; z < datagrid_accionoficial_marcas.Rows.Count; z++)
                {
                    bool valor = (bool)datagrid_accionoficial_marcas.Rows[z].Cells[1].Value;
                    if (valor)
                    {
                        contador++;
                    }
                }
                //hacemos una confimacion para saber si realmente quiere enviar al numero de marcas seleccionadas
                DialogResult oDlgRes;
                oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + " correos seleccionados?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                if (oDlgRes == DialogResult.Yes)
                {
                    int iContadorcorreossend = 0;
                    int iContadorcorreosupdates = 0;

                    //definimos la prueba como falso a menos de que tenga capturado el correo de prueba
                    Boolean bCorreodepeuba = false;
                    if (tbAccionoficialMarcascorreopureba.Text != "")
                    {
                        bCorreodepeuba = true;
                        bPruebadecorreo = true;//bandera para no mandar copias de correo
                        MessageBox.Show("Se enviarán los correos seleccionados a:" + tbAccionoficialMarcascorreopureba.Text);
                    }
                    else
                    {
                        bPruebadecorreo = false;
                    }
                    if (cbPruebasAcctionOficialMarcas.Checked && tbAccionoficialMarcascorreopureba.Text != "")
                    {//si esta checado el checbox de prueba actualizamos 
                        oDlgRes = MessageBox.Show("¿Está seguro que desea enviar " + contador + "correos seleccionados a: " + tbAccionoficialMarcascorreopureba.Text + " y actualizar" +
                                                    "en el sistema casos king?", "Confirmación", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation);
                        if (oDlgRes == DialogResult.Yes)
                        {
                            //se enviara el correo de prueba 
                            bCorreodepeuba = false;
                        }
                        else
                        {//salimos del caso
                            return;
                        }
                    }

                    for (int y = 0; y < datagrid_accionoficial_marcas.Rows.Count; y++)
                    {
                        bool valor = (bool)datagrid_accionoficial_marcas.Rows[y].Cells[1].Value;
                        if (valor)
                        {
                            //obtenemos el objeto de marcasin novedad seleccionada del datagridview por medio de la busqueda de su casoid
                            String scasoid = datagrid_accionoficial_marcas.Rows[y].Cells[0].Value.ToString();
                            objMP_seleccionada obj_AccionOficialMarcasseleccionada = accionoficialmarcas.Find(x => x.sCasoId == scasoid);



                            //#CasoId 4
                            //#ContactoEmail 38
                            //#IdiomaClave 41
                            //#Subject 42
                            String sDays = "-10000";
                            String sTipoPlazoId = obj_AccionOficialMarcasseleccionada.stipoplazoid;
                            String sPlazoId = obj_AccionOficialMarcasseleccionada.sPlazoId;
                            String sEstatusPlazoId = obj_AccionOficialMarcasseleccionada.sEstatusPlazoId;
                            String sUID_Jobconfig = "";
                            String sCasoId = obj_AccionOficialMarcasseleccionada.sCasoId;
                            String sTiposolicitudid = obj_AccionOficialMarcasseleccionada.sTipoSolicitudId;
                            String sDocumentoid = obj_AccionOficialMarcasseleccionada.sDocumentoId;
                            String sCasoNumero = obj_AccionOficialMarcasseleccionada.sCasoNumero;
                            String sContactoEmail = obj_AccionOficialMarcasseleccionada.sContactoEmail;// "eramiref92@gmail.com";//´Para pruebas
                            String sIdiomaClave = obj_AccionOficialMarcasseleccionada.sIdiomaClave;
                            String sSubject = obj_AccionOficialMarcasseleccionada.sSubject;
                            int REC = 0;// Get_Rec(Convert.ToInt32(sPlazoId));
                            //string body = get_body(con, "", CasoId, UID_JobConfig, IdiomaClave);
                            /*Aquí tomamos el valor del los richtextbox para marcas ya que si lo hacemos adelante estária fuera de contexto*/
                            sGlobalSmtpCC = rtBodymessage.Text;//rtBodymessage es para MARCAS
                            Action act = () =>
                            {
                                //Aquí tomamos el tipoplazoid, el estatusplazoid y days -1000, que que queremos envíar el correo de manera inmediata y según la documentación de santiago debe ser el valor -10000
                                //por lo que generamos el siguiente query
                                conect_robot con = new conect_robot();
                                String datosconectjobconfig = con.getdatavalues();
                                //String sQuerygetUidjobconfig = "SELECT * FROM jobconfig.job_config where tipoplazoid = " + sTipoPlazoId + " and estatusplazoid like  '%" + sEstatusPlazoId + "%' and Days = -10000 limit 1;";
                                //MySqlDataReader resps_UIDJobconfig = con.getdatareader(sQuerygetUidjobconfig);
                                String sUID_JobConfig = "a5fab1ca-cea9-11e8-869b-000c291862e8";
                                String FunctionName = "Get_Email_AccionOficial_135_22_2_marcas";
                                String sViewName = "warning_accionoficial_135_22_2_marcas_erf_2022";
                                //while (resps_UIDJobconfig.Read())
                                //{
                                //    sUID_JobConfig = validareader("UID_JobConfig", "UID_JobConfig", resps_UIDJobconfig);
                                //    FunctionName = validareader("FunctionName", "UID_JobConfig", resps_UIDJobconfig);
                                //    sViewName = validareader("ViewName", "UID_JobConfig", resps_UIDJobconfig);
                                //}
                                conect_robot valores = new conect_robot();
                                String sBodymail = get_body(valores.getdatavalues(), FunctionName, Int32.Parse(sCasoId), sUID_JobConfig, sIdiomaClave);

                                //resps_UIDJobconfig.Close();
                                String sCorreodestino = "";

                                if (tbAccionoficialMarcascorreopureba.Text!="")
                                {
                                    sCorreodestino = tbAccionoficialMarcascorreopureba.Text;//Prueba de correo
                                }
                                else
                                {
                                    sCorreodestino = sContactoEmail;//debe ir sContactoEmail para casos reales
                                }
                                String[] correos = sCorreodestino.Split(',');
                                //if (correos.Length > 1)
                                //{
                                //    sCorreodestino = correos[0];
                                //    for (int z = 1; z < correos.Length; z++)
                                //    {
                                //        sGlobalSmtpCC += "," + correos[z];
                                //    }

                                //}
                                //String sAsunto = listView1.CheckedItems[x].SubItems[42].Text;
                                //iContadorcorreossend += enviarcorreo(bodymail, listView1.CheckedItems[x].SubItems[42].Text, sCorreodestino, sCasoId, REC);
                                int iresult = SendEmail(sCorreodestino, sSubject, sBodymail, Int32.Parse(sCasoId), REC, sGlobalSmtpCC);
                                iContadorcorreossend += iresult;
                                //bCorreodepeuba = false;//solo para probar IMPORTANTE Que siempre esté comentado
                                if (!bCorreodepeuba)//es un correo de un cliente por lo cual actualizamos la base de datos con el update y enviamos los archivos
                                {
                                    int iCasoid = Int32.Parse(sCasoId);
                                    int iTiposolicitudid = Int32.Parse(sTiposolicitudid);
                                    int isDocumentoid;
                                    if (sDocumentoid == "")
                                    {
                                        isDocumentoid = 0;
                                    }
                                    else
                                    {
                                        isDocumentoid = Int32.Parse(sDocumentoid);
                                    }

                                    int iDays = Int32.Parse("-10000");
                                    int iEstatusPlazoId = Int32.Parse(sEstatusPlazoId);
                                    int iPlazoId = Int32.Parse(sPlazoId);
                                    iContadorcorreosupdates += Update_Mov(datosconectjobconfig, sUID_JobConfig, iPlazoId, iCasoid, iTiposolicitudid, isDocumentoid, iEstatusPlazoId, sViewName, FileUpName, FileUpNNET, sCasoNumero, iDays, REC);
                                }
                            };
                            using (Waitforsendmail obj = new Waitforsendmail(act))
                            {
                                obj.ShowDialog();
                            }
                            tbEnviadosaccionoficialMarcas.Text = iContadorcorreossend + "";
                            tbactualizadosaccionoficialMarcas.Text = iContadorcorreosupdates + "";
                        }
                    }

                    MessageBox.Show("Se enviaron " + iContadorcorreossend + " Correos Correctamente  y se actualizarón " + iContadorcorreosupdates);// + iContadorcorreosupdates + " Registros en la base de datos King");
                }

            }
            catch (Exception E)
            {
                //error al enviar correo
            }
        }

        private void button110_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_accionoficial_marcas.Rows)
            {

                row.Cells["AOM_seleccionar"].Value = true;

            }
        }

        private void button109_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in datagrid_accionoficial_marcas.Rows)
            {

                row.Cells["AOM_seleccionar"].Value = false;

            }
        }

        private void button102_Click(object sender, EventArgs e)
        {
            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Plazoid";
                workSheet.Cells[3, "E"] = "Casoid";
                workSheet.Cells[3, "F"] = "Casonumero";
                workSheet.Cells[3, "G"] = "No.de Registro";
                workSheet.Cells[3, "H"] = "Marca";
                workSheet.Cells[3, "I"] = "tipoplazadescrip";
                workSheet.Cells[3, "J"] = "clienteNombre";
                workSheet.Cells[3, "K"] = "InteresadoNombre";
                workSheet.Cells[3, "L"] = "ContactoNombre";
                workSheet.Cells[3, "M"] = "ContactoEmail";
                workSheet.Cells[3, "N"] = "Subject";
                workSheet.Cells[3, "O"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "P"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "Q"] = "No.de Expediente";
                workSheet.Cells[3, "R"] = "Clase";
                workSheet.Cells[3, "S"] = "Referencia Cliente";
                workSheet.Cells[3, "T"] = "Fecha de Presentación";
                workSheet.Cells[3, "U"] = "Casofechavigencia";
                workSheet.Cells[3, "V"] = "CasoFechaInicio";
                workSheet.Cells[3, "W"] = "CasoFechaFin";
                workSheet.Cells[3, "X"] = "Pais Nombre";
                workSheet.Cells[3, "Y"] = "IdiomaClave";


                workSheet.Cells[1, "A"] = "Renovación de Marcas por año (Nueva Ley)";
                workSheet.Range["A1", "G1"].Merge();
                workSheet.Range["A1", "G1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "G1"].Font.Bold = true;
                workSheet.Range["A1", "G1"].Font.Size = 20;
                var row = 3;

                for (int i = 1; i < datagrid_renovacion_marca_porano_nuevaley.Rows.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[1].Value;
                    workSheet.Cells[i + 4, "B"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[2].Value;
                    workSheet.Cells[i + 4, "C"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[3].Value;
                    workSheet.Cells[i + 4, "D"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[4].Value;
                    workSheet.Cells[i + 4, "E"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[5].Value;
                    workSheet.Cells[i + 4, "F"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[6].Value;
                    workSheet.Cells[i + 4, "G"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[7].Value;
                    workSheet.Cells[i + 4, "H"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[8].Value;
                    workSheet.Cells[i + 4, "I"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[9].Value;
                    workSheet.Cells[i + 4, "J"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[10].Value;
                    workSheet.Cells[i + 4, "K"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[11].Value;
                    workSheet.Cells[i + 4, "L"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[12].Value;
                    workSheet.Cells[i + 4, "M"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[13].Value;
                    workSheet.Cells[i + 4, "N"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[14].Value;
                    workSheet.Cells[i + 4, "O"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[15].Value;
                    workSheet.Cells[i + 4, "P"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[16].Value;
                    workSheet.Cells[i + 4, "Q"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[17].Value;
                    workSheet.Cells[i + 4, "R"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[18].Value;
                    workSheet.Cells[i + 4, "S"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[19].Value;
                    workSheet.Cells[i + 4, "T"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[20].Value;
                    workSheet.Cells[i + 4, "U"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[21].Value;
                    workSheet.Cells[i + 4, "V"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[22].Value;
                    workSheet.Cells[i + 4, "W"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[23].Value;
                    workSheet.Cells[i + 4, "X"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[30].Value;
                    workSheet.Cells[i + 4, "Y"] = datagrid_renovacion_marca_porano_nuevaley.Rows[i].Cells[40].Value;

                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "Y" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
                workSheet.Range["A3", "Y" + (row + 4)].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                workSheet.Range["A3", "Y3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            }
            catch (Exception E)
            {
                Console.Write("Se canceló la exportación");
            }
        }

        private void button108_Click(object sender, EventArgs e)
        {
            try
            {
                var excelApp = new Excel.Application();
                excelApp.Visible = true;
                //Crea un nuevo libro
                excelApp.Workbooks.Add();
                //Crear una hoja
                Excel._Worksheet workSheet = excelApp.ActiveSheet;
                //En versiones anteriores de C# se requiere una conversión explícita
                //Excel._Worksheet workSheet = (Excel.Worksheet)excelApp.ActiveSheet;
                //Estableciendo los encabezados de columna
                workSheet.Cells[3, "A"] = "Autorizar";
                workSheet.Cells[3, "B"] = "Último Correo Enviado";
                workSheet.Cells[3, "C"] = "Correos Enviados";
                workSheet.Cells[3, "D"] = "Plazoid";
                workSheet.Cells[3, "E"] = "Casoid";
                workSheet.Cells[3, "F"] = "Casonumero";
                workSheet.Cells[3, "G"] = "Documento Id";
                workSheet.Cells[3, "H"] = "Marca";
                workSheet.Cells[3, "I"] = "Estatus Caso Descripción";
                workSheet.Cells[3, "J"] = "tipoplazadescrip";
                workSheet.Cells[3, "K"] = "clienteNombre";
                workSheet.Cells[3, "L"] = "InteresadoNombre";
                workSheet.Cells[3, "M"] = "ContactoNombre";
                workSheet.Cells[3, "N"] = "ContactoEmail";
                workSheet.Cells[3, "O"] = "Subject";
                workSheet.Cells[3, "P"] = "TiposolicitudDecrip";
                workSheet.Cells[3, "Q"] = "SubtiposolicitudDescrip";
                workSheet.Cells[3, "R"] = "No.de Expediente";
                workSheet.Cells[3, "S"] = "Referencia Cliente";
                workSheet.Cells[3, "T"] = "Fecha de Presentación";
                workSheet.Cells[3, "U"] = "Documanto Fecha";
                workSheet.Cells[3, "V"] = "Meses transcurridos";
                workSheet.Cells[3, "W"] = "Documento Fecha Vencimiento";
                workSheet.Cells[3, "X"] = "Pais Nombre";
                workSheet.Cells[3, "Y"] = "IdiomaClave";


                workSheet.Cells[1, "A"] = "Acción Oficial (Marcas)";
                workSheet.Range["A1", "G1"].Merge();
                workSheet.Range["A1", "G1"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
                workSheet.Range["A1", "G1"].Font.Bold = true;
                workSheet.Range["A1", "G1"].Font.Size = 20;
                var row = 3;

                for (int i = 1; i < datagrid_accionoficial_marcas.Rows.Count; i++)
                {

                    workSheet.Cells[i + 4, "A"] = datagrid_accionoficial_marcas.Rows[i].Cells[1].Value;
                    workSheet.Cells[i + 4, "B"] = datagrid_accionoficial_marcas.Rows[i].Cells[2].Value;
                    workSheet.Cells[i + 4, "C"] = datagrid_accionoficial_marcas.Rows[i].Cells[3].Value;
                    workSheet.Cells[i + 4, "D"] = datagrid_accionoficial_marcas.Rows[i].Cells[4].Value;
                    workSheet.Cells[i + 4, "E"] = datagrid_accionoficial_marcas.Rows[i].Cells[5].Value;
                    workSheet.Cells[i + 4, "F"] = datagrid_accionoficial_marcas.Rows[i].Cells[6].Value;
                    workSheet.Cells[i + 4, "G"] = datagrid_accionoficial_marcas.Rows[i].Cells[7].Value;
                    workSheet.Cells[i + 4, "H"] = datagrid_accionoficial_marcas.Rows[i].Cells[8].Value;
                    workSheet.Cells[i + 4, "I"] = datagrid_accionoficial_marcas.Rows[i].Cells[9].Value;
                    workSheet.Cells[i + 4, "J"] = datagrid_accionoficial_marcas.Rows[i].Cells[10].Value;
                    workSheet.Cells[i + 4, "K"] = datagrid_accionoficial_marcas.Rows[i].Cells[11].Value;
                    workSheet.Cells[i + 4, "L"] = datagrid_accionoficial_marcas.Rows[i].Cells[12].Value;
                    workSheet.Cells[i + 4, "M"] = datagrid_accionoficial_marcas.Rows[i].Cells[13].Value;
                    workSheet.Cells[i + 4, "N"] = datagrid_accionoficial_marcas.Rows[i].Cells[14].Value;
                    workSheet.Cells[i + 4, "O"] = datagrid_accionoficial_marcas.Rows[i].Cells[15].Value;
                    workSheet.Cells[i + 4, "P"] = datagrid_accionoficial_marcas.Rows[i].Cells[16].Value;
                    workSheet.Cells[i + 4, "Q"] = datagrid_accionoficial_marcas.Rows[i].Cells[17].Value;
                    workSheet.Cells[i + 4, "R"] = datagrid_accionoficial_marcas.Rows[i].Cells[18].Value;
                    workSheet.Cells[i + 4, "S"] = datagrid_accionoficial_marcas.Rows[i].Cells[20].Value;
                    workSheet.Cells[i + 4, "T"] = datagrid_accionoficial_marcas.Rows[i].Cells[21].Value;
                    workSheet.Cells[i + 4, "U"] = datagrid_accionoficial_marcas.Rows[i].Cells[32].Value;
                    workSheet.Cells[i + 4, "V"] = datagrid_accionoficial_marcas.Rows[i].Cells[33].Value;
                    workSheet.Cells[i + 4, "W"] = datagrid_accionoficial_marcas.Rows[i].Cells[34].Value;
                    workSheet.Cells[i + 4, "X"] = datagrid_accionoficial_marcas.Rows[i].Cells[35].Value;
                    workSheet.Cells[i + 4, "Y"] = datagrid_accionoficial_marcas.Rows[i].Cells[42].Value;


                    //workSheet.Cells[i + 4, "AP"] = listView1.Items[i].SubItems[41].Text;
                    //workSheet.Cells[i + 4, "AQ"] = listView1.Items[i].SubItems[42].Text;
                    row = i;
                }
                //foreach (var acct in listView1.Items)
                //{
                //    row++;
                //    workSheet.Cells[row, "A"] = acct.;
                //    workSheet.Cells[row, "B"] = acct;
                //    workSheet.Cells[row, "C"] = acct;
                //}

                workSheet.Columns[1].AutoFit();
                workSheet.Columns[2].AutoFit();
                workSheet.Columns[3].AutoFit();

                //Aplicando un autoformato a la tabla
                workSheet.Range["A3", "Y" + (row + 4)].AutoFormat(Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic2);
                workSheet.Range["A3", "Y" + (row + 4)].HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
                workSheet.Range["A3", "Y3"].HorizontalAlignment = Excel.XlHAlign.xlHAlignCenter;
            }
            catch (Exception E)
            {
                Console.Write("Se canceló la exportación");
            }
        }

        private void button101_Click(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_renovacion_marca_porano_nuevaley.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                if (datagrid_renovacion_marca_porano_nuevaley.CurrentRow.Cells[2].Value.ToString() != "")

                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void button107_Click(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_accionoficial_marcas.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                if (datagrid_accionoficial_marcas.CurrentRow.Cells[2].Value.ToString() != "")

                {
                    detalleenvio obj = new detalleenvio(sCasoid);
                    obj.ShowDialog();
                }
                else
                {
                    MessageBox.Show("No hay historial de correos para étse caso");
                }
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void datagrid_marcas_sinnovedades_ColumnDisplayIndexChanged(object sender, DataGridViewColumnEventArgs e)
        {

        }

        private void datagrid_renovacion_marcaatiempo_viejaley_ColumnDisplayIndexChanged(object sender, DataGridViewColumnEventArgs e)
        {
            /* Tomamos los siguientes valores para guardar en la base */
            int orden_RMTiempoVL_casoid = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_casoid"].DisplayIndex;
            int orden_RMTiempoVL_seleccionar = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_seleccionar"].DisplayIndex;
            int orden_RMTiempoVL_Ultimi_correo = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_Ultimi_correo"].DisplayIndex;
            int orden_RMTiempoVL_Correos_enviados = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_Correos_enviados"].DisplayIndex;
            int orden_RMTiempoVL_plazoid = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_plazoid"].DisplayIndex;
            int orden_RMTiempoVL_casoid_view = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_casoid_view"].DisplayIndex;
            int orden_RMTiempoVL_casonumero = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_casonumero"].DisplayIndex;
            int orden_RMTiempoVL_Numero_registro = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_Numero_registro"].DisplayIndex;
            int orden_RMTiempoVL_marca = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_marca"].DisplayIndex;
            int orden_RMTiempoVL_tipoplazodescrip = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_tipoplazodescrip"].DisplayIndex;
            int orden_RMTiempoVL_clientenombre = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_clientenombre"].DisplayIndex;
            int orden_RMTiempoVL_solicitante = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_solicitante"].DisplayIndex;
            int orden_RMTiempoVL_contactonombre = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_contactonombre"].DisplayIndex;
            int orden_RMTiempoVL_contactomail = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_contactomail"].DisplayIndex;
            int orden_RMTiempoVL_subject = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_subject"].DisplayIndex;
            int orden_RMTiempoVL_tiposoldescrip = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_tiposoldescrip"].DisplayIndex;
            int orden_RMTiempoVL_subtiposoldesc = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_subtiposoldesc"].DisplayIndex;
            int orden_RMTiempoVL_nexp = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_nexp"].DisplayIndex;
            int orden_RMTiempoVL_clase = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_clase"].DisplayIndex;
            int orden_RMTiempoVL_Referencia_nombre = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_Referencia_nombre"].DisplayIndex;
            int orden_RMTiempoVL_fechapresentacion = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_fechapresentacion"].DisplayIndex;
            int orden_RMTiempoVL_fechavigencia = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_fechavigencia"].DisplayIndex;
            int orden_RMTiempoVL_fecha_inicio = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_fecha_inicio"].DisplayIndex;
            int orden_RMTiempoVL_fecha_fin = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_fecha_fin"].DisplayIndex;
            int orden_RMTiempoVL_dias_proximo_mail = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_dias_proximo_mail"].DisplayIndex;
            int orden_RMTiempoVL_fecha_proximo_mail = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_fecha_proximo_mail"].DisplayIndex;
            int orden_RMTiempoVL_documento_fecha_recepcion = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_documento_fecha_recepcion"].DisplayIndex;
            int orden_RMTiempoVL_documento_fecha_recepcion_2 = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_documento_fecha_recepcion_2"].DisplayIndex;
            int orden_RMTiempoVL_documento_fecha_recepcion_4 = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_documento_fecha_recepcion_4"].DisplayIndex;
            int orden_RMTiempoVL_anualidades = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_anualidades"].DisplayIndex;
            int orden_RMTiempoVL_paisnombre = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_paisnombre"].DisplayIndex;
            int orden_RMTiempoVL_fecha_filing_cliente = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_fecha_filing_cliente"].DisplayIndex;
            int orden_RMTiempoVL_documento_fecha = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_documento_fecha"].DisplayIndex;
            int orden_RMTiempoVL_documento_fecha_vencimiento = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_documento_fecha_vencimiento"].DisplayIndex;
            int orden_RMTiempoVL_estatus_caso = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_estatus_caso"].DisplayIndex;
            int orden_RMTiempoVL_tipo_plazo_id = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_tipo_plazo_id"].DisplayIndex;
            int orden_RMTiempoVL_estatus_plazo_id = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_estatus_plazo_id"].DisplayIndex;
            int orden_RMTiempoVL_plazo_fecha_atencion = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_plazo_fecha_atencion"].DisplayIndex;
            int orden_RMTiempoVL_idioma_original_id = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_idioma_original_id"].DisplayIndex;
            int orden_RMTiempoVL_idioma_id = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_idioma_id"].DisplayIndex;
            int orden_RMTiempoVL_indiomaclave = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_indiomaclave"].DisplayIndex;
            int orden_RMTiempoVL_estatuscasodescr = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_estatuscasodescr"].DisplayIndex;
            int orden_RMTiempoVL_estatusplazodescr = datagrid_renovacion_marcaatiempo_viejaley.Columns["RMTiempoVL_estatusplazodescr"].DisplayIndex;

            /*Después de tomar los valores del nuevo orden debemos guardarlo en la base
             en una tabla nueva en la bas de datos jobconfig, agregando tambien el id del usuario*/

            //String nombre_columna =  e.Column.Name;
            //int valor_columna = e.Column.Index;

            //conect con1 = new conect_robot();
            //String sQuer = " UPDATE jobconfig.rmtiempovl_orden SET orden_usuario = '" + orden_RMTiempoVL_seleccionar + "' WHERE(id_usuario = '1' AND id_vista = '1' AND Columna_nombre = 'seleccionar')";
            String nombre_columna = e.Column.Name;
            int valor_columna = e.Column.DisplayIndex;

            conect_robot con1 = new conect_robot();
            String sQuer = " UPDATE jobconfig.rmtiempovl_orden SET orden_usuario = '" + valor_columna + "' WHERE(id_usuario = '1' AND id_vista = '1' AND Columna_nombre = '" + nombre_columna + "')";

            MySqlDataReader resp_query = con1.getdatareader(sQuer);
            resp_query.Close();
            con1.Cerrarconexion();






        }

        private void datagrid_renovacion_marcatardia_viejaley_ColumnDisplayIndexChanged(object sender, DataGridViewColumnEventArgs e)
        {
            /* Tomamos los siguientes valores para guardar en la base */
            int orden_RMTardiaVL_casoid = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_casoid"].DisplayIndex;
            int orden_RMTardiaVL_seleccionar = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_seleccionar"].DisplayIndex;
            int orden_RMTardiaVL_Ultimi_correo = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_Ultimi_correo"].DisplayIndex;
            int orden_RMTardiaVL_Correos_enviados = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_Correos_enviados"].DisplayIndex;
            int orden_RMTardiaVL_plazoid = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_plazoid"].DisplayIndex;
            int orden_RMTardiaVL_casoid_view = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_casoid_view"].DisplayIndex;
            int orden_RMTardiaVL_casonumero = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_casonumero"].DisplayIndex;
            int orden_RMTardiaVL_Numero_registro = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_Numero_registro"].DisplayIndex;
            int orden_RMTardiaVL_marca = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_marca"].DisplayIndex;
            int orden_RMTardiaVL_tipoplazodescrip = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_tipoplazodescrip"].DisplayIndex;
            int orden_RMTardiaVL_clientenombre = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_clientenombre"].DisplayIndex;
            int orden_RMTardiaVL_solicitante = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_solicitante"].DisplayIndex;
            int orden_RMTardiaVL_contactonombre = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_contactonombre"].DisplayIndex;
            int orden_RMTardiaVL_contactomail = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_contactomail"].DisplayIndex;
            int orden_RMTardiaVL_subject = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_subject"].DisplayIndex;
            int orden_RMTardiaVL_tiposoldescrip = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_tiposoldescrip"].DisplayIndex;
            int orden_RMTardiaVL_subtiposoldesc = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_subtiposoldesc"].DisplayIndex;
            int orden_RMTardiaVL_nexp = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_nexp"].DisplayIndex;
            int orden_RMTardiaVL_clase = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_clase"].DisplayIndex;
            int orden_RMTardiaVL_Referencia_nombre = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_Referencia_nombre"].DisplayIndex;
            int orden_RMTardiaVL_fechapresentacion = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_fechapresentacion"].DisplayIndex;
            int orden_RMTardiaVL_fechavigencia = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_fechavigencia"].DisplayIndex;
            int orden_RMTardiaVL_fecha_inicio = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_fecha_inicio"].DisplayIndex;
            int orden_RMTardiaVL_fecha_fin = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_fecha_fin"].DisplayIndex;
            int orden_RMTardiaVL_dias_proximo_mail = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_dias_proximo_mail"].DisplayIndex;
            int orden_RMTardiaVL_fecha_proximo_mail = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_fecha_proximo_mail"].DisplayIndex;
            int orden_RMTardiaVL_documento_fecha_recepcion = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_documento_fecha_recepcion"].DisplayIndex;
            int orden_RMTardiaVL_documento_fecha_recepcion_2 = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_documento_fecha_recepcion_2"].DisplayIndex;
            int orden_RMTardiaVL_documento_fecha_recepcion_4 = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_documento_fecha_recepcion_4"].DisplayIndex;
            int orden_RMTardiaVL_anualidades = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_anualidades"].DisplayIndex;
            int orden_RMTardiaVL_paisnombre = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_paisnombre"].DisplayIndex;
            int orden_RMTardiaVL_fecha_filing_cliente = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_fecha_filing_cliente"].DisplayIndex;
            int orden_RMTardiaVL_documento_fecha = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_documento_fecha"].DisplayIndex;
            int orden_RMTardiaVL_documento_fecha_vencimiento = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_documento_fecha_vencimiento"].DisplayIndex;
            int orden_RMTardiaVL_estatus_caso = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_estatus_caso"].DisplayIndex;
            int orden_RMTardiaVL_tipo_plazo_id = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_tipo_plazo_id"].DisplayIndex;
            int orden_RMTardiaVL_estatus_plazo_id = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_estatus_plazo_id"].DisplayIndex;
            int orden_RMTardiaVL_plazo_fecha_atencion = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_plazo_fecha_atencion"].DisplayIndex;
            int orden_RMTardiaVL_idioma_original_id = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_idioma_original_id"].DisplayIndex;
            int orden_RMTardiaVL_idioma_id = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_idioma_id"].DisplayIndex;
            int orden_RMTardiaVL_indiomaclave = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_indiomaclave"].DisplayIndex;
            int orden_RMTardiaVL_estatuscasodescr = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_estatuscasodescr"].DisplayIndex;
            int orden_RMTardiaVL_estatusplazodescr = datagrid_renovacion_marcatardia_viejaley.Columns["RMTardiaVL_estatusplazodescr"].DisplayIndex;

            String nombre_columna = e.Column.Name;
            int valor_columna = e.Column.DisplayIndex;

            conect_robot con1 = new conect_robot();
            String sQuer = " UPDATE jobconfig.orden_vistas_robot SET orden_usuario = '" + valor_columna + "' WHERE(id_usuario = '1' AND id_vista = '2' AND Columna_nombre = '" + nombre_columna + "')";

            MySqlDataReader resp_query = con1.getdatareader(sQuer);
            resp_query.Close();
            con1.Cerrarconexion();
        }

        private void datagrid_renovacion_marca_porano_viejaley_ColumnDisplayIndexChanged(object sender, DataGridViewColumnEventArgs e)
        {
            
            try {
                /* Tomamos los siguientes valores para guardar en la base */
                int orden_RMAnoVL_casoid = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_casoid"].DisplayIndex;
                int orden_RMAnoVL_seleccionar = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_seleccionar"].DisplayIndex;
                int orden_RMAnoVL_Ultimi_correo = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_Ultimi_correo"].DisplayIndex;
                int orden_RMAnoVL_Correos_enviados = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_Correos_enviados"].DisplayIndex;
                int orden_RMAnoVL_plazoid = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_plazoid"].DisplayIndex;
                int orden_RMAnoVL_casoid_view = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_casoid_view"].DisplayIndex;
                int orden_RMAnoVL_casonumero = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_casonumero"].DisplayIndex;
                int orden_RMAnoVL_Numero_registro = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_Numero_registro"].DisplayIndex;
                int orden_RMAnoVL_marca = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_marca"].DisplayIndex;
                int orden_RMAnoVL_tipoplazodescrip = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_tipoplazodescrip"].DisplayIndex;
                int orden_RMAnoVL_clientenombre = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_clientenombre"].DisplayIndex;
                int orden_RMAnoVL_solicitante = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_solicitante"].DisplayIndex;
                int orden_RMAnoVL_contactonombre = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_contactonombre"].DisplayIndex;
                int orden_RMAnoVL_contactomail = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_contactomail"].DisplayIndex;
                int orden_RMAnoVL_subject = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_subject"].DisplayIndex;
                int orden_RMAnoVL_tiposoldescrip = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_tiposoldescrip"].DisplayIndex;
                int orden_RMAnoVL_subtiposoldesc = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_subtiposoldesc"].DisplayIndex;
                int orden_RMAnoVL_nexp = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_nexp"].DisplayIndex;
                int orden_RMAnoVL_clase = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_clase"].DisplayIndex;
                int orden_RMAnoVL_Referencia_nombre = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_Referencia_nombre"].DisplayIndex;
                int orden_RMAnoVL_fechapresentacion = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_fechapresentacion"].DisplayIndex;
                int orden_RMAnoVL_fechavigencia = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_fechavigencia"].DisplayIndex;
                int orden_RMAnoVL_fecha_inicio = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_fecha_inicio"].DisplayIndex;
                int orden_RMAnoVL_fecha_fin = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_fecha_fin"].DisplayIndex;
                int orden_RMAnoVL_dias_proximo_mail = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_dias_proximo_mail"].DisplayIndex;
                int orden_RMAnoVL_fecha_proximo_mail = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_fecha_proximo_mail"].DisplayIndex;
                int orden_RMAnoVL_documento_fecha_recepcion = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_documento_fecha_recepcion"].DisplayIndex;
                int orden_RMAnoVL_documento_fecha_recepcion_2 = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_documento_fecha_recepcion_2"].DisplayIndex;
                int orden_RMAnoVL_documento_fecha_recepcion_4 = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_documento_fecha_recepcion_4"].DisplayIndex;
                int orden_RMAnoVL_anualidades = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_anualidades"].DisplayIndex;
                int orden_RMAnoVL_paisnombre = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_paisnombre"].DisplayIndex;
                int orden_RMAnoVL_fecha_filing_cliente = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_fecha_filing_cliente"].DisplayIndex;
                int orden_RMAnoVL_documento_fecha = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_documento_fecha"].DisplayIndex;
                int orden_RMAnoVL_documento_fecha_vencimiento = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_documento_fecha_vencimiento"].DisplayIndex;
                int orden_RMAnoVL_estatus_caso = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_estatus_caso"].DisplayIndex;
                int orden_RMAnoVL_tipo_plazo_id = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_tipo_plazo_id"].DisplayIndex;
                int orden_RMAnoVL_estatus_plazo_id = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_estatus_plazo_id"].DisplayIndex;
                int orden_RMAnoVL_plazo_fecha_atencion = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_plazo_fecha_atencion"].DisplayIndex;
                int orden_RMAnoVL_idioma_original_id = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_idioma_original_id"].DisplayIndex;
                int orden_RMAnoVL_idioma_id = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_idioma_id"].DisplayIndex;
                int orden_RMAnoVL_indiomaclave = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_indiomaclave"].DisplayIndex;
                int orden_RMAnoVL_estatuscasodescr = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_estatuscasodescr"].DisplayIndex;
                int orden_RMAnoVL_estatusplazodescr = datagrid_renovacion_marca_porano_viejaley.Columns["RMAnoVL_estatusplazodescr"].DisplayIndex;

                String nombre_columna = e.Column.Name;
                int valor_columna = e.Column.DisplayIndex;

                conect_robot con1 = new conect_robot();
                String sQuer = " UPDATE jobconfig.orden_vistas_robot_king SET orden_usuario = '" + valor_columna + "' WHERE(id_usuario = '1' AND id_vista = '3' AND Columna_nombre = '" + nombre_columna + "')";
                MySqlDataReader resp_query = con1.getdatareader(sQuer);
                resp_query.Close();
                con1.Cerrarconexion();
            }
            catch (Exception exs) {
                new filelog("", ":"+exs.Message);
            }
        }

        private void datagrid_declaracion_uso3_ColumnDisplayIndexChanged(object sender, DataGridViewColumnEventArgs e)
        {

        }

        private void datagrid_declaracion_uso3_DoubleClick(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_declaracion_uso3.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                //creamos a instancia de captura
                //de busuqeda de marca
                //de ftmarcas
                captura objcaptura = new captura(fLogin);
                bMarcas obBmarcas = new bMarcas(2,objcaptura, fLogin);
                fTmarcas obFtmarca = new fTmarcas(fLogin, objcaptura, obBmarcas,sCasoid);
                obFtmarca.Show();

                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                new filelog("", ""+E.Message);
                //MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }


        }

        private void datagrid_renovacion_marcaatiempo_viejaley_DoubleClick(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_renovacion_marcaatiempo_viejaley.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                //creamos a instancia de captura
                //de busuqeda de marca
                //de ftmarcas
                captura objcaptura = new captura(fLogin);
                bMarcas obBmarcas = new bMarcas(2, objcaptura, fLogin);
                fTmarcas obFtmarca = new fTmarcas(fLogin, objcaptura, obBmarcas, sCasoid);
                obFtmarca.Show();

                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                new filelog("", "" + E.Message);
                //MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void datagrid_renovacion_marca_porano_viejaley_DoubleClick(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_renovacion_marca_porano_viejaley.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                //creamos a instancia de captura
                //de busuqeda de marca
                //de ftmarcas
                captura objcaptura = new captura(fLogin);
                bMarcas obBmarcas = new bMarcas(2, objcaptura, fLogin);
                fTmarcas obFtmarca = new fTmarcas(fLogin, objcaptura, obBmarcas, sCasoid);
                obFtmarca.Show();

                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                new filelog("", "" + E.Message);
                //MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void datagrid_patentes_anualidades_DoubleClick(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_patentes_anualidades.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                //creamos a instancia de captura
                //de busuqeda de patentes
                //de consultacaso
                captura objcaptura = new captura(fLogin);
                Consutlacaso obusqueda = new Consutlacaso(fLogin, objcaptura, 1);
                consultacaso objPat = new consultacaso(fLogin, objcaptura, obusqueda, sCasoid);
                objPat.Show();
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                new filelog("", "" + E.Message);
                //MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void datagrid_cita_pago_DoubleClick(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_cita_pago.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                //creamos a instancia de captura
                //de busuqeda de patentes
                //de consultacaso
                captura objcaptura = new captura(fLogin);
                Consutlacaso obusqueda = new Consutlacaso(fLogin, objcaptura, 1);
                consultacaso objPat = new consultacaso(fLogin, objcaptura, obusqueda, sCasoid);
                objPat.Show();
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                new filelog("", "" + E.Message);
                //MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void datagrid_renovacion_marca_porano_nuevaley_DoubleClick(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_renovacion_marca_porano_nuevaley.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                //creamos a instancia de captura
                //de busuqeda de marca
                //de ftmarcas
                captura objcaptura = new captura(fLogin);
                bMarcas obBmarcas = new bMarcas(2, objcaptura, fLogin);
                fTmarcas obFtmarca = new fTmarcas(fLogin, objcaptura, obBmarcas, sCasoid);
                obFtmarca.Show();

                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                new filelog("", "" + E.Message);
                //MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void datagrid_accionoficial_marcas_DoubleClick(object sender, EventArgs e)
        {
            try
            {

                String sCasoid = datagrid_accionoficial_marcas.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                //creamos a instancia de captura
                //de busuqeda de marca
                //de ftmarcas
                captura objcaptura = new captura(fLogin);
                bMarcas obBmarcas = new bMarcas(2, objcaptura, fLogin);
                fTmarcas obFtmarca = new fTmarcas(fLogin, objcaptura, obBmarcas, sCasoid);
                obFtmarca.Show();

                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                new filelog("", "" + E.Message);
                //MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }

        private void datagrid_accionoficial_patentes_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                String sCasoid = datagrid_accionoficial_patentes.CurrentRow.Cells[0].Value.ToString();//lvMsinnovedades.SelectedItems[0].SubItems[4].Text;
                //creamos a instancia de captura
                //de busuqeda de patentes
                //de consultacaso
                captura objcaptura = new captura(fLogin);
                Consutlacaso obusqueda = new Consutlacaso(fLogin, objcaptura, 1);
                consultacaso objPat = new consultacaso(fLogin, objcaptura, obusqueda, sCasoid);
                objPat.Show();
                //MessageBox.Show("Veremos el detalle del casoid" + sCasoid);
            }
            catch (Exception E)
            {
                new filelog("", "" + E.Message);
                //MessageBox.Show("Debe seleccionar un registro para ver su detalle");
            }
        }










        //private void tabControl1_DrawItem(object sender, DrawItemEventArgs e)
        //{
        //    var tabPage = this.Tcrobot.TabPages[e.Index];
        //    var tabRect = this.Tcrobot.GetTabRect(e.Index);
        //    tabRect.Inflate(-2, -2);
        //    if (e.Index == this.Tcrobot.TabCount - 1)
        //    {
        //        var addImage = Properties.Resources.cargando;
        //        e.Graphics.DrawImage(addImage,
        //            tabRect.Left + (tabRect.Width - addImage.Width) / 2,
        //            tabRect.Top + (tabRect.Height - addImage.Height) / 2);
        //    }
        //    else
        //    {
        //        var closeImage = Properties.Resources.cargando;
        //        e.Graphics.DrawImage(closeImage,
        //            (tabRect.Right - closeImage.Width),
        //            tabRect.Top + (tabRect.Height - closeImage.Height) / 2);
        //        TextRenderer.DrawText(e.Graphics, tabPage.Text, tabPage.Font,
        //            tabRect, tabPage.ForeColor, TextFormatFlags.Left);
        //    }
        //}

    }

    public class objMP_seleccionada
    {
        private int rEC;
        private string text;
        private string sUID_JobConfig;
        private string functionName;
        private string sViewName;

        //String sobj_PlazoId { get; set; }
        //String sobj_EstatusPlazoId { get; set; }
        //String sobj_CasoId { get; set; }
        //String sobj_Documentoid { get; set; }
        //String sobj_CasoNumero { get; set; }
        //String sobj_ContactoEmail { get; set; }
        //String sobj_IdiomaClave { get; set; }
        //String sobj_Subject { get; set; }
        /*valores del query*/
        public String sPlazoId { get; set; }
        public String sCasoId { get; set; }
        public String sTipoSolicitudId { get; set; }
        public String sDocumentoId { get; set; }
        public String sTipoPlazoDescrip { get; set; }
        public String sClienteNombre { get; set; }
        public String sInteresadoNombre { get; set; }
        public String sTipoSolicitudDescrip { get; set; }
        public String sSubTipoSolicitudDescripcion { get; set; }
        public String sMarca { get; set; }
        public String sInvento { get; set; }
        public String sFechadiferencia { get; set; }
        public DateTime sFechaLimite { get; set; }

        public String sCasoNumeroExpedienteLargo { get; set; }
        public String sCasoNumero { get; set; }
        public String sCasoProductosClase { get; set; }
        public String sReferenciaNombre { get; set; }
        public DateTime sCasoFechaVigencia { get; set; }
        public DateTime sCasoFechaConcesion { get; set; }
        
        public DateTime sCasoFechaIni { get; set; }
        public DateTime sCasoFechaInidos { get; set; }
        public DateTime sCasoFechaFin { get; set; }
        public DateTime sDocumentoFechaRecepcion { get; set; }
        public DateTime sDocumentoFechaRecepcion2meses { get; set; }
        public DateTime sDocumentoFechaRecepcion4meses { get; set; }
        public String sanualidades { get; set; }
        public String sPaisNombre { get; set; }
        public DateTime sCasoFechaRecepcion { get; set; }
        public DateTime sCasoFechaFilingCliente { get; set; }
        public String sCasoNumConcedida { get; set; }
        public DateTime sDocumentoFecha { get; set; }
        public DateTime sDocumentoFechaVencimiento { get; set; }
        public String sEstatusCasoId { get; set; }
        public String sEstatusCasoDescrip { get; set; }
        public String stipoplazoid { get; set; }
        public String sEstatusPlazoId { get; set; }
        public String sEstatusPlazoDescrip { get; set; }
        public DateTime sPlazoFechaAtencion { get; set; }
        public String sContactoNombre { get; set; }
        public String sContactoEmail { get; set; }
        public String sIdiomaOriginalID { get; set; }
        public String sIdiomaId { get; set; }
        public String sIdiomaClave { get; set; }
        public String sSubject { get; set; }
        public String sSendNow { get; set; }
        public DateTime sFechaSended { get; set; }
        public String snumenviados { get; set; }

        //valores por vista
        public int Robj_EC { get; set; }
        public String bobj_Correodepeuba { get; set; }
        public String sobj_UID_JobConfig { get; set; }
        public String Fobj_unctionName { get; set; }
        public String sobj_ViewName { get; set; }


        public objMP_seleccionada(String PlazoId,
                                    String CasoId,
                                    String DocumentoId,
                                    String TipoPlazoDescrip,
                                    String ClienteNombre,
                                    String InteresadoNombre,
                                    String TipoSolicitudDescrip,
                                    String SubTipoSolicitudDescripcion,
                                    String Marca,
                                    String Invento,
                                    String Fechadiferencia,
                                    DateTime FechaLimite,
                                    String CasoNumeroExpedienteLargo,
                                    String CasoNumero,
                                    String CasoProductosClase,
                                    String ReferenciaNombre,
                                    DateTime CasoFechaConcesion,
                                    DateTime CasoFechaVigencia,
                                    DateTime CasoFechaIni,
                                    DateTime CasoFechaInidos,
                                    DateTime CasoFechaFin,
                                    DateTime DocumentoFechaRecepcion,
                                    DateTime DocumentoFechaRecepcion2meses,
                                    DateTime DocumentoFechaRecepcion4meses,
                                    String anualidades,
                                    String PaisNombre,
                                    DateTime CasoFechaRecepcion,
                                    DateTime CasoFechaFilingCliente,
                                    String CasoNumConcedida,
                                    DateTime DocumentoFecha,
                                    DateTime DocumentoFechaVencimiento,
                                    String EstatusCasoId,
                                    String EstatusCasoDescrip,
                                    String tipoplazoid,
                                    String EstatusPlazoId,
                                    String EstatusPlazoDescrip,
                                    DateTime PlazoFechaAtencion,
                                    String ContactoNombre,
                                    String ContactoEmail,
                                    String IdiomaOriginalID,
                                    String IdiomaId,
                                    String IdiomaClave,
                                    String Subject,
                                    String SendNow,
                                    DateTime FechaSended,
                                    String numenviados,
                                    int REC,
                                    String bCorreodepeuba,
                                    String sUID_JobConfig,
                                    String FunctionName,
                                    String sViewName,
                                    String Tiposolicitudid)
        {


            sPlazoId = PlazoId;
            sCasoId = CasoId;
            sTipoSolicitudId = Tiposolicitudid;
            sDocumentoId = DocumentoId;
            sTipoPlazoDescrip = TipoPlazoDescrip;
            sClienteNombre = ClienteNombre;
            sInteresadoNombre = InteresadoNombre;
            sTipoSolicitudDescrip = TipoSolicitudDescrip;
            sSubTipoSolicitudDescripcion = SubTipoSolicitudDescripcion;
            sMarca = Marca;
            sInvento = Invento;
            sFechadiferencia = Fechadiferencia;
            sFechaLimite = FechaLimite;
            sCasoNumeroExpedienteLargo = CasoNumeroExpedienteLargo;
            sCasoNumero = CasoNumero;
            sCasoProductosClase = CasoProductosClase;
            sReferenciaNombre = ReferenciaNombre;
            sCasoFechaVigencia = CasoFechaVigencia;
            sCasoFechaConcesion = CasoFechaConcesion;
            sCasoFechaIni = CasoFechaIni;
            sCasoFechaInidos = CasoFechaInidos;
            sCasoFechaFin = CasoFechaFin;
            sDocumentoFechaRecepcion = DocumentoFechaRecepcion;
            sDocumentoFechaRecepcion2meses = DocumentoFechaRecepcion2meses;
            sDocumentoFechaRecepcion4meses = DocumentoFechaRecepcion4meses;
            sanualidades = anualidades;
            sPaisNombre = PaisNombre;
            sCasoFechaRecepcion = CasoFechaRecepcion;
            sCasoFechaFilingCliente = CasoFechaFilingCliente;
            sCasoNumConcedida = CasoNumConcedida;
            sDocumentoFecha = DocumentoFecha;
            sDocumentoFechaVencimiento = DocumentoFechaVencimiento;
            sEstatusCasoId = EstatusCasoId;
            sEstatusCasoDescrip = EstatusCasoDescrip;
            stipoplazoid = tipoplazoid;
            sEstatusPlazoId = EstatusPlazoId;
            sEstatusPlazoDescrip = EstatusPlazoDescrip;
            sPlazoFechaAtencion = PlazoFechaAtencion;
            sContactoNombre = ContactoNombre;
            sContactoEmail = ContactoEmail;
            sIdiomaOriginalID = IdiomaOriginalID;
            sIdiomaId = IdiomaId;
            sIdiomaClave = IdiomaClave;
            sSubject = Subject;
            sSendNow = SendNow;
            sFechaSended = FechaSended;
            snumenviados = numenviados;

            Robj_EC = REC;
            bobj_Correodepeuba = bCorreodepeuba;
            sobj_UID_JobConfig = sUID_JobConfig;
            Fobj_unctionName = FunctionName;
            sobj_ViewName = sViewName;
        }

        //public objM_seleca(string sCasoId, string sDocumentoId, string sTipoPlazoDescrip, string sClienteNombre, string sInteresadoNombre, string sTipoSolicitudDescrip, string sSubTipoSolicitudDescripcion, string sMarca,  string sCasoNumeroExpedienteLargo, string sCasoNumero, string sCasoProductosClase, string sReferenciaNombre, string sCasoFechaVigencia, string sCasoFechaIni, string sCasoFechaFin, string sDocumentoFechaRecepcion, string sDocumentoFechaRecepcion2meses, string sDocumentoFechaRecepcion4meses, string sanualidades, string sPaisNombre, string sCasoFechaRecepcion, string sCasoFechaFilingCliente, string sCasoNumConcedida, string sDocumentoFecha, string sDocumentoFechaVencimiento, string sEstatusCasoId, string sEstatusCasoDescrip, string stipoplazoid, string sEstatusPlazoId, string sEstatusPlazoDescrip, string sPlazoFechaAtencion, string sContactoNombre, string sContactoEmail, string sIdiomaOriginalID, string sIdiomaId, string sIdiomaClave, string sSubject, string sSendNow, string sFechaSended, string snumenviados, int rEC, string text, string sUID_JobConfig, string functionName, string sViewName)
        //{
        //    this.sCasoId = sCasoId;
        //    this.sDocumentoId = sDocumentoId;
        //    this.sTipoPlazoDescrip = sTipoPlazoDescrip;
        //    this.sClienteNombre = sClienteNombre;
        //    this.sInteresadoNombre = sInteresadoNombre;
        //    this.sTipoSolicitudDescrip = sTipoSolicitudDescrip;
        //    this.sSubTipoSolicitudDescripcion = sSubTipoSolicitudDescripcion;
        //    this.sMarca = sMarca;
        //    this.sCasoNumeroExpedienteLargo = sCasoNumeroExpedienteLargo;
        //    this.sCasoNumero = sCasoNumero;
        //    this.sCasoProductosClase = sCasoProductosClase;
        //    this.sReferenciaNombre = sReferenciaNombre;
        //    this.sCasoFechaVigencia = sCasoFechaVigencia;
        //    this.sCasoFechaIni = sCasoFechaIni;
        //    this.sCasoFechaFin = sCasoFechaFin;
        //    this.sDocumentoFechaRecepcion = sDocumentoFechaRecepcion;
        //    this.sDocumentoFechaRecepcion2meses = sDocumentoFechaRecepcion2meses;
        //    this.sDocumentoFechaRecepcion4meses = sDocumentoFechaRecepcion4meses;
        //    this.sanualidades = sanualidades;
        //    this.sPaisNombre = sPaisNombre;
        //    this.sCasoFechaRecepcion = sCasoFechaRecepcion;
        //    this.sCasoFechaFilingCliente = sCasoFechaFilingCliente;
        //    this.sCasoNumConcedida = sCasoNumConcedida;
        //    this.sDocumentoFecha = sDocumentoFecha;
        //    this.sDocumentoFechaVencimiento = sDocumentoFechaVencimiento;
        //    this.sEstatusCasoId = sEstatusCasoId;
        //    this.sEstatusCasoDescrip = sEstatusCasoDescrip;
        //    this.stipoplazoid = stipoplazoid;
        //    this.sEstatusPlazoId = sEstatusPlazoId;
        //    this.sEstatusPlazoDescrip = sEstatusPlazoDescrip;
        //    this.sPlazoFechaAtencion = sPlazoFechaAtencion;
        //    this.sContactoNombre = sContactoNombre;
        //    this.sContactoEmail = sContactoEmail;
        //    this.sIdiomaOriginalID = sIdiomaOriginalID;
        //    this.sIdiomaId = sIdiomaId;
        //    this.sIdiomaClave = sIdiomaClave;
        //    this.sSubject = sSubject;
        //    this.sSendNow = sSendNow;
        //    this.sFechaSended = sFechaSended;
        //    this.snumenviados = snumenviados;
        //    this.rEC = rEC;
        //    this.text = text;
        //    this.sUID_JobConfig = sUID_JobConfig;
        //    this.functionName = functionName;
        //    this.sViewName = sViewName;
        //}
        

    }



   
}

